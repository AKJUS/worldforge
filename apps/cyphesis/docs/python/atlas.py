#This file is auto generated by the PythonDocGenerator tool. Please do not edit manually.
#Its sole purpose is to provide Python stubs for the C++ code, which can be used in your IDE to help during development.
#Do note that these types aren't complete, with constructor args and properties missing.
"""Atlas bindings, allowing the Atlas library to be used from Python."""

class ElementList:
    def __init__(self, *args, **kwargs):
        pass

class ElementMap:
    def __init__(self, *args, **kwargs):
        pass
    def items(self):
        pass

class Entity:
    def __init__(self, *args, **kwargs):
        pass
    def get_name(self):
        pass

class Operation:
    """An Atlas Operation."""
    def __init__(self, *args, **kwargs):
        pass
    def copy(self):
        """Copies the operation into a new instance."""
        pass
    def get_args(self):
        pass
    def get_from(self):
        pass
    def get_future_milliseconds(self):
        pass
    def get_future_seconds(self):
        pass
    def get_name(self):
        pass
    def get_refno(self):
        pass
    def get_serialno(self):
        pass
    def get_stamp(self):
        pass
    def get_to(self):
        pass
    def is_default_serialno(self):
        pass
    def set_args(self, sequence):
        """Sets the argument list. The supplied sequence could be any of Operation|ElementMap|RootEntity|Python Dict."""
        pass
    def set_from(self, string):
        """Sets from which entity the operation is from."""
        pass
    def set_future_milliseconds(self):
        pass
    def set_future_seconds(self):
        pass
    def set_name(self):
        pass
    def set_refno(self, long):
        """Sets the reference number."""
        pass
    def set_serialno(self, long):
        """Sets the serial number."""
        pass
    def set_stamp(self):
        pass
    def set_to(self, string):
        """Sets to which entity the operation is directed."""
        pass

class Oplist:
    """A list of Atlas Operation."""
    def __init__(self, *args, **kwargs):
        pass
    def append(self, object):
        """Appends new operations. The supplied object can be a single Operation, or another Oplist, or a sequence of the aforementioned two."""
        pass

class Root:
    def __init__(self, *args, **kwargs):
        pass
    def get_name(self):
        pass

