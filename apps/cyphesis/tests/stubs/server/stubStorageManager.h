// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubStorageManager_custom.h file.

#ifndef STUB_SERVER_STORAGEMANAGER_H
#define STUB_SERVER_STORAGEMANAGER_H

#include "server/StorageManager.h"
#include "stubStorageManager_custom.h"

#ifndef STUB_StorageManager_entityInserted
//#define STUB_StorageManager_entityInserted
  void StorageManager::entityInserted(LocatedEntity&)
  {
    
  }
#endif //STUB_StorageManager_entityInserted

#ifndef STUB_StorageManager_entityUpdated
//#define STUB_StorageManager_entityUpdated
  void StorageManager::entityUpdated(LocatedEntity&)
  {
    
  }
#endif //STUB_StorageManager_entityUpdated

#ifndef STUB_StorageManager_encodeProperty
//#define STUB_StorageManager_encodeProperty
  void StorageManager::encodeProperty(const PropertyBase&, std::string&)
  {
    
  }
#endif //STUB_StorageManager_encodeProperty

#ifndef STUB_StorageManager_encodeElement
//#define STUB_StorageManager_encodeElement
  void StorageManager::encodeElement(const Atlas::Message::Element& element, std::string& store)
  {
    
  }
#endif //STUB_StorageManager_encodeElement

#ifndef STUB_StorageManager_restorePropertiesRecursively
//#define STUB_StorageManager_restorePropertiesRecursively
  void StorageManager::restorePropertiesRecursively(LocatedEntity&)
  {
    
  }
#endif //STUB_StorageManager_restorePropertiesRecursively

#ifndef STUB_StorageManager_insertEntity
//#define STUB_StorageManager_insertEntity
  void StorageManager::insertEntity(LocatedEntity&)
  {
    
  }
#endif //STUB_StorageManager_insertEntity

#ifndef STUB_StorageManager_updateEntity
//#define STUB_StorageManager_updateEntity
  void StorageManager::updateEntity(LocatedEntity&)
  {
    
  }
#endif //STUB_StorageManager_updateEntity

#ifndef STUB_StorageManager_restoreChildren
//#define STUB_StorageManager_restoreChildren
  size_t StorageManager::restoreChildren(LocatedEntity&)
  {
    return 0;
  }
#endif //STUB_StorageManager_restoreChildren

#ifndef STUB_StorageManager_StorageManager
//#define STUB_StorageManager_StorageManager
   StorageManager::StorageManager(WorldRouter& world, Database& db, EntityBuilder& entityBuilder, PropertyManager& propertyManager)
    : sigc::trackable(world, db, entityBuilder, propertyManager)
  {
    
  }
#endif //STUB_StorageManager_StorageManager

#ifndef STUB_StorageManager_StorageManager_DTOR
//#define STUB_StorageManager_StorageManager_DTOR
   StorageManager::~StorageManager()
  {
    
  }
#endif //STUB_StorageManager_StorageManager_DTOR

#ifndef STUB_StorageManager_tick
//#define STUB_StorageManager_tick
  void StorageManager::tick()
  {
    
  }
#endif //STUB_StorageManager_tick

#ifndef STUB_StorageManager_initWorld
//#define STUB_StorageManager_initWorld
  int StorageManager::initWorld(const Ref<LocatedEntity>& ent)
  {
    return 0;
  }
#endif //STUB_StorageManager_initWorld

#ifndef STUB_StorageManager_restoreWorld
//#define STUB_StorageManager_restoreWorld
  int StorageManager::restoreWorld(const Ref<LocatedEntity>& ent)
  {
    return 0;
  }
#endif //STUB_StorageManager_restoreWorld

#ifndef STUB_StorageManager_shutdown
//#define STUB_StorageManager_shutdown
  int StorageManager::shutdown(bool& exit_flag, const std::map<long, Ref<LocatedEntity>>& entites)
  {
    return 0;
  }
#endif //STUB_StorageManager_shutdown


#endif