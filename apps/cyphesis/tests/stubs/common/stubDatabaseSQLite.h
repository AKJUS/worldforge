// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubDatabaseSQLite_custom.h file.

#ifndef STUB_COMMON_DATABASESQLITE_H
#define STUB_COMMON_DATABASESQLITE_H

#include "common/DatabaseSQLite.h"
#include "stubDatabaseSQLite_custom.h"

#ifndef STUB_DatabaseSQLite_poll_tasks
//#define STUB_DatabaseSQLite_poll_tasks
  void DatabaseSQLite::poll_tasks()
  {
    
  }
#endif //STUB_DatabaseSQLite_poll_tasks

#ifndef STUB_DatabaseSQLite_DatabaseSQLite
//#define STUB_DatabaseSQLite_DatabaseSQLite
   DatabaseSQLite::DatabaseSQLite()
    : Database()
  {
    
  }
#endif //STUB_DatabaseSQLite_DatabaseSQLite

#ifndef STUB_DatabaseSQLite_DatabaseSQLite_DTOR
//#define STUB_DatabaseSQLite_DatabaseSQLite_DTOR
   DatabaseSQLite::~DatabaseSQLite()
  {
    
  }
#endif //STUB_DatabaseSQLite_DatabaseSQLite_DTOR

#ifndef STUB_DatabaseSQLite_initConnection
//#define STUB_DatabaseSQLite_initConnection
  int DatabaseSQLite::initConnection()
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_initConnection

#ifndef STUB_DatabaseSQLite_shutdownConnection
//#define STUB_DatabaseSQLite_shutdownConnection
  void DatabaseSQLite::shutdownConnection()
  {
    
  }
#endif //STUB_DatabaseSQLite_shutdownConnection

#ifndef STUB_DatabaseSQLite_getObject
//#define STUB_DatabaseSQLite_getObject
  int DatabaseSQLite::getObject(const std::string& table, const std::string& key, Atlas::Message::MapType&)
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_getObject

#ifndef STUB_DatabaseSQLite_encodeObject
//#define STUB_DatabaseSQLite_encodeObject
  int DatabaseSQLite::encodeObject(const Atlas::Message::MapType&, std::string&)
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_encodeObject

#ifndef STUB_DatabaseSQLite_reportError
//#define STUB_DatabaseSQLite_reportError
  void DatabaseSQLite::reportError(const char* errorMsg)
  {
    
  }
#endif //STUB_DatabaseSQLite_reportError

#ifndef STUB_DatabaseSQLite_connect
//#define STUB_DatabaseSQLite_connect
  int DatabaseSQLite::connect(const std::string& context, std::string& error_msg)
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_connect

#ifndef STUB_DatabaseSQLite_runSimpleSelectQuery
//#define STUB_DatabaseSQLite_runSimpleSelectQuery
  DatabaseResult DatabaseSQLite::runSimpleSelectQuery(const std::string& query)
  {
    return *static_cast<DatabaseResult*>(nullptr);
  }
#endif //STUB_DatabaseSQLite_runSimpleSelectQuery

#ifndef STUB_DatabaseSQLite_runCommandQuery
//#define STUB_DatabaseSQLite_runCommandQuery
  int DatabaseSQLite::runCommandQuery(const std::string& query)
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_runCommandQuery

#ifndef STUB_DatabaseSQLite_registerRelation
//#define STUB_DatabaseSQLite_registerRelation
  int DatabaseSQLite::registerRelation(std::string& tablename, const std::string& sourcetable, const std::string& targettable, RelationType kind)
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_registerRelation

#ifndef STUB_DatabaseSQLite_registerThoughtsTable
//#define STUB_DatabaseSQLite_registerThoughtsTable
  int DatabaseSQLite::registerThoughtsTable()
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_registerThoughtsTable

#ifndef STUB_DatabaseSQLite_registerEntityTable
//#define STUB_DatabaseSQLite_registerEntityTable
  int DatabaseSQLite::registerEntityTable(const std::map<std::string, int>& chunks)
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_registerEntityTable

#ifndef STUB_DatabaseSQLite_registerPropertyTable
//#define STUB_DatabaseSQLite_registerPropertyTable
  int DatabaseSQLite::registerPropertyTable()
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_registerPropertyTable

#ifndef STUB_DatabaseSQLite_newId
//#define STUB_DatabaseSQLite_newId
  long DatabaseSQLite::newId()
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_newId

#ifndef STUB_DatabaseSQLite_registerEntityIdGenerator
//#define STUB_DatabaseSQLite_registerEntityIdGenerator
  int DatabaseSQLite::registerEntityIdGenerator()
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_registerEntityIdGenerator

#ifndef STUB_DatabaseSQLite_registerSimpleTable
//#define STUB_DatabaseSQLite_registerSimpleTable
  int DatabaseSQLite::registerSimpleTable(const std::string& name, const Atlas::Message::MapType& row)
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_registerSimpleTable

#ifndef STUB_DatabaseSQLite_scheduleCommand
//#define STUB_DatabaseSQLite_scheduleCommand
  int DatabaseSQLite::scheduleCommand(const std::string& query)
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_scheduleCommand

#ifndef STUB_DatabaseSQLite_runMaintainance
//#define STUB_DatabaseSQLite_runMaintainance
  int DatabaseSQLite::runMaintainance()
  {
    return 0;
  }
#endif //STUB_DatabaseSQLite_runMaintainance

#ifndef STUB_DatabaseSQLite_blockUntilAllQueriesComplete
//#define STUB_DatabaseSQLite_blockUntilAllQueriesComplete
  void DatabaseSQLite::blockUntilAllQueriesComplete()
  {
    
  }
#endif //STUB_DatabaseSQLite_blockUntilAllQueriesComplete


#ifndef STUB_DatabaseResultWorkerSqlite_size
//#define STUB_DatabaseResultWorkerSqlite_size
  int DatabaseResultWorkerSqlite::size() const
  {
    return 0;
  }
#endif //STUB_DatabaseResultWorkerSqlite_size

#ifndef STUB_DatabaseResultWorkerSqlite_columns
//#define STUB_DatabaseResultWorkerSqlite_columns
  int DatabaseResultWorkerSqlite::columns() const
  {
    return 0;
  }
#endif //STUB_DatabaseResultWorkerSqlite_columns

#ifndef STUB_DatabaseResultWorkerSqlite_error
//#define STUB_DatabaseResultWorkerSqlite_error
  bool DatabaseResultWorkerSqlite::error() const
  {
    return false;
  }
#endif //STUB_DatabaseResultWorkerSqlite_error

#ifndef STUB_DatabaseResultWorkerSqlite_begin
//#define STUB_DatabaseResultWorkerSqlite_begin
  DatabaseResult::const_iterator DatabaseResultWorkerSqlite::begin() const
  {
    return *static_cast<DatabaseResult::const_iterator*>(nullptr);
  }
#endif //STUB_DatabaseResultWorkerSqlite_begin

#ifndef STUB_DatabaseResultWorkerSqlite_end
//#define STUB_DatabaseResultWorkerSqlite_end
  DatabaseResult::const_iterator DatabaseResultWorkerSqlite::end() const
  {
    return *static_cast<DatabaseResult::const_iterator*>(nullptr);
  }
#endif //STUB_DatabaseResultWorkerSqlite_end


#endif