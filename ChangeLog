2005-12-01  James Turner  <james@worldforge.org>

    * Eris/Entity.cpp: don't assert if sight(create) is received after an
      entity is already in the View: just log a warning and emit the signal.
      
2005-12-01  James Turner  <james@worldforge.org>

    * Eris/Entity.cpp: unregister a moving entity from the View upon deletion;
      should fix a crash reported by Al.
      
2005-11-28  James Turner  <james@worldforge.org>

    * Eris/Account.cpp: delete all remaining active avatars when destructing
      an account.

2005-11-19  James Turner  <james@worldforge.org>

	* Eris/Type.h, Eris/Type.cpp: add a helper method to perform the copy/merge
	  behaviour choosen for combining incoming values in SET operations with
	  the existing data.
	  
	* Eris/Entity.cpp: use the new copy/merge function to set attribute state.
	  This should permit incremental updating of large attributes, eg 'terrain',
	  from the server.

	* Eris/View.cpp: make an assert more specific; avoid a failure if the View
	  is deleted before the top-level entity is registered.
	  
	* Eris/Account.cpp: don't log warning messages for server-side errors to the
	  console - just pass them up to the client.
	  
	* test/agent.cpp, test/agent.h: work-in-progress code towards spamming the
	  the test-harness with a large number of ops.
	  
2005-10-25  Al Riddoch  <alriddoch@zepler.org>

	* Release 1.3.9, Interface version 9.

2005-10-25  Al Riddoch  <alriddoch@zepler.org>

	* test/Makefile.am: Re-enable running tests, as they now seem to
	  complete.

2005-10-23  James Turner  <james@worldforge.org>

	* configure.ac: update version number for 1.3.9 release

2005-10-23  James Turner  <james@worldforge.org>

	* test/tests.cpp: add a test for entity processing
	  sound of actions

	* test/agent.cpp: silence some silly test output
	
2005-10-23  James Turner  <james@worldforge.org>

	* Eris/Account.cpp, Eris/Response.cpp, Eris/Response.h: Add a new response
	  type, ignore, and use this to stop the warning about an op with a valid
	  refno being unhandled when activating a character. Makes the unit-tests
	  almost silent.

2005-10-22  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp, Eris/Entity.h: change how state updates (move, set)
	  are processed, so Move ops can update arbitrary attributes.
	  
	* Eris/EntityRouter.cpp, Eris/IGRouter.cpp: changes for revised Entity
	  state update API.
	  
	* Eris/View.h: add an accessor for querying the current size of the 
	  pending look queue - this provides a crude estimation of the connection
	  lag.
	  
	* Eris/TypeService.cpp, Eris/TypeService.h: decimate the size of the
	  builtin type tree, since it is no longer needed early in connection to
	  a server.
	  
	* test/tests.cpp, test/stubServer.cpp, test/controller.h,
	  test/controller.cpp: add a test for a move operation updating ad-hoc
	  entity state.

2005-10-21  James Turner  <james@worldforge.org>

	* Eris/View.h, Eris/View.cpp: make the state handling in sight() more
	  descriptive and tolerant when a strange state is encountered. Should
	  help debugging a bizzare error with silence.

2005-10-20  James Turner  <james@worldforge.org>

	* Eris/Avatar.cpp, Eris/Avatar.h: add support sending in-game emotes
	
	* test/tests.cpp: add a test for receiving an in-game emote

2005-10-20  James Turner  <james@worldforge.org>

	* Eris/View.cpp, Eris/View.h, Eris/Account.cpp, Eris/Account.h,
	  Eris/Avatar.cpp, Eris/Connection.cpp, Eris/Entity.h, Eris/Entity.cpp, 
	  Eris/EntityRouter.cpp, Eris/Factory.h, Eris/IGRouter.cpp,
	  Eris/TypeBoundRedispatch.cpp, Eris/TypeBoundRedispatch.h, 
	  Eris/TypeInfo.cpp, Eris/TypeService.cpp, Eris/TypeService.h:
	  switch to using RootOperation / RootEntity exclusively, and hence
	  avoid installing any custom factories at all.
	  
	* test/agent.cpp, test/clientConnection.cpp, test/clientConnection.h,
	  test/commander.cpp, test/controller.cpp, test/controller.h, 
	  test/setupHelpers.cpp, test/setupHelpers.h, test/tests.cpp,
	  test/stubServer.cpp, test/stubServer.h:
	  Add tests for creating a character and for attempting
	  character creation with an invalid type.

2005-10-19  James Turner  <james@worldforge.org>

	* Eris/View.cpp: deal with the scenario where a look-queued entity
	  disappears and then re-appears prior to the LOOK being issued.
	  
	* Eris/IGRouter.cpp, Eris/EntityRouter.cpp, Eris/IGRouter.h,
	  Eris/EntityRouter.h, Eris/Account.cpp: switching to using classNos for 
	  most decoding, and use TypeInfos in a few critical places. This replaces
	  many uses of smart_dynamic_cast.
	  
	* Eris/TypeService.cpp: make verification more robust, by ensuring the
	  local TypeInfo node is fully bound.

	* test/signalHelpers.h, test/tests.cpp: extend the action tests to
	  try with a custom op type.

	* test/stubServer.cpp: expand the type heirarchy on the stub server, so
	  it correctly satisifies all type requests from Eris.

2005-10-17  James Turner  <james@worldforge.org>

	* Eris/View.cpp, Eris/View.h: add in throttling of the rate at which
	  we request entities from the server (LOOKs). For the moment a very
	  crude metric is used to control the throttle, this can and will be
	  tuned (potentially dynamically).

	* test/setupHelpers.cpp: add a timeout to the AvatarGetter, in case
	  the entity fails to take for some reason.
	  
	* test/stubServer.cpp, test/stubServer.h, test/commander.cpp: add
	  a test command which adds a large number of entities to the world
	  
	* test/tests.cpp, test/viewTest.cpp, test/viewTest.h: add a test of
	  the look queue code, by entering a world with a large number of
	  entities visible. Also add a timeout to the WaitForAppearance helper.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* Eris/BaseConnection.cpp, Eris/Connection.cpp: Check for fail()
	  in addition to eof() when testing whether streams are still
	  usable.

2005-10-05  Al Riddoch  <alriddoch@zepler.org>

	* eris.spec.in: Update spec for renamed Atlas-C++ rpms.

	* Release 1.3.8, Interface version 8.

2005-10-04  Al Riddoch  <alriddoch@zepler.org>

	* test/Makefile.am: Disable running the test as it currently does
	  not terminate.

2005-10-02  Al Riddoch  <alriddoch@zepler.org>

	* test/clientConnection.cpp, test/commander.cpp, test/controller.cpp:
	  Update to use new Negotiate API in Atlas-C++.

2005-10-02  Al Riddoch  <alriddoch@zepler.org>

	* Eris/BaseConnection.cpp: Update to use new Negotiate API
	  in Atlas-C++.

2005-10-01  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Entity.cpp: Remove an unnecessary static cast. Check the
	  velocity vector is valid before checking its magnitude.

2005-09-20  James Turner  <james@worldforge.org>

	* Eris.xcodeproj/project.pbproj: XCode 2.1 build system

2005-09-09  Simon Goodall  <simon@simongoodall.co.uk>

	* Eris/Enity.h: Change sigc::signal to SigC::Signal1 on Say object so it
	  compiles

2005-09-06  Al Riddoch  <alriddoch@zepler.org>

	* test/stubServer.cpp: Update factory method parameters to
	  match that expected by the Atlas-C++ object factory.

2005-09-04  Al Riddoch  <alriddoch@zepler.org>

	* Eris/TypeInfo.cpp: Update factory method parameters to
	  match that expected by the Atlas-C++ object factory.

2005-09-01  James Turner  <james@worldforge.org>

    * Eris/Account.h, Eris/Account.cpp, Eris/Avatar.cpp: make Account
      explicitly track Avatars, and make the mapping from character ID to
      avatar instance available. This allows for an 'isActive' query of
      a character.
      
    * Eris/Connection.cpp, Eris/BaseConnection.cpp: prefer eof() to fail() on 
      skstreams, in the hope of dealing with socket errors better.
      
    * test/commander.cpp, test/clientConnection.cpp

    * Eris/Entity.cpp: formatting changes
    
    * Eris/Entity.cpp: ignore setVisible(true) when the entity is in limbo;
      this fixes the spurious apperanced and disappearance of the character
      entity when activating.
    
    * test/viewTest.cpp, test/viewTest.h: factor some of the in-game tests
      into a seperate file.

2005-08-29  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Account.cpp, Eris/Avatar.cpp, Eris/Lobby.cpp, Eris/Person.cpp,
	  Eris/Room.cpp, Eris/TypeService.cpp: Use Anonymous for op arguments
	  so they don't have parents unnecessarily.

	* Eris/EntityRouter.cpp, Eris/TypeService.cpp: Use const references
	  on arguments for a slight efficiency improvement.

2005-07-07  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/Avatar.h, Eris/Avatar.cpp: Added useOn() which will send a USE
	  operation to the server.
	* TODO: Added an item about non-default operations in onUse().

2005-06-30  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/Entity.h, Eris/Entity.cpp: In order to be able to process the
	  available responses the argument of the Say signal now is the Atlas
	  object passed with the Talk operation. Added a bit of documentation
	  on how to get the text and the responses. Prior to this the "say"
	  attribute on the Root object was tested for existence and type. This
	  is not the case anymore. In order to be safe you should test this in
	  the clients.
	* test/tests.cpp: Modified accordingly. Testing for existence and type
	  of the arguments now.

2005-06-30  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/Avatar.cpp: Added the id of the avatar's entity to the move op
	  in moveInDirection() so the cyphesis accepts the operation.

2005-06-30  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/Account.cpp, Eris/Account.h: Added a member and an accessor
	  function for character types supported by the server. On completed
	  login the server's response carrys a list of character types that
	  users are allowed to create.
	  You should use this vector of type names to offer a number of valid
	  choices to your users instead of an empty type field.

2005-06-30  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* bindings/polls/glib/PollGlib.h: Added support for timeouts. This is
	  work in progress as it currently leaves the application in busy wait
	  during meta queries. Input appreciated.

2005-06-30  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/Avatar.cpp: Made an error. Since throw exits and error() output
	  does not we need to return explicitely.
	* ChangeLog: Fixed from file names.

2005-06-30  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/Avatar.h, Eris/Avatar.cpp: Added wield() which will send a WIELD
	  operation for a specified entity from the avatar's inventory to the
	  server.
	  Replaced a throw with error() output.
	  Replaced a Root by Anonymous.

2005-06-30  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/Entity.h, Make getPosition(), getOrientation() and getBBox()
	  return const references to the private member values. Add
	  documentation on the fly.

2005-06-30  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/Entity.h, Eris/Avatar.h: Added some documentation.
	* Eris/Entity.cpp: In getViewPosition() it is necessary to explicitely
	  initialize the quarternion with identity().

2005-06-29  James Turner  <james@worldforge.org>

	* Eris/BaseConnection.cpp: detect stream failures in a more reliable way,
	  to hopefully detect server disconnects and report them.
	  
	* test/clientConnection.cpp, test/clientConnection.h, test/commander.cpp,
	  test/controller.cpp, test/controller.h, test/netTests.cpp,
	  test/netTests.h, test/setupHelpers.cpp, test/setupHelpers.h,
	  test/signalHelpers.h, test/stubServer.cpp, test/testOutOfGame.cpp,
	  test/testOutOfGame.h, test/tests.cpp, test/Makefile.am: make the test
	  code modular, and add test for the server closing the socket during
	  play.

2005-06-28  James Turner  <james@worldforge.org>

	* Release 1.3.7, Interface version 7. 

2005-06-28  James Turner  <james@worldforge.org>

    * test/stubServer.cpp: unlink the pipe file on deletion, so we don't leave
      it hanging around.

2005-06-27  James Turner  <james@worldforge.org>

    * configure.ac: increment version for release.

2005-06-27  James Turner  <james@worldforge.org>

    * Eris/View.cpp, test/subServer.cpp: remove some debug output

    * test/tests.cpp, test/controller.cpp, test/controller.h,
      test/commander.cpp: add a test for sight(delete) of entity, including
      correct re-parenting of children up the tree.
    
    * test/stubServer.cpp, test/stubServer.h, test/clientConnection.cpp: reset
      the test world state on each client connection.
      
2005-06-26  James Turner  <james@worldforge.org>

    * Eris/View.cpp: fix View destructor for changed Entity deletion
      model, fixes unit tests.
    
    * test/tests.cpp, test/controller.cpp, test/controller.h,
      test/stubServer.cpp, test/stubServer.h: re-factor test harness so
      the code can be run as two separate processes, which greatly facilitates
      debugging the client code.

2005-06-23  Erik Hjortsberg  <erik@katastrof.nu>

	* Eris/Entity.h: added const accessor for the attributes

2005-06-23  James Turner  <james@worldforge.org>

	* Eris/Timeout.cpp: update the _fired flag before emitting the timeout
	  expired signal, so re-setting the Timeout inside the exprired slot
	  works. (Sear needs this)

2005-06-22  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* Eris/TypeService.cpp: Fixed an obsolete function call.

2005-06-22  James Turner  <james@worldforge.org>

	* Eris/PollDefault.cpp: change an exception throw, if select() fails,
	  to a warning + return - this may or may not help the Sear windows
	  build.

2005-06-21  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* test/metaQuery.cpp: Added human readable times to metaquery output.
	  If not specified otherwise (with --exact parameter) metaquery will
	  now print times in strict dotted decimal with precision of one digit
	  after the dot based on the highest available time unit out of
	  seconds, minutes, hours, days and weeks.

2005-06-20  James Turner  <james@worldforge.org>

	* Eris/Avatar.cpp: use Anonymous instead of GameEntity for arguments
	  to many operations, to prevent Eris sending slightly malformed args
	  (explicit parents set)
	  
	* Eris/View.cpp: correctly handle the case where an entity is deleted;
	  reparent it's children to the deleted entity's location, and fixup
	  their positions and orientations.

	* Eris/Entity.cpp, Eris/Entity.h: in the destructor, if child entities
	  remain, delete them instead of placing them into limbo.

2005-06-19  James Turner  <james@worldforge.org>

	* Eris/View.cpp: be more tolerant of duplicate appears (they are silent
	  now). Note the actual observered behaviour should be unchanged.
	  
	* Eris/TypeInfo.cpp: improved warning when a strange op is recieved.

2005-06-12  Al Riddoch  <alriddoch@zepler.org>

	* Release 1.3.6, Interface version 7.

2005-06-05  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Tweak sigc++ test to make sure we don't get 2.0.8
	  which is buggy.

2005-06-07  Simon Goodall  <simon@simongoodall.co.uk>

	* Eris/Types.h, Eris/Account.cpp: Rename DUPPLICATE_LOGIN to
	  DUPLICATE_CHAR_ACTIVE to make more sense.

2005-06-07  James Turner  <james@worldforge.org>

	* Eris/Types.h: add in a Result enum.
	
	* Eris/Account.cpp, Eris/Account.h: return slightly-useful result values
	  from many methods on Account.

2005-06-06  James Turner  <james@worldforge.org>

	* configure.ac: require SigC++ 2.0.9 (if using the 2.0 series), since
	  older versions do not work in all cases (infinite loops when running
	  metaQuery). If you have a lower-numbered version which definitely works
	  (i.e for the tests, metaquery and a client), please let me know.
	
	* configure.ac: increment the version to 1.3.6, in anticipation of a
	  release in the next few days, so clients can start requiring this
	  version.
	 
2005-06-05  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Account.h, Eris/Lobby.h: Add some forward declarations as it
	  seems friend declarations no longer imply forward declarations.

2005-06-03  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: when setting attribute data from an Atlas::Object,
	  convert via a Message::Element, to avoid problems with Objects
	  iterators. Should fix problems with names getting reset to empty.

2005-06-01  Hagen Möbius  <hagen.moebius@starschiffchen.de>

	* test/metaquery.cpp: Added the option to output all server information
	  in xml format with a very simple doctype. Also fixed a small bug with
	  a <br/> in plain text output. all logging and inforamtion output goes
	  to stderr now, only the server data is sent to stdout.
	* Eris/TypeService.cpp: Added a class commentary so doxygen generates
	  the class page which contains all the documentation that this class
	  already has.

2005-05-31  James Turner  <james@worldforge.org>

	* Eris/Avatar.cpp, Eris/Avatar.h: actually make the last commit correct.

2005-05-31  James Turner  <james@worldforge.org>

	* Eris/Avatar.cpp, Eris/Avatar.h: use a different (and hopefully correct)
	  method to interpolate server time values for the client. getWorldTime
	  should now work as advertised.

2005-05-27  James Turner  <james@worldforge.org>

	* Eris/View.h, Eris/View.cpp: add support for emitting a notification
	  signal when an Entity is seen.

2005-05-25  James Turner  <james@worldforge.org>

	* Eris/Entity.h: add an accesor for the Entity's owning View

2005-05-20  James Turner  <james@worldforge.org>

	* Eris/TypeService.h, Eris/TypeService.cpp: remove the badTypes system
	  for recording invalid types, because it relied upon the false
	  assumption that the set of server types was constant over a Connection
	  lifetime (more fool me!)
	  
	* Eris/TypeService.cpp: re-ordered decoding of ERROR vs INFO responses to
	  type lookups, so ERROR case actually gets run. Thanks to Hagen for the
	  catch.

2005-05-18  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp, Eris/Entity.h: re-factor how Entity processes attribute
	  data, to make integration-by-subclassing easier. Make nativeAttrChanged
	  private, and add a virtual 'onAttrChanged' hook, which is a no-op by
	  default. This avoids forcing clients to monitor and decode the
	  'Changed' signal (which is complex) if they track many attributes.
	  Also make setAttr private, to avoid abuse by clients.

2005-05-16  James Turner  <james@worldforge.org>

	* Eris/ServerInfo.cpp: don't mandate the existence of build-date or
	  version fields for the moment.
	  
	* test/metaquery.cpp: include version and build date in plain-text mode

2005-05-15  James Turner  <james@worldforge.org>

	* Eris/ServerInfo.cpp, Eris/ServerInfo.h: augment ServerInfo to expose the
	  the version and build-date information if the server provides it.
	  
	* test/metaquery.cpp: in HTML mode, output the server program name,
	  version and build date.

2005-05-08  Al Riddoch  <alriddoch@zepler.org>

	* Release 1.3.5, Interface version 5.

2005-05-08  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Make a .bz2 tarball as well as a .gz one for
	  distribution.

	* eris.spec.in: Clean up and harmonise.

2005-05-07  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Increment version and interface version so that clients
	  can depend on the current API.

2005-05-04  Hagen Moebius  <hagen.moebius@starschiffchen.de>

	* bindings/polls/glib/PollGlib.h, bindings/polls/glib/PollGlibFD.h,
	  bindings/polls/glib/PollGlibSource.h: Removed compatibility with glib
	  versions < 1.3.

2005-05-03  James Turner  <james@worldforge.org>

    * Eris/Connection.cpp: actually process server info responses on Connection,
      so it's possible the ::getServerInfo might return useful data.
      
    * test/tests.cpp: add a test for getting the server info
    
2005-04-30  Al Riddoch  <alriddoch@zepler.org>

	* Eris/DeleteLater.h: Make annotation after close of header guard
	  into a comment.

2005-05-03  James Turner  <james@worldforge.org>

	* Eris/Account.cpp: clean up how login timeouts are handled, so tests
	  pass on Mac (and valgrind should warn about one less thing, I think).
	  
	* Eris/Meta.cpp, Eris/Meta.h: make Meta's timeout be an auto-ptr, and
	  clean up the usage generally, to hopefully make it more robust.

	* Eris/DeleteLater.h: add missing include guards. Ooops.

2005-05-02  James Turner  <james@worldforge.org>

    * Eris/Entity.cpp: updatePredictedState: handle the case where no
      acceleration value has been defined.
      
    * Eris/ServerInfo.h, Eris/ServerInfo.cpp: make the default constructor
      public, so Connection::getServerInfo is usable.

    * Eris/Connection.cpp: intialise the server info host name since it's
      now known in time.

2005-04-30  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Replace # with dnl. Use modern versions of autoconf
	  macros, and get rid of call to AC_CANONICAL_TARGET, AC_PROG_CC
	  and AC_HEADER_STDC. No longer need to set
	  ATLAS_ELEMENT_TYPEDEF_PRIVATE.

2005-04-28  James Turner  <james@worldforge.org>

    * Eris/Entity.cpp, Eris/Entity.h, Eris/View.cpp: support an 'accel'
      attribue on MOVE operations, and use it do do better motion prediction.
      
    * Eris/Room.cpp: change how delayed sight of people is handled, to
      avoid duplicate emission of the Appearance signals. This is a very old
      bug, which was finally tracked down by Hagen.
      
    * test/stubServer.cpp: update the StubServer for the changes to Atlas
      ObjectFactory.
      
2005-04-28  Al Riddoch  <alriddoch@zepler.org>

	* Eris/TypeInfo.cpp: Modify Atlas Factories usage to match modified
	  Atlas-C++ API.

2005-04-28  James Turner  <james@worldforge.org>

    * Eris/IGRouter.cpp: remove a debug() where a SET op is received for
      pending entities, and change the message for unknown entities to be
      a warning, instead of an error.
      
    * Eris/Connection.cpp: if Atlas logging is enabled, also log redispatches.

    * Eris/Timeout.cpp: implement cancel() method
    
    * Eris/MetaQuery.cpp: fix a long-standing bug where the 'server failed
      to respond' timeout wasn't cancelled when a sucessful response was
      received. Thanks, Hagen.

    * Eris/BaseConnection.cpp: make the connect timeout a lot longer,
      20 seconds instead of 5.

2005-04-28  Al Riddoch  <alriddoch@zepler.org>

	* Eris/IGRouter.cpp: Code workaround for types in Sight(Create)
	  op handler that occurs in apps with multiple connectios.

2005-04-27  James Turner  <james@worldforge.org>

	* test/tests.cpp, test/commander.cpp, test/stubServer.h,
	  test/stubServer.cpp: add a test for sight of entity creation. 

2005-04-25  James Turner  <james@worldforge.org>

	* Eris/Factory.cpp, Eris/Factory.h, Eris/View.cpp, Eris/View.h: make
	  factories be owned by View, and hence have a well defined lifetime.
	  View now has a 'registerFactory' method, which can be called at any
	  time.

	* test/tests.cpp, test/stubServer.cpp: update entities and test the
	  setting status on an entity does not affect other attributes. This
	  test is currently failing.

2005-04-25  James Turner  <james@worldforge.org>

    * Eris/TypeInfo.cpp: fix 'processTypeData' to not add existing children
      to the unresolved set. Thanks to Erik again, he rocks.

    * Eris/TypeService.cpp: make the type verifier more tolerant of wonky
      objects (eg with parents unset but a valid objtype); warn instead of
      throwing.

2005-04-24  James Turner  <james@worldforge.org>

    * Eris/TypeInfo.cpp: in ::resolveChildren, copy the unresolved children
      set before iterating over it, since ::addChild() updates the set. Thanks
      to Erik for the catch.

2005-04-18  Al Riddoch  <alriddoch@zepler.org>

	* Release 1.3.4, Interface version 3.

2005-04-18  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Increment interface version correctly.

2005-04-17  James Turner  <james@worldforge.org>

	* Eris/Account.cpp: re-order code in loginError so loadtool works -
	  re-set status before emitting the signal, so slots which call login /
	  createAccount work as expected.
	 
	* Eris/Entity.cpp, Eris/Avatar.h, Eris/Avatar.cpp: make the Heard signal
	  on Avatar work.

2005-04-17  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp, Eris/Entity.h, Eris/EntityRouter.cpp: make onAction /
	  Acted pass the full Atlas::Objects::Operation::Action, instead of just
	  it's arg.
	  
	* Eris/Connection.cpp: remove debug output.
	  
	* test/tests.cpp: add test of basic location change and sight of an
	  action.

2005-04-15  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Factory.cpp, Eris/Factory.h, Eris/Response.cpp, Eris/Response.h,
	  Eris/Router.cpp, Eris/Router.h: Add virtual destructors to classes
	  that need them.

2005-04-15  James Turner  <james@worldforge.org>

    * test/tests.cpp, tests/commander.cpp, tests/controller.cpp: add tests for 
      sight of move ops, and fix bugs in handling of move ops by the stub
      server.
      
    * Eris/IGRouter.cpp, Eris/View.cpp, Eris/Entity.cpp, Eris/Connection.cpp:
      remove debug output which is no longer required.

2005-04-14  Al Riddoch  <alriddoch@zepler.org>

	* test/controller.cpp: Add newline to end of file. Congrats James,
	  next time should be a gold star.

2005-04-14  James Turner  <james@worldforge.org>

    * test/tests.cpp: add in talk/Say test
    
    * test/agent.cpp: make broadcast routines set FROM on percept op.

2005-04-14  James Turner  <james@worldforge.org>

	* Eris/BaseConnection.cpp: remove streamEnd() call from hardDisconnect,
	  since it is unecessary.
	  
	* Eris/Connection.cpp: in the dtor, explicitly bring down the connection
	  while our vtable is still valid, to avoid pure virtual calls.
	  
	* test/commander.cpp: change how sight broadcasts are decoded, to avoid
	  ambiguity.

2005-04-14  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Avatar.cpp: Initialise world time offset to zero.

2005-04-14  Al Riddoch  <alriddoch@zepler.org>

	* test/commander.cpp: Add smart dynamic casts when handling operation
	  arguments as necessary.

2005-04-14  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp, Eris/Entity.h, Eris/EntityRouter.cpp: changes to
	  handle sound(action) broadcasts, consume the op and trigger a
	  virtual / signal pair on Entity. The virtual method is called
	  onSoundAction, the signal is called 'Noise' - better names would be
	  appreciated.

	* tests/tests.cpp: add tests for hearing speech and other sound of other
	  actions.

2005-04-10  James Turner  <james@worldforge.org>

	* configure.ac: bump version to 1.3.4, so clients can test for new
	  Connection API.

2005-04-06  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Response.cpp: Re-order initialisation from an iterator to before
	  the iterator is erased from the container.

2005-04-05  James Turner  <james@worldforge.org>

	* Eris/View.cpp, Eris/View.h, Eris/IGRouter.cpp: revert handling of SIGHT
	  of entities to use the IGRouter instead of the Responder code, so we
	  are not reliant on refnos for anything in-game.

2005-04-05  James Turner  <james@worldforge.org>

	* Eris/Connection.cpp, Eris/Connection.h: change Connection so hostname
	  and port are passed as constructor argument, and make the members const.
	  Remove the args to connect and deprecate reconnect(), to make the life-
	  time of Connection obvious - i.e you can't re-use it for different
	  servers.
	  
	 * Eris/Connection.cpp, Eris/Connection.h, Eris/BaseConnection.cpp,
	   Eris/BaseConnection.h: change connect() and disconnect() to return an
	   errno instead of throwing.

2005-04-04  James Turner  <james@worldforge.org>

    * Eris/Entity.cpp: support the 'mode' attribute on MOVE ops

2005-02-21  James Turner  <james@worldforge.org>

	* Eris/View.cpp, Eris/View.h, Eris/IGRouter.cpp: route in-game sight
	  responses through the responder logic.
	  
	* Eris/Response.cpp: make the responder logic deal with re-awaits,
	  since this is needed for redispatching of in-game sights where the
	  entity type is still unbound.

	* Eris/Account.cpp: fix the ordering in loginResponse and avatarResponse,
	  so errors are handled correctly.

2005-02-18  Simon Goodall <simon@simongoodall.co.uk>

	* Eris/TypeInfo.h: Add getParents() accessor.
	
2005-02-17  James Turner  <james@worldforge.org>

	* Eris/Factory.cpp: make the factory set be stored as an auto_ptr, so it
	  gets cleaned up at library tear-down. This should mean Eris cleans up
	  all it's data structures cleanly, but work with valgrind and other
	  tools is needed to verify this.
	  
	* Eris/Account.cpp, Eris/Account.h: change character looks to use the
	  responder system. As a result, AccountRouter is now very small, only
	  handling spontaneous (server-initiated) logout ops.

2005-01-17  Al Riddoch  <alriddoch@zepler.org>

	* Makefile.am, configure.ac, eris.spec.in: Update the way AC_INIT
	  is called, remove the poll-glib specific pkgconfig and rpm files and
	  clean up.

2005-02-16  James Turner  <james@worldforge.org>

	* Eris/Avatar.cpp: fix missing set of 'pos' attribute on the argument to
	  a move operation in implementation of moveToPoint.

2005-02-09  James Turner  <james@worldforge.org>

	* Eris/Response.h, Eris/Response.cpp: add in helper class to track request
	  / response operation pairs, and dispatch them based on refno. This gives
	  more consistent and reliable routing for such ops, and simplifes 
	  several of the routers.
	  
	* Eris/Account.h, Eris/Account.cpp: changes to use the response system; as
	  a result, the AccountRouter is now very light-weight and the nasty
	  logic for recording refnos has gone.
	  
	* Eris/TypeService.cpp, Eris/TypeService.h: replace the private refno
	  tracking system with the generic response system.
	  
	* Eris/Connection.cpp, Eris/Connection.h: make Connection own a 
	  ResponseTracker instance, and give it a first-chance to handle all ops
	  which have a refno set.

2005-02-02  James Turner  <james@worldforge.org>

	* Eris/Connection.cpp: make the dispatch test for server info tighter,
	  to avoid erroneously stealing other ops which inherit INFO.
	  
	* Eris/Account.cpp: reduce severity of log messages

2005-02-02  James Turner  <james@worldforge.org>

	* Eris/Connection.cpp, Eris/Connection.h: add support for querying the
	  information data for the connected server. Results are returned using
	  the same format as meta-server queries.

	* Eris/ServerInfo.cpp, Eris/ServerInfo.h: make Connection a friend, so it
	  can update the information as necessary.

2005-01-30  James Turner  <james@worldforge.org>

	* Eris/TypeInfo.cpp, Eris/TypeInfo.h: switch from greedy to lazy expansion
	  of child (derived) types. This greaty reduces the initial server traffic
	  upon connection, but may also expose lingering bugs in the redispatch
	  logic. Added a predicate on TypeInfo to test if un-resolved children
	  exist for a type, and a method to trigger their lookup.
    
2005-01-27  James Turner  <james@worldforge.org>

	* configure.ac: bump version to 1.3.3 for release
	
	* Eris/MetaQuery.cpp: fix a possible un-initialised variable caught by
	  valgrind.
	
2005-01-26  James Turner  <james@worldforge.org>

    * Eris/BaseConnection.cpp: delete the timeout late, since it's likely to
      be on the stack in the timeout case (which explicitly calls hardDisconnect,
      oops).
      
    * Eris/DeleteLater.cpp, Eris/DeleteLater.h: re-order delete code, so it's
      safe against new delete laters being added to the queue during execution.

2005-01-25  James Turner  <james@worldforge.org>

    * Eris/BaseConnection.cpp, Eris/Connection.cpp: clean up how timeouts
      are handled - they are now reported via the Failure signal on Connection,
      and the Connection state should be reset correctly.

    * Eris/Metaserver.cpp, Eris/MetaQuery.cpp: update for the new Timeout
      handling system, and avoid segfaults when deleting Timed-out queries.
      
    * Eris/DeleteLater.cpp, Eris/DeleteLater.h: add a scheme for delaying the
      delete of arbitrary objects until the flow-of-control returns to the
      Poller. This idea is borrowed from Qt, and similar to autorelease pools
      in Cocoa - it enables slots connected to signals such as Failure to
      request that an object be deleted, without breaking the stack.
      
    * Eris/PollDefault.cpp: poke the deleteLater system, once timeouts have
      been processed.

2005-01-12  James Turner  <james@worldforge.org>

    * Eris/Poll.h, Eris/PollDefault.cpp: change Eris::Poll to have a signal
      object, instead of inheriting SigC::Signal, which causes warnings and
      is generally complex.

    * Eris/PollGlib.h: keep the Glib poller in sync

    * Eris/Connection.cpp, Eris/Metaserver.cpp: update users of the above API

2004-01-12  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Prefer sigc++ 2.0 over 1.2 to keep things a little
	  more consistent.

2005-01-08  James Turner  <james@worldforge.org>

	* configure.ac: increase minor version number
	
	* tests/Makefile.am: tweak to try and make tests build and run correctly

	* NEWS: add information for the the 1.3.2 release

2005-01-07  James Turner  <james@worldforge.org>

	* Eris/Account.cpp, Eris/Account.h: delay Avatar creation until the 
	  activation INFO is received from the server. This allows errors during
	  character creation or activation to be reported via a new 'AvatarFailure'
	  signal on Account.
	  
	* Eris/Avatar.cpp, Eris/Avatar.h: changes for the new Avatar creation
	  style. The InGame signal is removed since it is no longer meaningful -
	  the 'AvatarSuccess' signal on Account replaces it.
	  
	* test/tests.cpp: update tests for the new Account API, and add a test
	  for correctly handling the error when taking a bad character.

	* Eris/Connection.h, Eris/Connection.cpp, Eris/Account.cpp: ensure that
	  when deleting an Account it correctly removes it's router from the
	  Connection.

2004-01-07  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Remove AM_MAINTAINER_MODE as it has undesirable side
	  effects.

2004-01-03  Al Riddoch  <alriddoch@zepler.org>

	* Eris/TypeService.cpp, Eris/TypeService.h: Add a virtual destructor
	  to TypeService, as it has virtual functions.

2004-12-31  Al Riddoch  <alriddoch@zepler.org>

	* eris.spec.in: Update spec with License URL Package Vendor
	  and Distribution tags.

2004-11-14  James Turner  <james@worldforge.org>

	* Eris/Avatar.cpp: fix initialisation of a dummy position vector.
	  Thanks to erik for the catch.

2004-11-1  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: change signature of 'valueOfAttr' to return by
	  reference. This entailed pushing all attributes into the primary
	  storage map (including native ones), which means hasAttr and
	  observers will now work for native attrs as normal.
	  
	* Eris/Avatar.cpp: modify take() to send an empty position in the
	  move op, otherwise cyphesis rejects it.
	
2004-10-30  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: add virtual hooks for ChildAdded / Removed, as
	  requested by Erik. The default implementation emits the
	  existing signals as you'd expect.
	
	* Eris/Entity.cpp: change the signatures of almost all the signals on
	  Entity to NOT include 'this' as an argument. If you want this
	  behaviour, please use the SigC::bind<> templates at connect time.
	  Additional, LocationChanged now only includes the previous location:
	  the new location is available directly from the Entity.

	* Eris/Avatar.cpp: update Avatar for the new signal signature
	
2004-10-30  James Turner  <james@worldforge.org>

	* Eris/TypeObject.cpp: actually emit the BoundType signal from the
	  TypeService, as well as the Bound signal on TypeObject. Ooops.

2004-10-30  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: initialise orientation to the identity quaternion,
	  instead of an invalid one. Should fix strange orientations Erik is
	  seeing in Ember.

2004-10-27  James Turner  <james@worldforge.org>

	* tests/metaQuery.cpp: detect failures of the server object, for example
	  if the wrong hostname is provided. This should stop the tool blocking
	  when the metaserver IP changes, for example.
	  
	* Eris/Metaserver.cpp: change how the udp stream is created, so that
	  failed-to-open errors do not cause an assert in doFailure. Only set
	  m_stream valid once the stream opens succesfully.

	* Eris/Avatar.cpp: fix another commented out call to setPos

2004-10-24  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Avatar.h: Add sigc++/connection.h include for sigc++ 2.0.

2004-10-24  James Turner  <james@worldforge.org>

    * Eris/Avatar.cpp: fix the implementation of the various pick / take /
      drop / move methods. Testing required, also feedback on the API.

2004-10-24  James Turner  <james@worldforge.org>

    * Eris/Entity.cpp: fix second argument to onLocationChanged in
      setLocation, thinko error.
      
    * Eris/Entity.cpp: add virtual init() method, so processing of initial
      Entity state happens after the vtbl is fully constructed.
      
    * Eris/View.cpp: call init() on newly created Entities.
    
    * Eris/View.cpp: ensure that the InitialSight signal is emitted on the
      entity creation path.

2004-10-22  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Entity.cpp: Handle orientation in the new
	  setPosAndVelocityFromAtlas() method.

2004-10-22  Al Riddoch  <alriddoch@zepler.org>

	* Eris/Entity.cpp, Eris/IGRouter.cpp, Eris/EntityRouter.cpp: change
	  how position and velocity updates are handled, to ensure a SET op
	  can never modify them. 
	  
	* test/controller.cpp: add more test functions to modify the stub
	  server's world

2004-10-22  Al Riddoch  <alriddoch@zepler.org>

	* test/agent.cpp, test/controller.cpp, test/stubServer.cpp:
	  Add newlines to ends of files as required.

2004-10-19  James Turner  <james@worldforge.org>

	* CHANGES-1.4: add this file, summarising the API and internal changes
	  since the 1.2 series, and giving some hints on migrating to the new API
	  
	* Makefile.am: add CHANGES-1.4 to EXTRA_DIST

2004-10-19  James Turner  <james@worldforge.org>

	* configure.ac: require Atlas-C++ >= 0.5.91	
	* tests/Makefile.am: add missing files so make distcheck works
	* NEWS: updates describing development release
	
2004-10-19  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp, Eris/Entity.h: rename the over-rideable hook
	  methods to a consistent 'onXXXX' naming scheme, and add an additional
	  one for LocationChanged.
	* configure.ac: bump micro revision in preperation for a development
	  release.

2004-10-13  James Turner  <james@worldforge.org>

	* tests/tests.cpp: Finish off the sight(set) test code, which seems to work
	  as desired (which doesn't help Al with his bug, alas)
	  
	* tests/agent.cpp: Add support for broadcasting an op to all connected agents
	  
	* tests/controller.cpp, tests/commander.cpp: initial work on simulating
	  entity movement on the stub server.

	* Eris/Entity.cpp: lots of debug() clean ups all over the place

2004-10-12  James Turner  <james@worldforge.org>

	* Removing long-dead files from the time before pkg-config

2004-10-12  James Turner  <james@worldforge.org>

	* tests/agent.cpp: Use new Atlas-C++ 0.6 'copy' functionality to make LOOK
	  filtering correct.
	  
	* tests/tests.cpp: further improve the appearance and disappearance tests.
	
	* Eris/IGRouter.cpp: handle the case where the servers is not using STAMPs
	  better.
	  
	* Eris/Entity.cpp: cleanup old code for dealing with contents changes

2004-10-09  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: refactor Entity destructor code to not be 
	  stupid about cleaning up child entities. Test code now runs and completes
	  correctly.

2004-10-09  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp, Eris/View.cpp: change how the View destructor works,
	  to stop asserts on deleting it. Entailed adding a hook method on View
	  so Entities have a way to remove themselves from the View's contents map.

2004-10-09  James Turner  <james@worldforge.org>

	* tests/tests.cpp : add initial tests of entity appearance
	
	* tests/agent.cpp: track per-client entity visiblity, and hence do contents
	  pruning when sending SIGHTs. Generate appearance and disappearance ops
	  whent entity visibility changes.
	
	* tests/stubServer.cpp: refactor the entity definition code, and
	  expand the test world.
	  
	* Eris/TypeInfo.cpp: fix a nasty bug revealled by the Appearance tests:
	  use of statics to store TypeInfoPtrs is inherently unsafe when
	  multiple Connections (and hence type trees) exist.

	* Eris/LogStream.h: fix log-levels of the warning and error streams

2004-10-03  James Turner  <james@worldforge.org>

	* tests/* : change the parent/child relationship of the stub server
	  and test code, so the stub server is now the parent. This makes
	  termination a bit easier to think about (stub server runs until
	  the child process exits)
	  
	* tests/* replaced use of a named pipe for OOB control in the tests,
	  with a socketpair, and made various tweaks so it now actually starts up
	  reliably and repeatably.

	* Eris/View.cpp: clean up logging output in some edge cases
	
	* Eris/TypeInfo.cpp: add asserts to try and catch an edge case Al reported

2004-10-02  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: Fix the strange asserts and crashes I introduced by
	  adding a debug line to setAttr, yuck. Eris should go in-game now
	  
	* Eris/Redispatch.cpp, Eris/Connection.cpp,.h : change how Redispatches
	  get cleaned up, so they can fail safely. No longer use 'delete this' and
	  instead get the Connection to clean up Redispatches at the end of the
	  dispatch loop.

	* Eris/TypeBoundRedispatch.cpp: fix a way-too-strong assert on the BadType
	  path.
	  
	* Further test-harness tweakage

2004-10-02  Al Riddoch  <alriddoch@zepler.org>

	* Add configure checks for sigc++ 2.0.

	* Eris/Entity.h: Include sigc++/connection.h so that code works
	  with all versions of sigc++.

2004-09-30  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp, Eris/Entity.h, Eris/View.cpp, Eris/View.h: add
	  initial support for motion prediction of entities.

2004-09-29  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: typographic cleans ups
	* Eris/Log.cpp: add the ability to send Message::Elements over log streams
	* test/commander.cpp, test/stubServer.cpp, test/controller.cpp: work to
	  support out-of-band control of the stub server from test cases
	  
2004-08-10  James Turner  <james@worldforge.org>

    * Eris/View.cpp: Make entities that are being deleted invisible first, so 
      we emit disappearance signals correctly.
    * Eris/Avatar.cpp, Eris/Avatar.h: Hook up the inventory signals

2004-08-09  Al Riddoch  <alriddoch@zepler.org>

	* Eris/BaseConnection.cpp, Eris/Log.cpp, Eris/TypeService.cpp:
	  Pass references to decoders rather than pointers to Atlas-C++.

2004-08-07  James Turner  <james@worldforge.org>

    * Eris/Avatar.cpp, Eris/Avatar.h: Change the meaning of Avatar::InGame to
      be 'in-game subscription successfull' instead of 'character entity
      apepared'. Add a new signal, bizzarely entitled 'GotCharacterEntity',
      to replicate the old behaviour of the InGame signal.

2004-08-07  James Turner  <james@worldforge.org>

    * Eris/TypeInfo.cpp: add another custom factory, for types derived from
      action. This makes sight(burn) do the right thing, which we get for
      the campfire.

    * Eris/Account.cpp: remove some debug noise
    
    * Eris/Exceptions.cpp, Eris/Exceptions.h: add a new exception type for
      dealing with malformed Atlas objects.

2004-08-05  James Turner  <james@worldforge.org>

    * Eris/Connection.cpp: make dispatchOp less noisy in some situations, 
      notably the case where a TO router doesn't handle an op.
      
    * Eris/TypeService.cpp, Eris/TypeService.h: factor out the recursive
      verification of op arguments, and handle the case where to op itself
      was built as Anonymous. In that situation, we need to extract 'args'
      as a Message::Element, and try running the ObjectFactory ourselves.

	* TODO updates

2004-08-04  James Turner  <james@worldforge.org>

	* Documentation updates all over the place
	
	* Eris/BaseConnection.cpp: Reorder code in hardDisconnect, so status is set
	  before we emit the Disconnected signal.

2004-08-03  James Turner  <james@worldforge.org>

	* Rename the actual class Player to Account, and all the uses thereof.

2004-08-03  Hagen Moebius  <hagen.moebius@starschiffchen.de>

	* docs/.cvsignore: Added to ignore doxygen html and latex output.
	* .cvsignore: Added a few files from the gnu autotools process.

2004-08-03  James Turner  <james@worldforge.org>

	* Rename Player to Account.
	
	* Eris/Account.cpp: fix loginError to put status back to DISCONNECTED.
	  This means it should be possible to try another login after an error,
	  instead of having the state get wedged.

2004-08-01  James Turner  <james@worldforge.org>

	* Remove lots of debug output all over the place
	
	* Eris/Lobby.cpp, Eris/Room.cpp: get OOG imaginary ops (emotes)
	  working.

	* Eris/Player.cpp: made the error output when calling login() in
	  a bad state more useful.

	* Eris/Player.cpp: stop reporting unhandled sight(foo) as defunct
	  character look, and just ignore it.

	* Eris/Entity.cpp: add untested support for actions and imaginary
	  ops from entities.

2004-08-01  James Turner  <james@worldforge.org>

	* Eris/Room.cpp, Eris/Room.h, Eris/Lobby.cpp, Eris/Lobby.h: change
	  how OOG chat is handled, so in-room chats do the right thing.

2004-08-01  James Turner  <james@worldforge.org>

	* Eris/Entity.h, Eris/Entity.cpp: implement getViewPosition, and add
	  getViewOrientation.
	 
	* Eris/Entity.h: rename to/fromParentCoords to to/fromLocationCoords
	
	* Eris/Connection.cpp: make disconnect() check for and handle being
	  in the DISCONNECTED or DISCONNECTING states already

2004-08-01  James Turner  <james@worldforge.org>

	* Eris/Player.cpp: change logic in ::netConnected, so cresting and logging-in
	  a player inside Connection::Connected doesn't assert.
	  
	* Eris/Player.cpp: many chanegs to logout logic, should generally work now,
	  but still needs lots of testing, since there are many edge cases.

	* Eris/TypeInfo.cpp: handle custom types that inherit admin_entity, not
	  game_entity. This is true for the OOG chat structure
	  
	* Eris/Lobby.cpp: make OOG looks do the right thing with the LOOK args.

	* Eris/Lobby.cpp: when recieving the initial lobby sight, add it to the
	  m_rooms map, so talking and other actions work.
	  
	* Eris/Room.cpp: when recieving sight of a person, actually update the NULL
	  pointer in m_members with the Person object, so checkEntry succeeds.

	* Eris/Lobby.cpp: extend the router and Lobby code to deal with cyphesis's
	  OOG appearance / disapperance ops, which are from the thing, and have 
	  location set.

2004-07-31  James Turner  <james@worldforge.org>

	* Eris/View.cpp, Eris/Entity.cpp: many fixes to Apperance / Visibility logic,
	  correctly cascading now, and handling of STAMP updates seems to be working too.
	  Still need to deal with STAMP_CONTAINS.
	  
	* Eris/Entity.cpp: fixed a logic bug in setContentFromAtlas, where previous
	  contained entities got lost
	  
	* Eris/EntityRouter.cpp: stop trying to handle SIGHT(entity()) at all, and
	  just let the View deal with them.
	  
	* Eris/EntityRouter.cpp: test for SIGHT ops by classNo, so we don't catch
	  Appearances/Disappearances, and break everything.
	  
	* Remove lots of debug output, but added lots as well
	
	* Eris/Player.cpp: change the logic for dealing with SIGHT() ops, to
	  avoid weird output when Lobby's router didn't handle things.
	  
	* Eris/TypeService.cpp: special case code in innerVerifyType, to deal with
	  Anonymous objects that have objtype and/or parent set.
	
2004-07-30  James Turner  <james@worldforge.org>

	* Changed all occurences of getID in the code to getId, to match Atlas-C++
	* Lots of new debug output, which is temporary, and currently makes the log
	  output at debug level very noisy.
	* Fixed Player to deal with IG subscription notifications correctly, i.e
	  not requiring FROM or TO to be set.
	* Fixed a typo in the name of the View Appearance signal
	* Fixed the logic for emitting GotAllCharacters, so that we don't get the
	  'client accessing incomplete list' warning
	  
2004-07-28  James Turner  <james@worldforge.org>

	* test/metaquery.cpp: Applied Mike's changes to produce HTML output
	  as an option, so we can run metaquery from a cron job to drive
	  the website. (Go Eris! go atlas-c++ 0.6!)

2004-07-27  James Turner  <james@worldforge.org>

	* test/metaquery.cpp: Update the query test program to include
	  the connected client count of each server (for bear)
	* test/clientConnection: add code to start testing OOG chat, still
	  work in progress (need to have multiple test client processes
	  first, i think)

2004-07-18  James Turner  <james@worldforge.org>

	* test/tests.cpp: send the stub server child process a SIGTERM, so it
	  goes away cleanly when the tests are done.
	
	* Lots of cvsignore tweaks, mostly for OS-X specific cruft.

2004-07-18  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: fix a typo in my previous change, oops.
	* Eris/Log.cpp, Eris/LogStream.h: make logStreams respect the log level
	  setting.
	* Eris/ServerInfo.h: fix a copy-and-paste bug which made getServerName
	  return the hostname (IP) instead.
	* Eris.pbrpoj/project.pbxproj: Update XCode project for cleaned up
	  framework locations.

2004-07-12  James Turner  <james@worldforge.org>

	* Eris/Entity.cpp: Clean up the protected interface available to
	  people subclassing Entity, by moving many methods to be private.
	  Add a virtual wrapper around the VisibilityChanged signal, so
	  derived classes can easily hook into it.

	* tests/stubServer.cpp: Re-factor the test server to work as a child
	  process via fork(); this simplifies the tests on the client side.

2004-06-12  Al Riddoch  <alriddoch@zepler.org>

	* Fix devel dependencies in rpm spec on glib2-devel.

2004-06-06  Al Riddoch  <alriddoch@zepler.org>

	* Fix devel dependencies in rpm spec.

2004-05-13  Al Riddoch  <alriddoch@zepler.org>

* Remove header files from the library source list, and remove a stray
  space from after a \ which was causing object files to get left out
  of the library.

2004-05-12  James Turner  <james@worldforge.org>

* Record the classNo alloctaed by the objectFactory when registering
  new factory methods
  
* Simplify the type verification logic following the objectFactory
  clean up Al committed.
  
* Add a 'Commander' object to the stub server, in preperation for
  doing a fork() and hence a multi-process test.

2004-05-08  James Turner  <james@worldforge.org>

* Add a compile time toggle at the top of Connecton for send/recv logging.
  This could become a runtime flag in the future, I guess

* Remove some explicit sets of objtype/parents now Atlas is fixed

* Expand the Redispatch base class, now it's being used in anger

* Add a type verification system, which checks recieved objects for
  default constructed items, and issues type lookups as necessary. Seems
  to work pretty well, and engages the Redispatch and Type bind logic
  for the first time.

* Factored out TypeBoundRedispatch into it's own source file, since > 1
  other part of the code now uses it.

* Expand the types and toy world defined by the stub server, and use some
  custom types in key places.
  
* Lots of other tweaks and improvements
  
2004-05-05  Al Riddoch  <alriddoch@zepler.org>

* Enable running the test on "make check"

2004-05-03  James Turner  <james@worldforge.org>

* Add an EntitySeen signal to View, fired whenever a new Entity instance
  is created.
  
* Make View available off Avatar immediately

* Chnage handling of the limbo flag on Entity

* Fix warning causing autobuild failure

2004-05-03  Al Riddoch  <alriddoch@zepler.org>

* Eris/TypeService.cpp: Fix a type in an error message.

* Eris/TypeInfo.cpp: Fix illegal taking reference from function returning
  by value, and add checks to make sure type is never made a child of itself.

* Eris/PollDefault.cpp: Add try/catch pair to ensure that already_polling
  is exception safe.

* Eris/Player.cpp: Print a warning if Player gets an Info(Character) op
  but can't decode the character.

* Eris/Connection.cpp: Check ops are valid before queueing them.

2004-05-02  James Turner  <james@worldforge.org>

* Fix autobuild warnings in tests

* Fix logout behaviour, many dumb bugs lurking around. Much better now,
  but still needs better testing.
  
* Added IG module to tests, including a simple character activation tests.
  This entailed adding trivial agents to each client connection.
  
* Huge number of bug fixes in View, Entity and Avatar. A decent percentage
  of View related functionality seems to be working.

2004-05-02  James Turner <james@worldforge.org>

* Fix Account creation (well, workaround the Atlas Objects bug)

* Supress the 'no router for TO' warning if there are no TO routers
  registered in Connection::dispatchOp, avoids sily warnings on login

* Add a bunch more test cases, and stub server code to support them. Notably
  client disconnection is now handled and cleaned up.

2004-05-01  James Turner <james@worldforge.org>

* Bring builtin definition of core atlas types back from the dead,
  helps to reduce initial server ganking.

2004-05-01  James Turner <james@worldforge.org>

* Update the MetaServer API to support in-place inspection of server
  info objects. Also rename various signals to be clearer, and give each
  ServerInfo a status field, to aid in displaying nice UI in clients.
  
* Update the metaQuery tool to the new API

* Add an InGame signal to Avatar, analagous to the old World::Entered signal;
  various changes to View and Player to support this.

2004-05-01  James Turner <james@worldforge.org>

* Use Username accessors on Atlas::Objects::Entity::Account, thanks to
  spec updates
  
* Make the factory set in Factory.cpp a lazy-initialized pointer, to
  avoid potential static initialization problems
  
* Remove the default router argument from Connection

* XCode project updates

2004-04-29  Al Riddoch  <alriddoch@zepler.org>

* Eris/Player.h, Eris/Player.cpp: Accept logins from any account type,
  not just player.

* Eris/Entity.h: Implement missing methods.

2004-04-26  Al Riddoch  <alriddoch@zepler.org>

* Final tweaks to the filename changes.

2004-04-24 James Turner <james@worldforge.org>

* Pre-work for making source file naming capitalization
  consistent (they will all be LikeThis.cpp) - change #includes, 
  and the Makefile.am

2004-04-14 James Turner <james@worldforge.org>

* Sort autoXXX compilation of tests

2004-03-22 James Turner <james@worldforge.org>

* Expand the tests, get more of them working (note you will need Atlas-C++ 0.6
  modifications at present, so best not to bother)
* Fix little bugs all over Player, since it's now being tested, very slightly.
  Login works, as does looking at characters.
* StubServer mechanics to support the above.
* Initial playing around towards registering Atlas factory methods for dynamic
  types, needs more Atlas API work to do anything.

2004-03-18 James Turner <james@worldforge.org>

* Make the stubServer uses sk_poll, so the login test is closer to working,
  at least data is moving over the stream now.

2004-03-17  Kai Blin  <blin@gmx.net>
* eris.dox.in: updated to work with a current version of doxygen

2004-03-16 James Turner <james@worldforge.org>

* Getting the in-progress test code to build, so it's not such
  an awesome task later. Note the tests still don't run, much less
  do anything, that should happen in the next few days.

2004-03-13 James Turner <james@worldforge.org>

* Remove debug nosie from BaseConnection and Metaserver
* Start adding test harness code, not currently compiled but soon.

2004-03-09  Al Riddoch  <alriddoch@zepler.org>

* Increment API version to 1.3 devel API. Next stable API will be 1.4.

2004-03-08  Al Riddoch  <alriddoch@zepler.org>

* Eris/Avatar.cpp, Eris/entityRouter.h, Eris/igRouter.cpp: Three files
  still missing newlines at the end.

Monday 8th March 2004, James Turner <james@worldforge.org>

* Final Linux fixes for Eris, including building the metaquery tool,
  which works!

Monday 8th March 2004, James Turner <james@worldforge.org>

* First round of Linux compilation fixes, many silly things
  all over the place.

Sunday 7th March 2004, James Turner <james@worldforge.org>

* More CVs file removal, and basic attempt to get autoconf builds working.
  No doubt more work will be necessary

Sunday 7th March 2004, James Turner <james@worldforge.org>

* Added a simple command-line tool that uses Eris to query the meta server
  and the game servers.
* Fixed many bugs (especially to do with timeout handling) in the meta
  server code.

New Eris works! (For some very basic stuff) Notably, Atlas-C++ 0.6 is
connecting fine, the basic object handling is behaving correctly, timeouts
and polls are still ok, and the new logging code works fine. More test code
to come, of course.

Saturday 6th March 2004, James Turner <james@worldforge.org>

* Remove all the obsolete files
* Fix Entity to correctly register and unregister it's router
* Remove inlude of Lobby.h in Player
* Finish basic implementation of setContentsFromAtlas in Entity

Saturday 6th March 2004, James Turner <james@worldforge.org>

* Sorted out Entity visiblity code, following discussion with Al Riddoch
* Similarly, cleaned up handling in view, to store a single map of all
  entitied.
* Replaced the pending and cancelled sets on View with a unified map,
  which will handle edge cases correclty and with more obvious logic.
* Ensured that LOC and CONTAINS of an Entity cannot be altered via a SET op,
  and that nativeAttrChanged treats them as errors.
* Add code in EntityRouter to handle updating LOC during MOVE operations
* Route all SIGHT(entity) ops to the View, not just initial sights. Hence
  all updating based on sights is driven by the View.
* Sorted error handling on Player (-> Account)

Saturday 28th February 2004, James Turner <james@worldforge.org>

* All code compiles, doesn't link
* Much re-factoring, IG transition code is in place, Top-Level entity
  handling scheme is also coming together
* TODO updated with specific things to address for the next release

2004-02-27  Al Riddoch  <alriddoch@zepler.org>

* Fix Atlas-C++ dependency to the 0.6 series.

Thursday 26th February 2004, James Turner <james@worldforge.org>

* Implement the new logging system, pretty easy in the end.
* Use the most recent Atlas-C++ changes to get some of the files actually
  compiling. Working around a few issues (eg WFMath conversion) for the time
  being, but lots of typos fixed up.
* Updated TODO with thing still to be done

Wednesday 25th February 2004, James Turner <james@worldforge.org>

* Added entityRouter, essentially an internal helper to keep most Atlas
  decode stuff out of Entity.
* Total re-work of Entity, subclassing should be sane now, API is
  collapsing to a more useful set too.
* Sorting out which ops are handled by the EntityRouter (decodes on FROM)
  vs the IGRouter (decodes on TO)

Monday 23rd February 2004, James Turner <james@worldforge.org>

* Added View class, which handles all the icky appearance / disappearance
  logic wich used to reside in World. The InvisibleEntityCache logic
  can also be plugged in here, or the IEC can be made an internal helper.
* Made IGRouter simpler, it's purely what it's name suggests, the routing
  helper for Avatar.
* Started cleaning up Avatar. Hopefully will need to add very few methods,
  even once World is gone.

Sunday, 22nd February 2004, James Turner <james@worldforge.org>

* First portion of work migrating to Atlas-C++ 0.6, and many other
  clean ups of the API. This will not compile, don't even think about
  trying to use it.
* Removed all Dispatcher / WaitFor logic from the code
* Made Player (soon to be Account) handle lots of gnarly ops itself
* Simplified all the dispatch and routing in Lobby and Room. Room
  creation needs to be re-added.
* Many other things I've forgotten that will get summarized once the
  code runs again.

Thursday, 5th February 2004, Al Riddoch <alriddoch@zepler.org>

	* Update dependencies and header list in the rpm spec.

	* Add a few EXTRA_DIST files, include spec, and pgxproj files.

	* Release 1.1.1, interface version 1.0.0

Thursday, 5th February 2004, James Turner

    * Fix duplicate characters in the Player's list, by discarding
      duplicate SIGHTs and locking out calls to refreshCharacterInfo while
      a refresh is already in progress
    * Switch the internal character storage to be a map, keyed by entity ID,
      and make the accessor method (Player::getCharacters()) return a
      const reference.
    * Various other whitespace changes in Player.cpp
    * Bump version to 1.1.1 in anticipation of release
    * Set required WFMath version to 0.3.3 for coordinate conversion helpers

Saturday, 24th January 2004, Al Riddoch <alriddoch@zepler.org>

	* Eris/UIFactory.h, test/testUtils.cpp: Move cassert includes
	  around a bit, for fun and profit.

Thursday, 22nd January 2004, Al Riddoch <alriddoch@zepler.org>

	* Eris/Exceptions.h Eris/Exceptions.cpp: New files to contain
	  exception class declarations and definitions.

	* Eris/Types.h: Remove exceptions, and clean up types.

	* Re-organise includes to use new exceptions header.

Thursday, 22th January, Ron Steinke <rsteinke@w-link.net>

	* Remove ::Instantiate() calls from test/*

Thursday, 22nd January 2004, James Turner <james@worldforge.org>

    * Remove use of deprecated ::Instantiate() calls
    * Require Atlas-C++ 0.4.93 (latest transitional)

Thursday, 22nd January 2004, Al Riddoch <alriddoch@zepler.org>

	* Eris/typeService.cpp: Update type service to use Atlas-C++
	  Class() method, as default constructor now creates an instance.

Monday, 19th January 2004, Al Riddoch <alriddoch@zepler.org>

	* Many more include fixups, mostly relating to sigc++.

Sunday, 18th January, Ron Steinke <rsteinke@w-link.net> (don't you love time zones?)

	* test/testPlayer.cpp: Added an #include so the tests build again.

Monday, 19th January 2004, Al Riddoch <alriddoch@zepler.org>

	* Reorder includes, and elimate unnecessary includes by using
	  forward declarations throughout.

Sunday, 18th January, Ron Steinke <rsteinke@w-link.net>

	* Eris/Avatar.*: Renamed the move() functions to
	  moveToPoint() and moveInDirection() to avoid
	  the Point/Vector argument overload.

Sunday, 18th January, James Turner <james@worldforge.org>

	* Patch from Ron Steinke : make Factory.h use forward declared Atlas
	  types, to avoid dragging in huge chunks of Atlas::Objects and all the
	  Atlas::Mesage stuff.

Saturday, 17th January, Ron Steinke <rsteinke@w-link.net>

	* Eris/Avatar.*: Added velocity-based move() methods.

Sunday, 11th January, Ron Steinke <rsteinke@w-link.net>

	* Eris/Metaserver.*: On second thought, just move
	  the snprintf stuff into Metaserver.cpp. That way
	  Eris should continue to build fine, but dependent
	  software won't get hit with it.

Sunday, 11th January, Ron Steinke <rsteinke@w-link.net>

	* Eris/Metaserver.h: Put an #ifndef __MINGW32__ around
	  the snprintf and vsnprintf #defines.

Tuesday, 6th January 2004, Al Riddoch <alriddoch@zepler.org>

	* Eris/World.h, Eris/World.cpp: Add a signal to indicate if
	  if a player has successfully taken control of a new or existing
	  avatar.

Saturday, 20th December, Ron Steinke <rsteinke@w-link.net>

	* Don't need Avatar::GotEntity, World::Entered does
	  the same thing.

Saturday, 20th December, Ron Steinke <rsteinke@w-link.net>

	* Added a GotEntity signal to Avatar, so we can connect
	  callbacks to the character's entity when it arrives.

Friday, 19th December, Al Riddoch <alriddoch@zepler.org>

	* Remove Serial from rpm spec as it is not required, and messes up
	  deps.

Thursday, 19th December, James Turner <james@worldforge.org>

    * Remove ancient socket references from Eris/Types.h - long
      since deprecated in favour of skstream

Monday, 8th December, James Turner, <james@worldforge.org>

    * Fix a warning on Mingw32, due to me using -1 in BaseConnection,
      when I should have used the constant supplied by skstream.

Friday, 5th December, Al Riddoch <alriddoch@zepler.org>

	* Fix LDADD for testEris so it works right.

Friday, 5th December, Al Riddoch <alriddoch@zepler.org>

	* Fix test/Makefile.am so the tests build but don't run.

Tuesday, 2nd December, Al Riddoch <alriddoch@zepler.org>

	* Supress unknown pragme warnings, and add canonical macros.

Thursday, 27th November, James Turner <james@worldforge.org>

    * Apply Ron's patch for transforming WFMath objects
      based on an entity's pos and orientation.

Monday, 24th November, James Turner <james@worldforge.org>
    * Add accessor for Person objects directly on Room.

Monday, 24th November, Al Riddoch <alriddoch@zepler.org>

	* Eris/Avatar.cpp: Fix all uses of send() to pass a reference
	  rather than a pointer. Why did this compile?

Sunday, 23nd November, Ron Steinke <rsteinke@w-link.net>

	* Added take(), touch(), say(), move(), and place()
	  methods to Avatar, to complement the existing drop()
	  method.

Sunday, 2nd November, Ron Steinke <rsteinke@w-link.net>

	* Replaced Time::Stamp class with a typedef to
	  WFMath::TimeStamp (which was originally a copy
	  of Time::Stamp).

Sunday, 26th October, Ron Steinke <rsteinke@w-link.net>

	* Added the capacity to have multiple timeouts with
	  the same name, as long as they are owned by different
	  object instances. This fixes a problem with the code
	  that allows multiple simultaneous Connection instances.

Thursday, 23rd October, Simon Goodall <simon@simongoodall.co.uk>
	* Fixed configure.ac to use eris-poll-glib-1.2.pc in second glib test

Monday, 20th October, James Turner <james@worldforge.org>

	* Add ProjectBuilder project - currently requires a modified
	  libsigc++ framework which I'll upload to FTP at some point.

Saturday, 20th September, Ron Steinke <rsteinke@w-link.net>

	* Fixed test code so it acutally builds, mostly Atlas
	  stuff and changing pollDefault to PollDefault (which is
	  odd, because it's _never_ been pollDefault).

Saturday, 23rd August, Al Riddoch <alriddoch@zepler.org>

	* Eris/BaseConnection.cpp: Switch to using skstream::isReady()
	  instead of the deprecated is_ready().

Friday, 22th August, Ron Steinke <rsteinke@w-link.net>

	* Made Poll::new_timeout_ static to keep the Timeout
	  constructor from instantiating the poll. Otherwise
	  static timeouts instantiate PollDefault before
	  we can set the poll instance.

Friday, 22nd August, James Turner <james@worldforge.org>

	* Rename configure.in to configure.ac, since we require the newer
	  version. This stops some autoconf versions moaning about the name,
	  and helps scripts which detect which autoconf to run by
	  examining configure.in
	* Also add an AC_PREREQ, just for paranoia's sake.
	* Fix autogen.sh for the new name

Sunday, 17th August, Ron Steinke <rsteinke@w-link.net>

	* Eris/UIFactory.*: Fixes to UI code for change
	  to atlas-transitional.

Monday, 11th August, James Turner <james@worldforge.org>

	* Fix a dumb bug I introduced in June, in handling server-
	  commaned LOGOUTs. Essentially, I failed to pickup the
	  anonymous ClassDispatcher below :op:, and hence was
	  dispatching Player::recvRemoteLogout for every op
	  recived. Solution is too create an anonymous ClassDispatcher
	  ourselves, pending a re-think of anonymous dispatchers
	  at some point in the future.

	  Thanks to Al Riddoch for the catch.

Monday, 11th August, Al Riddoch <alriddoch@zepler.org>

	* Eris/PollDefault.cpp, Eris/PollDefault.h: Fix more incorrect mangling
	  of Poll by conversion script.

Saturday, 9th August, Al Riddoch <alriddoch@zepler.org>

	* Switch all the build files over to using 1.2 API suffix.

	* bindings/polls/glib/PollGlib.h, bindings/polls/glib/PollGlibFD.h,
	  bindings/polls/glib/PollGlibSource.h: Fixed some incorrect
	  mangling of Poll by the Atlas-C++ conversion script.

Saturday, 9th August, James Turner <james@worldforge.org>

	* Convert to Atlas-C++ transitional API. Do not use unless
	  you know what you're doing. Arrr!
	* Also convert to skstream-0.3 and require wfmath 0.3

Tuesday, 22nd July 2003, Ron Steinke <rsteinke@w-link.net>

	* Added UI Factory code, based on the new experimental
	  Janus UI Atlas entities. You need the experimental
	  janus branch of Atlas-C++ to compile it, so it's
	  wrapped in a nice-freindly ./configure check.

Monday, 23rd June 2003, Al Riddoch <alriddoch@zepler.org>

	* Fix Makefile.ams so that distcheck works.

Friday 13th June, James Turner <james@worldforge.org>

	* Fix compilation of the typeService stuff, this once again
	  provides the danger in committing while in a hurry to play
	  games ;-)
	* Change the dependancy maps to key off of a TypeInfoPtr instead
	  of the string name.
	* Moved all the remaining TypeService methods out of TypeInfo.cpp
	  and into typeService.cpp where they belong

Monday, 9th June, James Turner <james@worldforge.org>

	* Fix a waring in Entity.h spotted by rsteinke
	* Rename TypeInfoEngine to TypeService, move
	  to seperate files, and re-factor TypeInfo code
	  to know much less about the TypeService's
	  internal state (which is now private)
	* Rename various Type system methods as suggested
	  by Al Riddoch to be more descriptive and useful

Friday, 30th May 2003, Ron Steinke <rsteinke@w-link.net>

	* Fixed a missed Interface -> UserInterface change
	  in Player.h.
	* Added a <cassert> #include in atlas_utils.h, so
	  the server test builds under g++ 3.3.

Sunday, 25th May 2004, James Turner <james@worldforge.org>

	* Start to migrate the test code away from CppUnit,
	  since ithe typeinfo magic it uses upsets GCC < 3.2
	  Instead, switch to some fairly basic internal
	  helpers, since we never did much with CppUnit
	  anyway.
	* Start adding TypeInfo support to the stub server
	  (using hard coded data, no dependancy on an
	  external source), so it be a bit more realistic.
	* Rewrote testPlayer to test more things, not use CppUnit,
	  and generally be smarter. Oh, and it uses StubServer,
	  since StubConnection is a bad idea and will be
	  going away shortly.

Tuesday, 13th May 2003, Ron Steinke <rsteinke@w-link.net>

	* More perl bindings memory management stuff,
	  primarily handling the World::Destroyed signal.
	* Used templates to simplify the perl typemap
	  stuff a bit, changed the #includes in the modules
	  to only include the type conversion code
	  each needs.

Tuesday, 13th May 2003, Ron Steinke <rsteinke@w-link.net>

	* Gave the perl bindings better memory management.
	  The biggest change is that rooms are now passed
	  around as a lobby pointer and id string, so we
	  don't get seg faults if room references go stale.
	  Most of the rest is incrementing/decrementing
	  the refcounts of the perl SV's that own Connection
	  and Player instances.
	* Added some getConnection()/getLobby()/getPlayer()
	  accessors to various classes, as needed for the
	  above memory management code.
	* Added an Interface class, for the beginning
	  of incorporating handling of the soon-to-be-defined
	  Atlas interface ops (old janus functionality).

Saturday, 10th May 2003, Al Riddoch <alriddoch@zepler.org>

	* Incremented version to 0.9.8.1 for a patch release with
	  working perl bindings.

Saturday, 10th May 2003, Ron Steinke <rsteinke@w-link.net>

	* Changed perl bindings build stuff to account
	  for the @WFMATH_CFLAGS@ @ATLAS_CFLAGS@ -> @WF_CFLAGS@
	  change
	* Added a check for the SigC module to the check for
	  the sigcperl lib in configure.in
	* Got rid of OLD_SIGC_1_0 stuff in bindings, since we're
	  now requiring libsigc++ 1.2

Friday, 9th May 2003, James Turner <james@worldforge.org>

	* Incremented version to 0.9.8 for stable release.

Thursday, 8th May 2003, Ron Steinke

	* Changed Al's mkdir -p fix in bindings/Makefile.am
	  to test -d || mkdir, since that's the way autoconf
	  does it and it's sure to be portable.

Thursday, 8th May 2003, James Turner <james@worldforge.org>

	* Don't make or install eris-config, eris.m4 or
	  eris-config.1 (the man page). The actual files are still
	  there, will be removed fairly sooon.

Thursday, 8th May 2003, Al Riddoch <alriddoch@zepler.org>

	* Use $(top_buildir) to refer to the top of the build structure,
	  and remove reference to old src dir from test Makefile.

Thursday, 8th May 2003, Al Riddoch <alriddoch@zepler.org>

	* Re-order configure.in so the version variable works.

	* Sort out perl bindings dist-hook rule so it works if the
	  perl directory already exists.

Thursday, 8th May 2003, Al Riddoch <alriddoch@zepler.org>

	* test/tests.cpp: Skip the incomplete Player and Lobby tests.

Thursday, 8th May 2003, Al Riddoch <alriddoch@zepler.org>

	* test/tests.cpp: Return with the correct exit status if the
	  tests fail.

Thursday, 8th May 2003, James Turner <james@worldforge.org>

	* Updated configure.in to be Autoconf 2.5 happy, removed lots
	  of deprecated macros
	* We now rely on pkg-config versions of sigc++ and all the
	  WorldForge libs, so configure is smaller and all the
	  AM_PATH_xxx copies in acinclude.m4 go away and die.
	* Made the WFmath handling sane too (we had extra -lwfmath
	  and such in ERIS_LIBS, which is unecessary since pkg-config
	  will pick that stuff up for us)

Thursday, 8th May 2003, Ron Steinke

	* Added typemaps to perl MANIFEST
	* Added a dependency on the build library to
	  bindings/perl-makefile.stamp, so the modules
	  get rebuilt if the lib does

Thursday, 8th May 2003, Ron Steinke

	* Missed bindings/perl/compile_flags.in. Note that
	  make distcheck will still not work when building
	  the perl bindings, since makemaker can't handle
	  having $(srcdir) and $(bindir) be different

Thursday, 8th May 2003, Ron Steinke

	* Added a dist-hook so the perl bindings make it into
	  the automake tarball
	* Fixed the way the perl bindings include the eris
	  headers to match the new way of doing things

Wednesday, 7th May 2003, James Turner <james@worldforge.org>

    * Updated README, INSTALL and AUTHORS in anticipation of
      a stable release fairly soon.

Tuesday, 6th May 2003, Ron Steinke

	* Further perl bindings build fixes

Tuesday, 6th May 2003, Ron Steinke

	* Fixed a problem with the perl bindings not getting
	  the atlas compile flags, generally cleaned up
	  the passing of those flags from autoconf to
	  the perl makemaker build system

Friday, 2nd May 2003, Al Riddoch

	* Move code from src subdir to Eris.

	* Add second .pc file for glib headers, sort out which version of glib
	  it depends on, and sort out to handle it in the rpm.

Tuesday, 22nd April 2003, James Turner

	* updated README / INSTALL to be up-to-date for the next
	  release, and converted to plain text (from Abiword)

Monday, 24th March 2003, Al Riddoch

	* src/Dispatcher.cpp: Handle missing TO on operations.

Monday, 24th March 2003, Al Riddoch

	* bindings/polls/glib/Makefile.am: Move bindings headers to the new
	  pkgconfig compliant header directory.

Saturday, 1st Febuary 2003, Al Riddoch

	* Convert to pkgconfig.

Friday, 31st January 2003, Al Riddoch

	* Fix Atlas-C++ compiled flags.

Thursday, 30th January 2003, Al Riddoch

	* src/Lobby.h: Make destructor virtual.

	* src/Room.cpp, src/Room.h: Simplify to one constructor.

	* src/World.cpp: Ensure talk dispatcher names are unique.

Monday, 16th December 2002, Ron Steinke

	* src/Avatar.h, src/BaseConnection.h, src/ClassDispatcher.h,
	  src/Entity.h, src/Metaserver.h, src/Player.h, src/Property.h,
	  src/Room.h, src/SignalDispatcher.h, src/Timeout.h,
	  src/TypeInfo.h, src/Wait.h, src/World.h: Changed classes
	  inheriting 'public SigC::Object' to inherit 'virtual public
	  SigC::Object' instead, so multiple inheritance will work

Wednesday, 14th December 2002, Al Riddoch

	* src/Dispatcher.cpp: Take reference to StdBranchDispatcher before
	  calling its subdispatchers so it doesn't get deleted before its
	  finished. Fix use of iterators.

	* src/Dispatcher.h, src/Connection.cpp: Make reference handling
	  methods public, and make connection hold a reference to the
	  root dispatcher so it doesn't get deleted.

Wednesday, 12th December 2002, Al Riddoch

	* src/Avatar.cpp: Fix initialisation of val.

Wednesday, 11th December 2002, Al Riddoch

	* test/testPlayer.cpp: std:: namespace fixes.

	* configure.in: Handle interface version correctly.

Monday, 2nd December 2002, Ron Steinke

	* Fixed check for Perl bindings so it can detect SigCPerl >= 0.2.0,
	  which uses pkg-config
	* Fixed errors in Perl binding build, made some changes necessary
	  to accomodate libsigc++-1.2

Friday, 29th November 2002, Ron Steinke

	* Added PollGlib, with code taken from silence. This is the poll
	  for use with gtk+, it's called PollGlib because it only depends
	  on the lower level glib library.

Tuesday, 27th November 2002, Ron Steinke

	* Integrated Perl bindings into the build with --enable-perl.
	  Rebuild dependencies still don't work properly, and make dist
	  isn't integrated between the automake and makemaker parts.

Tuesday, 26th November 2002, Ron Steinke

	* Added a missing forward declaration of World to Factory.h

Monday, 18th November 2002, Ron Steinke

	* Changed a bunch of accessors that returned std::string
	  to return const std::string& instead

Thursday, 14th November 2002, Ron Steinke

	* Changed the second argument of Meta::ReceivedServerInfo
	  from ServerInfo to const ServerInfo&, fixed a typo

Tuesday, 12th November 2002, Ron Steinke

	* Added an optional offset to Avatar::drop().
	* Split Avatar::InvChanged into Avatar::InvAdded
	  and Avatar::InvRemoved.

Wednesday, 6th November 2002, Ron Steinke

	* Added a signal handler to set Avatar's _entity member
	* Added some inventory handling capabilities to Avatar

Tuesday, 5th November 2002, Ron Steinke

	* Got Avatar working properly with OpRefnoDispatcher,
	  and changed existing references in the code to the
	  op:ig:foo dispatcher to use the appropriate per-World
	  dispatcher id. Taking/creating characters works again.

Sunday, 3rd November 2002, Al Riddoch

	* configure.in: Clean up, and disable static by default.

Sunday, 3rd November 2002, Al Riddoch

	* Add rpm spec.

Friday, 1st November 2002, Al Riddoch

	* src/World.cpp: Fix calls to SigC::slot so it is sigc++ 1.2
	  compatable.

Friday, 1st November 2002, Ron Steinke

	* Change ArgumentDispatcher to (new) OpRefnoDispatcher in Avatar
	* Change std::cerr to log(LOG_DEBUG,...) for debugging code

Friday, 1st November 2002, Al Riddoch

	* src/World.cpp: ISO C++ does not allow default value for arg to be
	  specified in function definition.

Wednesday, 30th October 2002, James Turner

	* Commit Ron's Avatar patches : currently got a bug
	  with the IG-transition INFO op, so don't update unless
	  you're doing dev work. Also bumped the version to 0.9.7
	  since this is an API change (rsteinke has diffs for silence
	  and sear, very minor).

Monday, 28th October 2002, Al Riddoch
	* Fix dispatcher removal for the imaginary emote ops fix made on the
	  9th. October.

Thursday, 24th October 2002, Al Riddoch
	* Add checks so it is possible for a connection to send and
	  receive when its status is DISCONNECTING.

Thursday, 24th October 2002, Simon Goodall
	* Clean up DebugDispatchers when deleting Connection object

Wednesday, 09th October 2002, Al Riddoch

	* src/ArgumentDispatcher.cpp: Prevent ArgumentDispatcher from
	  aborting if the object it is passed has no args.

	* src/Room.h, src/Room.cpp: Rework handling of imaginary emote
	  ops to be a bit more general.

Tuesday, September 17, Ron Steinke

	* Backed out fix for Connection seg fault, which was
	  causing problems

Friday, September 13, Ron Steinke

	* Added a check to Player::netConnected() that the current
          action is null before calling internalLogin(). This
          fixes a double login problem if someone else calls
          Player::Login() in a BaseConnection::Connected
          signal handler before the signal gets to
          Player::netConnected().

Sunday, September 1, Ron Steinke

	* Enhanced locking in Connection to prevent a segfault when
	  Connection::disconnect() is called inside a signal emitted
	  by BaseConnection::recv() (e.g. Player::LogoutComplete)
	* Added a lock in PollDefault::poll() to prevent reentrancy,
	  so we catch it sooner instead of hitting an assert()
	  in Dispatcher

Wednesday, August 28th, James Turner

	* Fix a bug (found by Simon) in Connection::gotData, introduced
	  by switching the lifetime of the underlying tcp_socket_stream. Basically
	  we weren't checking if the _stream existing prior to calling isReady.
	  If the meta-server is being used, and a connection object is created but
	  not connected, then this bug (a segfault occurs), since the Connection
	  is registered with the Poll instance and network activity can happen.

	* Change the meta-server code to use the same life-time rationale for
	  it's UDP stream that BaseConnection uses for the Atlas stream. Basically
	  create the stream on refresh() and not before. This changes the default
	  behaviour : creating a Meta instance will not trigger a list query. This allows
	  the client to attach to the relevant signals before any failures can
	  occurr (thanks Simon)

	* Fixed game server list persistance (I hope). If a failure or cancel
	  occurs while refreshing the list, Eris will revert back to the last
	  'good' list it recieved (if one exists).

	* Converted dispatcher clean up in Lobby dtor to use removeIfDispatcher instead
	  of lame try { .. } catch {}  blocks.

	* Added an explicit greater-than comparisom to Timestamp, so the tests compile.
	  Did GCC 2.9.x implicitly use !(a > b) before? Certainly 3.1 seems not too.

Thursday, August 8th, Al Riddoch

	* Fixed sigc++ use so it complies with published APIs, and put
	  conditionals in to pick up headers for sigc++ 1.0 or 1.2.

Saturday, August 3rd, James Turner

	* Change BaseConnection to create a new tcp_socket_stream
	  for every connect. (And, obviously, hardDisconnect deletes it)
	  This should fix handling of stream errors, since there is no
	  safe way to clear the error code apparently.
	  This change is low impact code-wise (only changes in
	  BaseConnection.cpp), but needs good testing.

Friday, August 2, Michael Koch

	* Patch to declare operators in header file and made method
	  headers equal to their declaration in header file.

Monday, July 29, Ron Steinke

	* Patch to allow multiple Connection instances. Lobby and
	  TypeInfoEngine are per Connection, World is per Player,
	  Entity instances are associated with a particular World.
	  It may be possible at this point to have more than one
	  Player for a given Connection, someone should check this.

Wednesday, July 3, James Turner

	* Compile fixes for OS-X / GCC 3.1
	* Renamed Time.h/cpp to Timestamp, since case insensitive file system
	  means we look like 'time.h', which is really bad.
	* Fix include of <multimap.h> to only occur under GCC 2.9.x; I think this
	  is correct, let me know if not.

Tuesday, July 2, Ron Steinke

	* Fixes so the blocking poll handles timeouts
	  created during callbacks properly

Sunday, June 30, Ron Steinke

	* PollDefault fixes
	* Timeout::poll() and Timeout::pollAll() now return info
	  on when to poll again

Wednesday, June 26, Al Riddoch

	* Switched to new location for skstream headers.

Monday, June 21, Ron Steinke

	* Added an optional timeout argument to PollDefault::poll()

Tuesday, June 18, James Turner

	* Make dtor of Meta virtual, just to be safe

Monday, April 29, Ron Steinke

	* Added check for fd == INVALID_SOCKET in PollDefault

Sunday, June 2, James Turner

	* Safety tweaks in Connection::recv() and Metaserver::recv()
	  to handle bad sockets without segfaulting. Should
	  improve reliability of the Dime meta-server code.

Wednesday, May 22, James Turner

	* Modified Meta::got_data to be safe even when _stream is
	  NULL. This is legal when the meta-server has finished
	  sending us the server list, but there are still
	  active queries (which is quite commmon, when you think
	  about it)

Tuesday, May 21, James Turner

	* Protected against MOVE ops with no ID argument set: fail
	  rather than asserting.
	* Protected against character refreshed prior to account
	  login. (Thanks man-di)

Wednesday, May 15, James Turner

	* Added implemention of missing getServerCount to the Metaserver
	* Fixed the Meta update code to emit CompletedServerList after
	  the last active query is deleted. [Thanks to Xmp for catching
	  both issues, which no one has touched before]
	* Tweaked emission of CompletedServerList to do the right thing
	* Hopefully fixed Meta::doFailure to remove _stream from the Poll
	  object (should stop the stream of errors in Dime)
	* Converted Meta::Failure to pass it's error by const reference,
 	  like all the other signals do

Tuesday, May 14, Al Riddoch

	* src/Player.cpp: Ensure that USERNAME is provided for logins.

Sunday, May 5, James Turner

	* Fix Connection::Disconneting system (found by unit testing!)
	* Made more of the tests work (had to stop using tcp_server_socketm
	  becuase it seems you must set SO_REUSEADDR before calling bind())
	* Fixed some return-by-reference bugs in testUtils, which again
	  helps more of the tests work.
	* Some tests are still not working right, GDB is being unhelpful
	  though. Investigation by people who's GDB doesn't suck
	  appreciated (eg, for whom 'break __throw' does the right thing)

Thursday, May 2, James Turner

    * Changed Time::Stamp::getCurrent() into a static
      factory method now(). The previous syntax looked
      really odd.
    * Updated all the callers of above.
    * Modified stubServer to set SO_REUSEADDR on it's
      sockets, which should fix the odd test problems (well some
      of them .. it still gets linker errors which is a pain).
      Thanks to elefth for spotting this one.
    * Added some boot-strapping code to TypeInfo, not sure
      how well it will work, but it uses the same path as
      loading from atlas.xml, so it should be safe.

Monday, April 29, James Turner

	* Add createRoom method to Room, to enable explicit creation
	  of OOG rooms.
	* Added a Changed signal to Room, with identical semantics to
	  Entity; this can be used to receive notifications when room
	  attributes such as name, topic and the set of child rooms
	  changes.
	* Extended Lobby to deal with room creation internally,
	  including a handler for SIGHT(CREATE) ops.
	* Made Room::getId() more robust in the case where the ID
	  is not available; now throws a meaningful exception,
	  instead of returning an empty ID.
	* Added initial lobby tests; as usual only partial coverage,
	  but better than nothing.
	* Changed configure to simply detect CppUnit automatically,
	  so --enable-cppunit is now uncessary.
	* Updated the README and INSTALL documents a bit
	* Removed Meta::poll() and made recv() protected; these are
	  both obsolete since the new Polling system was added.

Monday, April 29, Ron Steinke

	* Wrapped calls to PollDefault::removeStream() in Meta in a check
	  that _stream->is_open()

Sunday, April 28, Ron Steinke

	* Fixed signed vs. unsigned problems in Time::Stamp by making
	  everything signed.
	* Added a getCurrent() member function equivalent to getCurrentTime(),
	  made getCurrentTime() an inline wrapper around it

Sunday, April 28, Al Riddoch

	* src/Player.cpp: Fix so that GotAllCharacters is emitted when
	  there are no characters to get.

Saturday, April 27, James Turner

	* Updated configure to use AM_PATH_WFMATH, require
	  version 0.2.6, and added the macro to acinclude
	  so people don't get broken.

Wednesday, April 23, James Turner

	* Comitting some docs I've been working on since
	  Christmas, in TeX format initially. Much work ahead,
	  contributions gladly recieved.
	* Removed the old math types code (WFmath is used by
	  all the clients now)
	* Bumped the version up to 0.9.5 now the old
	  Point / Orientation / BBox stuff is gone.

Wednesday, April 17, James Turner

	* Added entity tests (incomplete, and not linking for some
	  odd reason). Something to do with WFMath I suspect, it's
	  all rsteinke's fault :)

Wednesday, April 17 2002, Ron Steinke

	* Added a test to PollDefault: if there are no file
	  descriptors, fall out immediately before trying
	  to poll

Wednesday, April 17 2002, Ron Steinke

	* Changed Time::Stamp from a typedef'd struct to a full
	  class, operator-(const Stamp&, const Stamp&) is now
	  recognized properly

Monday, April 15 2002, James Turner

	* Unit tests! Configure with --enable-cppunit, and do
	  'make check' to run them. Note they only cover a few
	  classes at present, feel free to add more, or suggest
	  them in RT.

Wednesday, April 10 2002, James Turner

	* Fixed OOG emotes in Room.cpp (dispatcher logic was totally
	  wrong, the replacement is big but correct)
	* Moved logging resposibilites from Connection to seperate
	  Log.h file. Presently, this means clients which used to
	  attach to Eris::Connection::Log should now use
	  Eris::Logged.
	* Updated all the Eris log call sites to use the new impl
	* Numerous Metaserver tweaks to make it more stable when
	  connection errors and timeouts occurs; needs more work,
	  alas.

Monday, April 08 2002, Al Riddoch

	* src/Entity.h, src/Entity.cpp: Add a flag which indicates whether
	  an entity has a bounding box.

Thursday, April 04 2002, James Turner

	* Comitted Ron Steinke's polling changes. These add a new
	  class (Poll), which is an abstract polling interface
	  by the connections. A default implementation is supplied,
	  which simple calls 'select()': to retain the current Eris
	  behaviour, simple replace Connection::poll(), Meta::poll()
	  and Timeout::pollAll() with a single call to
	  Eris::PollDefault::poll() (defined in Eris/PollDefault.h).
	  If you're using Gtk+ or some other widget set that provides
	  idle and input notifications, then you can write your
	  own Poll subclass (or steal one: Ron already has a Gtk+
	  implementation!) and everything will work.

Friday, March 15 2002, James Turner

	* Fixed logic in setContainerById, when the parent was
	  already defined: was doing 'setContainer(this)' which
	  is clearly nonsense.
	* Added in / corrected lots of debugging stuff

Tuesday, March 12 2002, James Turner

	* Fix for #222 - made logic in BaseConnection more robust
	  in handling unusual cases / states. If there are other
	  ways to 'wedge' the connections, please let me know.
	* Fix for #216 - logic in World::recvSightDelete to fix
	  container ship of visible contents
	* Preliminary work / re-factoring for #217 : added
	  setContents helper to Entity, and handle that case
	  in setProperty.

Sunday, March 10 2002, James Turner

	* Set a default orientation on Entities, to avoid some
	  nasty behaviour that Simon was seeing. Set w=1, x/y/z=0.

Friday, March 08 2002, James Turner

	* Fixed .so version information. Thanks to Damien for the
	  motivation, and Ron Steinke for showing me how.

Thursday, March 07 2002, James Turner

	* Changed delay on select() to be 0,0 : previously it was
	  10 milliseconds, which is a bit harsh on the clients.
	* Changed World::recvSightMove to use the ID argument of
	  the Move operation, instead of it's FROM. This should
	  fix reporting of pick/drop ops. Both these fixes
	  are suggested by Al Riddoch.

Wednesday, March 06 2002, James Turner

	* Fixed character looks to actually work (had name and type
	  name args to ClaassDispatcher child in the wrong order!)
	* Implemented disptch-safe adding and removal of subdispatchers.

Monday, March 04 2002, Al Riddoch

	* Fix removal of deleted entities from their container.

Saturday, March 02 2002, James Turner

	* Applied Ron Steinke's patch for WFMath support
	* Bumped version to 0.9.2 so people can test against the
	  WFMath-enabled version
	* Added README-wfmath-conversion, explaining how to
	  migrate a client to the new API

Monday, February 11 2002, James Turner

	* Implemented Player::getAccountID();

Sunday, February 10 2002, James Turner

	* Added wait for INFO(LOGOUT) response from server,
	  and a timeout in case the server doesn't support that
	* Added a signal on Player when a logout completes
	* Added a comment in World.cpp about the TO field on
	  IG LOOK ops.
	* Added another 'foundation' dispatcher to Connection
	  (op:info:op)

Friday, Febuary 08 2002, Al Riddoch

	* Clear TO on IG Look ops.

Sunday, February 03 2002, James Turner

	* Fixed logout (set FROM)
	* Changed character API, let me know what you think.
	* Implemented TypeInfo::getParentsAsSet

Tuesday, January 29 2002, James Turner

	* Support for sending private chat messages (using a new
	  'msg' method on Person)
	* Root-entity handling fixes on World and Entity
	* Person now caches the Lobby it's bound too (should help
	  when we eventually have multiple connections)

Thursday, January 24 2002, James Turner

	* Supports skstream2, thanks to Michael Koch for the
	  work.

Sunday, January 20 2002, Al Riddoch

	* Add children accessor to TypeInfo node.

Friday, January 18 2002, James Turner

	* Move lots of extraneous public stuff in TypeInfo
	  private as it should have been all along. If this
	  breaks your client code, talk to me, since you
	  were maybe doing something unwise.
	* Added global BoundType signal on TypeInfo, to
	  inform clients about new types as they become
	  available. Suggested by Al Riddoch for Equator work.

Thursday, January 17 2002, James Turner

	* Further property tweaks suggested by Karsten.
	* Added observeProperty accessor to Entity, which allows
	  easy public monitoring of attribute values.
	* Fixed connectOp[To/From]Slot on Entity
	* Added getType() helper on Entity that returns the
	  corresponding TypeInfo*

Tuesday, January 15 2002, James Turner

	* Rewrote property handling completely : should be
	  much simpler (no unsync() / resync()) and much more
	  flexible now. Properties now have get and set signals
	  that can be observed for value changes.
	* Moved all the attribute handling into setProperty(),
	  removing the coresponding code from recvSet/Sight/Move.
	  This unifies the decoding of every attribute, but
	  also bypasses the Atlas::Objects handling of core
	  attributes (only relevant for name, location, stamp
	  and position).

Monday, January 14 2002, James Turner

	* Skstream exception handling fixes, suggested by
	  Stepher Meier.
	* Fixed to bugs and general tweaking of attribute synchronisation
	  in Entity : this code hasn't been excercised before, so it's
	  a bit wrinkly.
	* CodeWarrior and GCC 3.0 return value warning fixes from
	  Michael Koch and Jesse Jones

Wednesday, December 26 2001, James Turner

	* Tweaked configure.in slightly, to use CXXFLAGS. Should
	  correctly pick up CXXFLAGS / CFLAGS variables if they are set.
	* Made an assertion in Room.cpp more verbose becuase I hit it once,
	  using stage. This maybe a sequencing issue (similar to what
	  happens when logging in before the type hierarchy has fully
	  transferred)
	* Provide a platform specific way to access the underlying connection
	  primitive (i.e the socket's file-descriptor under POSIX). This is
	  to allow efficent integration with the Gtk+ main-loop system,
	  which cna automatically poll file-descriptors and invoke callbacks.

Saturday, December 22 2001, James Turner

	* Committed build improvement by Michael Kocg - Eris now as
	  an eris-config script and M4 macro file, so much more
	  reliable configure scripts can be setup by clients.

Friday, December 21 2001, James Turner

	* Standardised Entity signals to *not* include 'this' as
	  an argument. If this behaviour is desired, using SigC::bind()
	  to achieve the same affect when connection to the Signal.
	  An example of doing this can be found in silence/src/game.cpp
	* Changed a few signals to use pass-by-reference, since this
	  is valid.
	* Calling this version 0.9 in preperation for a beta release in
	  a few weeks.

Friday, December 14 2001, James Turner

	* Correct processing of 'face' attr : it's a unit vector giving
	  the direction, not a heading float. Thanks to Karsten for the
	  info, hopefully this should work now.

Wednesday, December 12 2001, James Turner

	* Added Quaternion class to Types.h and Types.cpp
	* Added _orientation member to Entity, an accessor and code in
	  recvMode to process it.
	* Added a temporary check for the Acorn 0.3/0.4 'face' attribute,
	  and map it to a quaternion if the orientation attr is not found.
	  This can be removed in a few weeks, but takes the pressure off
	  alriddoch to update cyphesis-C++ 'right now'.

	  All of the above is untested becuase I don't have a graphical client
	  to test with; it compiles fine, and it's pretty simple, but
	  beyond that I'm not sure.

	* Moved an assert in Room.cpp (line 244) whcih was a bit premature

Wednesday, December 12 2001, James Turner

	* Fixed OOG recvAppearance/Disappearance to handle multiple
	  entities in ARGS. (RT ticket #165). I have verified that the current
	  behaviour still works, can't test the actual multi-args becuase
	  no server sends that format (I think)
	* Added getVelocity accessor to Entity, which somehow got left out
	* Updated Entity::recvMove to update the velocity value.

Thursday, December 06 2001, Al Riddoch
	* Strict C++ compliance fixes, tested with gcc3.

Thursday, November 29 2001, Al Riddoch
	* src/atlas_utils.h: Avoid copying twice when casting.
	* src/Utils.cpp, src/Utils.h: Return const objects.
	* src/Types.cpp, src/Types.h, src/Entity.cpp: Remove support for
	  bmedian attribute now deprecated.

Thursday, November 29 2001, James Turner

	* Changed to actually call World::mark[Inv|V]isible from
	  Entity::setVisible; thus the IEC gets some testing.
	* Handle various edge-cases in the IEC correctly, notably
	  when there are no buckets defined
	* Various comment and dead-code clean-ups.

Monday, November 26 2001, James Turner
	* Re-built dispatch system with various new features:
	* Dispatcher is now abstract, since much logic has been factored
	  out in the StdBranchDispatcher
	* Split Encap dispatcher apart so it only performs de-encapsulation,
	  no type/class selection
	* Class dispatcher now selects the most specialised binding for
	  a type; i.e if handlers for 'SIGHT' and 'INFO' exist, only the
	  one for 'SIGHT' will be fired.
	* Updated all the users of dispatchers to use the new structure
	  and interfaces - tested and most things seem to work, including
	  IG entry. OOG chat emotes are broken, will fix tomorrow.

	* Handle Bounding boxes, the 'BMEDIAN' attribute and velocity/
	  position better in Entity.
	* Added BBox to Types

Saturday, November 24 2001, James Turner

	* Cleaned up logging output for TypeInfo.cpp
	* Extended World to provide a protected mark[Inv/V]isible interface to
	  entities, so they can control their placement in the invisible entity
	  cache.
	* Added InvisibleEntityCache.[cpp/h] and hooked it into World.cpp
	* Added World::tick() method to do periodic updates (eventually motion
	  prediction and so on), initally just flusing the InvisibleEntityCache
	  as necessary.
	* Updated Time to include an operator- as well as operator+
	* Logs in flawlessly with an up-to-date build of Cyphesis-C++!

Thursday, November 22 2001, James Turner

	* Lots of TypeInfo changes, basically the whole dependancy system
	  has been gone over to make it much more robust. There is one
	  (known) issue remaining, but a large number of other issues have
	  been fixed, notably that logging in with a current version of
	  Cyphesis-C++ should work
	* Added a 'listUnbound' debugging helper to TypeInfo

	* Add a check in Lobby's ctor if the connection is already active;
	  if so, run the netConnected callback directly. This avoids
	  incorrect behaviour in certain intialisations orders.
	* Rewrote World::recvAppear to deal with every argument in the
	  list, not just the first one.
	* Added isVisible and setVisible methods to Entity, which are
	  driven off Appearance and Disappearance ops from the server

Sunday, November 18 2001, James Turner

	* Changed objectSummary to special case handling of the Root/meta
	  object (don't report it as <invalid>, it isn't!)
	* Made atlas_cast return const, as a matter of policy against
	  accidental evil
	* Login failures now clear the current action / serial in Player
	  after reporting; thus repeated login attempts now actually work!
	  (it's really true this time, I promise : I've actually tried it
	  and it works)
	* Move the serialno validator around so it A) only operates on
	  messages recieved from Atlas (don't worry about redisaptches /
	  internal crap) and B) correctly handles encapsulation on the
	  dispatch stack (LeafDispatcher sets and ObjectArrived checks
	  the back (top) of the stack, not the front)
	* Re-wrote 'Connection::clearSignalledWaits' to use a manual iteration,
	  since I am clearly doing something stupid with STL remove_if; it was
	  leaving some objects in the queue. My reading for tonight is
	  Scott Meyer's 'Effective STL', <sigh>

	* Added a 'LogLevel' argument to Eris::Log, and changed all the callers to
	  set it a sensible value; should reduce the amout of crap we have to
	  wade through.
	* Changed atlas_cast to use AsObject().AsMap() since AsMap doesn't
	  work correctly for RootEntity/Operation : this was causing lots of
	  strange pseudo-corruption bugs. Eternal gratitude and your first
	  born to be sacrificed to the greater glory of alriddoch!

Thursday, November 15 2001, James Turner

	* Connection::reconnect() now generates a 'Failure' signals instead of
	  throwing InvalidOperation; I was being a tad aggressive here for no
	  good reason.

Saturday, November 10 2001, James Turner

	* Made TypeInfo::init safe (doesn't assert) during reconnections
	* Updated eris.dox.in with better settings
	* Added more documentation to classes and generally improved the
	  quality and accuracy, still a long way to go but getting better
	* Made objectSummary much more robust handling suspicious objects,
	  including a try { .. } catch block for the Atlas exceptions,
	  and more aggresive IsXXX checking on the Message::Objects.
	* Similarly made the getMember/Arg helpers check the structure of
	  the input objects before extracting the data. This is slower but
	  all done inside asserts()
	* Changed the access control for various methods (eg Room's ctor) as
	  a result of looking at the generated documentation, to avoid
	  exposing lots of internal stuff to the client.

Thursday, November 08 2001, James Turner

	* Added LoginFailure signal to Player, which is generated instead
	  of an exception being thrown in response to server-side failures
	  in account creation / login.
	* Updated Player::login/createAccount to work correctly with
	  multiple attempts / tries. This involved moving the 'Connection'
	  argument to both up to the Player constructor, where it should
	  probably have been all along.

Tuesday, November 06 2001, James Turner

	* TypeInfo stuff basically works, parses the atlas.xml file
	  if it's found in the same directory as the program.
	* Changed the way INFOs are handled since we have proper
	  inheritance now
	* Various other fixes which needed type data to be working,
	  e.g. the dispatchers for OOG now bind (correctly) to 'account',
	  not 'player', so admin accounts and so on will work.
	* Probably lots of bugs lying in the grass, but it works okay
	  and I want to get this commited.

Sunday, October 28 2001, James Turner

	* Made dispatchers ref-counted, just like Python and COM. This is
	  becuase the dispatcher tree turned into a dispatcher graph, so
	  ownership got more complex.
	* Preliminary work on ClassDispatcher to support TypeInfo;
	  added ClassDispatcher.cpp (not compiled at present) which uses
	  the TypeInfo functions. The current behaviour is retained, since
	  it's faster and common (at least for operations which make up the
	  bulk of the decode traffic), and because it's necssary to
	  boot-strap the type data transfer.
	* Lots of changes to the TypeInfo code so it might actually work:
	* Made all those dumb functions into static methods
	* Added preliminary support for integer typeids which are coming
	  with Atlas 0.5.x and will make the world a happier place
	* Moved the 'Bound' signal into TypeInfo which is cleaner and gets
	  rid of a global table
	* Still much to do before it compiles or works

Thursday, October 25 2001, James Turner

	* Tweaked objectSummary to handle SET ops better, still needs more
	  work
	* Changed the SET op synthesised by Entity::setContainerById to
	  include the encapsulatig SIGHT : this means the SET actually gets
	  processed insetad of just being ignored
	* In Connection debug mode, store pairs of FROM/SERIALNO for
	  recieved ops, and ensure their uniqueness. Ops with SERIALNO==0 are
	  flagged with a warning, this needs to be clarified. This is
	  correctly flagging the duplicate recieve bug, w00t!
	* Re-wrote Connection::clearSignalledWaits to actually work
	* Made ~WaitForBase virtual so delete doesn't segfault, d'oh
	* Added WaitForBase as a friend of Connection so it can call the new method
	  addWait which actually puts the WaitFors into the WaitList; this wasn't
	  happending, hence the bug with WaitFors being fired multiple times.

	* Added LeafDispatcher, a base class for (guess what?) leaf dispatchers,
	  that sets a special attribute (__DISPATCHED__) when it's dispatch()
	  method is invoked
	* Connection::ObjectArrived tests (in debug mode) that all messages
	  have their __DISPATCHED__ attr set after being dispatched (unless an
	  exception is thrown). This provides a warning in the log files if
	  a message is completely ignored and 'drops out the bottom' of the
	  disaptcher tree
	* Updated SignalDisaptcher0/1/2 to inherit from LeafDispatcher and
	  call it's dispatch implementation.

	* Changed World::recvSightCreate to just call recvSightObject with
	  a synthetic SIGHT op; the possiblity to do special CREATE only
	  processing still exists, but this avoids problems where
	  SIGHT(CREATE(entity)), LOOK(entity) and SIGHT(entity) get overlapped
	  and so on.

Tuesday, October 23 2001, James Turner

	* Added objectSummary function in Utils, which gives a compact
	  string summary of Atlas operations and entities; the heuristics
	  need some work but the output is usable (in Eris::Log calls for
	  examples)
	* Added a '_debug' option to Connection (always set to true at
	  present) that controls some Logging output and Atlas send/recv
	  logging
	* Renamed the Atlas log files to make their function more obvious
	* Bullet-proofing in World::RecvSight to deal with multiple sights
	  and unrequested sights of entities.

Wednesday, October 17 2001, James Turner

	* Fixed Lobby::join to handle re-joins and actually return
	  the Room instance.
	* Added PrivateTalk signal to Lobby and the necesary code
	  to emit it.
	* Adjusted the inital entry logic for rooms to ensure the
	  Entered signal is always emitted correctly.

Tuesday, October 16 2001, James Turner <jmtn@blueyonder.co.uk>

	* Made Room::say/emote set the loc arg correctly; Eris now works with
	  both cyphesis and stage, so no one can complain.

Monday, October 15 2001

	* Fixed up dispatcher tree some more (sights encap imags), seems
	  to work with Stage, and Stage works with Process. This is
	  tenuous validation at best, but it will do. Testing with
	  cyphesis appreciated.

Sunday, October 14 2001, James Turner

	* Added ArgumentDispatcher (map args only,  list args are easy too add too).
	  This is required to route based upon args[loc=ID] in the new OOG
	  format we are switching too.
	* Rebuilt the Room and Lobby OOG routing code for sight / sound / imaginary
	  apperance / disappearance. The code has been flipped; Lobby sets up
	  global class selectors for each op, and rooms insert ArgDispatch
	  children below these to examine the 'loc' attribute.
	* This needs some testing and verification, but I can't right now so
	  comitting and hoping.

Monday, October 01 2001, James Turner

	* Support deffered binding of containers in Entity::recvSight,
	  using the same policy as 'set' uses; i.e creating a secondary
	  Set operation and deffering it until after the container is
	  loaded.
	* Check for empty location attributes in Entity::recvSight, which
	  can happen with root / world objects.
	* Changed various instances of GetAttr("foo").AsXXX to GetFoo() where
	  I'd forgotten / didn't know a Foo accessor existed; thanks to
	  alriddoch for catching these.
	* Fix emission of World.Entered signal until both the root entity and
	  character entity are valid.
	* throw an InvalidOperation exception if getRootEntity is called
	  prior to World.Entered being emitted.

Thu, 27  Sep  2001 13:50:42 +0100, James Turner

	* Changed inheritance of BaseException; now inherits from std::runtime_error,
	  and correctly forwards the error string. As a result, exception.what() will
	  return a sensible value. Thanks to Karsten Laux for the suggestion.

	* Applied Karsten's re-ordering in World::World() (store the instance pointer
	  before creating the default entity). I have no idea why this  went
	  un-noticed in testing, very strange.
	* Added an id member to BaseConnection, to help discriminate connections and
	  their timeouts. This is important if you're connecting to a server while
	  the Meta code is querying it : things get confused!. Thanks to Karsten for
	  the catch on this one.

Sunday, September 16 2001, James Turner <jmtn@blueyonder.co.uk>
	* Correclty process the location / contains
	  attributes to construct the IG entity tree

Monday, September 10 2001, James Turner <jmtn@blueyonder.co.uk>
	* Handle both 'account' and 'player' entites in Lobby;
	  necessary until proper client-side Atlas type handling
	  is available.
	* Configuration changes to lay ground work for Python
	  bingings - talk to me if you want to help / test

Wednesday, August 29 2001, James Turner <jmtn@blueyonder.co.uk>

	* Fixed disconnection (actually call _stream->close())
	  and hence reconnection - rejoice!
	* Added a simple logging system using va_args and a
	  signal on Connection (Log). Seems to work, and doesn't mess up
	  ncurses like simply using 'cout' does. Wish I'd done this ages
	  ago, took about 5 minutes <sigh>.

Tuesday, August 28 2001, James Turner <jmtn@blueyonder.co.uk>

	* Added #include "ServerInfo.h" to Metaserver.h so people don't
	  get hit with a huge raft of STL errors if they forget to include
	  it themselves.
	* Added timeouts to Metaserver and hooked up MetaQuery timeouts
	* Fixed various disconnect / reconnect bugs
	* Player now hooks Connection::Disconnecting to issue a logout
	  operation. Currently the reply is undefined so this will always
	  hit the disconnect timeout.
	* Disconnect is still not working quite right.

Monday, August 27 2001, Jmaes Turner <jmtn@blueyonder.co.uk>

	* Add timeouts to BaseConnection / Connection, and
	  exposed in a relatively sane way.
	* Modifed Time.h/.cpp to be more portable, and
	  updated the timing code in Meta that used it.
	* Made Connection::disconnect actually do something. This entailed
	  adding status locking to the connection =>
	* Added lock() / unlock() calls to Connection; these can hold the
	  Connection in a state (currently only DISCONNECTING) while
	  users of the connection perform tasks. Needs testing of
	  course, but I think the principle is sound.

Sunday, August 19 2001, James Turner <jmtn@blueyonder.co.uk>

	* Added support for emotes to OOG session
	* New TypeInfo system (not tested yet)
	* Re-wrote the Connection dispatch model to handle
	  re-dispathces more flexibly.
	* Added a zero-argument SignalDispatcher
	* Fixed Room Talk and Emote signals to send the
	  account ID, instead of the user's name.

Friday, August 10 2001, James Turner <jmtn@blueyonder.co.uk>

	* Updated README and INSTALL to contains something
	  vaugely informative.
	* Initial work on TypeInfo.cpp/.h classes (not part)
	  of build at present.
	* Entity factories are sorted by a priority now. This
	  meant using a multimap internally, though I've just
	  realised a multi-set would be sufficent. D'oh.

Saturday, August 04 2001, James Turner

	* Handle sparse rooms without throwing an exceptions;
	  checks that the 'people' and 'rooms' list exist
	  before attempting to extract them.
	* Fixed file line endings

Sunday, July 29 2001, James Turner

	* Added redispatch (re-post) support; needs testing
	  and documentation but the basics are there and
	  quite clean.
	* Added RecapDsiaptcher and IdDispatcher
	* Instance() singleton accessor on Eris::Connection
	* Sythetic appearance generation as required
	* Fixed dispatcher setup for sound(talk)
	* In-game works, with some bug (5 copies of messages!)

Friday, July 27 2001, James Turner

	* Renamed methods to leadingLowerCase style, as requested
	  by Al Riddoch.
	* Added std:: prefix to lots of things to make GCC 3.0
	  happier. Doubtless some remain.
	* Fixed context dispatch stack handling when backtracking
	  occurs (wasn't correclty popping encapsulated objects)

Thursday, July 26 2001, James Turner

	* Added Meta-server status codes
	* Added 'Failure' signal to Meta
	* Much improved meta-server error handling in general

Wednesday, July 25 2001, James Turner

	* Changed Dispatcher interface to support passing
 	  multiple objects down the tree. This enables 'context'
	  to be maintained, i.e encapsualting objects are not
	  discarded.
	* Added SignalDispatcher2, which binds to both the curent
	  top of the context stack, and it's parent. In theorey,
	  SignalDispatcher3/4 etc could be provided, but this is
	  unlikely to occurr much in practice.
	* Bumped version to 0.1.3
	* Handle Stage RIM Chat bug where ID of certain objects
	  is not set in SIGHTs (use TO attribute of SIGHT op)

Sunday, July 22 2001, James Turner

	* Fixed player to correctly register 'LoggedIn' signal
	  on Lobby, which was getting ignored.
	* Implemented Connection::RemoveDispatcherByPath

Saturday, July 21 2001, James Turner

	* Fixed Lobby::Join to match silence-py behaviour
	* Added 'Leave' (part) operation to Room, and made the
	  destructor call it when appropriate.
	* Hacking charatcer creation, still being strange

Sunday, July 15 2001, James Turner

	* Meta-server code now seems to work, but:
	* Rebuilt the query code to build and return ServerInfo objects
	* Handle Cyphesis-style anonymous GET replies (no refno set)

Wednesday, July 04 2001, James Turner

	* More reconnection work
	* Correctly handle NULL stamps (assume unstamped)
	* Bumped version to 0.1.2

Tuesday, July 03 2001, James Turner

	* Added reconnection support to Connection
	* Changes to World to support reconnection
	* Correctly validate the entity stamp when processing
		APPEARANCE ops.
	* Added GetStamp() accessor to Entity
	* Set serial number on most out-going ops

Monday, July 02 2001, James Turner

	* Added meta-system; needs some work

Wednesday, June 27 2001, James Turner

	* Re-factored connection into an underlying layer (BasicConnection)
	and a public wrapper (Connection); this is to permit Meta-system
	queries using a light-weight connection system.
	* Add Appear / Disappear / Entered signals to World

Tuesday, June 26 2001, James Turner

	* Updated configure.in to test for skstream header / library
	* Updated configure.in to test for Atlas headers and libraries
	* OOG System appears to be working with preliminary code in Stage
	* Appear / Disappear handled correctly
	* Generates correct OOG Talk ops
	* Preliminary support for IG operation

Friday, June 15 2001, James Turner
Created initial change-log becuase automake requires it
