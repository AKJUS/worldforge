Thursday, January 24 2002, James Turner

	* Supports skstream2, thanks to Michael Koch for the 
	  work. 

Sunday, January 20 2002, Al Riddoch

	* Add children accessor to TypeInfo node.

Friday, January 18 2002, James Turner

	* Move lots of extraneous public stuff in TypeInfo
	  private as it should have been all along. If this
	  breaks your client code, talk to me, since you
	  were maybe doing something unwise.
	* Added global BoundType signal on TypeInfo, to
	  inform clients about new types as they become
	  available. Suggested by Al Riddoch for Equator work.

Thursday, January 17 2002, James Turner

	* Further property tweaks suggested by Karsten.
	* Added observeProperty accessor to Entity, which allows
	  easy public monitoring of attribute values.
	* Fixed connectOp[To/From]Slot on Entity
	* Added getType() helper on Entity that returns the
	  corresponding TypeInfo*

Tuesday, January 15 2002, James Turner

	* Rewrote property handling completely : should be
	  much simpler (no unsync() / resync()) and much more
	  flexible now. Properties now have get and set signals
	  that can be observed for value changes.
	* Moved all the attribute handling into setProperty(),
	  removing the coresponding code from recvSet/Sight/Move.
	  This unifies the decoding of every attribute, but
	  also bypasses the Atlas::Objects handling of core
	  attributes (only relevant for name, location, stamp
	  and position).

Monday, January 14 2002, James Turner

	* Skstream exception handling fixes, suggested by
	  Stepher Meier.
	* Fixed to bugs and general tweaking of attribute synchronisation
	  in Entity : this code hasn't been excercised before, so it's
	  a bit wrinkly.
	* CodeWarrior and GCC 3.0 return value warning fixes from
	  Michael Koch and Jesse Jones

Wednesday, December 26 2001, James Turner

	* Tweaked configure.in slightly, to use CXXFLAGS. Should
	  correctly pick up CXXFLAGS / CFLAGS variables if they are set.
	* Made an assertion in Room.cpp more verbose becuase I hit it once,
	  using stage. This maybe a sequencing issue (similar to what
	  happens when logging in before the type hierarchy has fully
	  transferred)
	* Provide a platform specific way to access the underlying connection
	  primitive (i.e the socket's file-descriptor under POSIX). This is
	  to allow efficent integration with the Gtk+ main-loop system,
	  which cna automatically poll file-descriptors and invoke callbacks.

Saturday, December 22 2001, James Turner

	* Committed build improvement by Michael Kocg - Eris now as
	  an eris-config script and M4 macro file, so much more
	  reliable configure scripts can be setup by clients.

Friday, December 21 2001, James Turner

	* Standardised Entity signals to *not* include 'this' as
	  an argument. If this behaviour is desired, using SigC::bind()
	  to achieve the same affect when connection to the Signal.
	  An example of doing this can be found in silence/src/game.cpp
	* Changed a few signals to use pass-by-reference, since this
	  is valid.
	* Calling this version 0.9 in preperation for a beta release in
	  a few weeks.

Friday, December 14 2001, James Turner

	* Correct processing of 'face' attr : it's a unit vector giving
	  the direction, not a heading float. Thanks to Karsten for the
	  info, hopefully this should work now.
	  
Wednesday, December 12 2001, James Turner

	* Added Quaternion class to Types.h and Types.cpp
	* Added _orientation member to Entity, an accessor and code in
	  recvMode to process it.
	* Added a temporary check for the Acorn 0.3/0.4 'face' attribute,
	  and map it to a quaternion if the orientation attr is not found.
	  This can be removed in a few weeks, but takes the pressure off
	  alriddoch to update cyphesis-C++ 'right now'.
	  
	  All of the above is untested becuase I don't have a graphical client
	  to test with; it compiles fine, and it's pretty simple, but
	  beyond that I'm not sure.

	* Moved an assert in Room.cpp (line 244) whcih was a bit premature
	
Wednesday, December 12 2001, James Turner

	* Fixed OOG recvAppearance/Disappearance to handle multiple
	  entities in ARGS. (RT ticket #165). I have verified that the current
	  behaviour still works, can't test the actual multi-args becuase
	  no server sends that format (I think)
	* Added getVelocity accessor to Entity, which somehow got left out
	* Updated Entity::recvMove to update the velocity value.

Thursday, December 06 2001, Al Riddoch
	* Strict C++ compliance fixes, tested with gcc3.

Thursday, November 29 2001, Al Riddoch
	* src/atlas_utils.h: Avoid copying twice when casting.
	* src/Utils.cpp, src/Utils.h: Return const objects.
	* src/Types.cpp, src/Types.h, src/Entity.cpp: Remove support for
	  bmedian attribute now deprecated.

Thursday, November 29 2001, James Turner

	* Changed to actually call World::mark[Inv|V]isible from
	  Entity::setVisible; thus the IEC gets some testing.
	* Handle various edge-cases in the IEC correctly, notably
	  when there are no buckets defined
	* Various comment and dead-code clean-ups.

Monday, November 26 2001, James Turner
	* Re-built dispatch system with various new features:
	* Dispatcher is now abstract, since much logic has been factored
	  out in the StdBranchDispatcher
	* Split Encap dispatcher apart so it only performs de-encapsulation,
	  no type/class selection
	* Class dispatcher now selects the most specialised binding for
	  a type; i.e if handlers for 'SIGHT' and 'INFO' exist, only the
	  one for 'SIGHT' will be fired.
	* Updated all the users of dispatchers to use the new structure
	  and interfaces - tested and most things seem to work, including
	  IG entry. OOG chat emotes are broken, will fix tomorrow.

	* Handle Bounding boxes, the 'BMEDIAN' attribute and velocity/
	  position better in Entity.
	* Added BBox to Types
	
Saturday, November 24 2001, James Turner

	* Cleaned up logging output for TypeInfo.cpp
	* Extended World to provide a protected mark[Inv/V]isible interface to
	  entities, so they can control their placement in the invisible entity
	  cache.
	* Added InvisibleEntityCache.[cpp/h] and hooked it into World.cpp
	* Added World::tick() method to do periodic updates (eventually motion
	  prediction and so on), initally just flusing the InvisibleEntityCache
	  as necessary.
	* Updated Time to include an operator- as well as operator+
	* Logs in flawlessly with an up-to-date build of Cyphesis-C++!

Thursday, November 22 2001, James Turner

	* Lots of TypeInfo changes, basically the whole dependancy system
	  has been gone over to make it much more robust. There is one
	  (known) issue remaining, but a large number of other issues have
	  been fixed, notably that logging in with a current version of
	  Cyphesis-C++ should work
	* Added a 'listUnbound' debugging helper to TypeInfo
	
	* Add a check in Lobby's ctor if the connection is already active;
	  if so, run the netConnected callback directly. This avoids
	  incorrect behaviour in certain intialisations orders.
	* Rewrote World::recvAppear to deal with every argument in the
	  list, not just the first one. 
	* Added isVisible and setVisible methods to Entity, which are
	  driven off Appearance and Disappearance ops from the server

Sunday, November 18 2001, James Turner

	* Changed objectSummary to special case handling of the Root/meta
	  object (don't report it as <invalid>, it isn't!)
	* Made atlas_cast return const, as a matter of policy against
	  accidental evil
	* Login failures now clear the current action / serial in Player
	  after reporting; thus repeated login attempts now actually work!
	  (it's really true this time, I promise : I've actually tried it
	  and it works)
	* Move the serialno validator around so it A) only operates on
	  messages recieved from Atlas (don't worry about redisaptches /
	  internal crap) and B) correctly handles encapsulation on the
	  dispatch stack (LeafDispatcher sets and ObjectArrived checks
	  the back (top) of the stack, not the front)
	* Re-wrote 'Connection::clearSignalledWaits' to use a manual iteration,
	  since I am clearly doing something stupid with STL remove_if; it was
	  leaving some objects in the queue. My reading for tonight is
	  Scott Meyer's 'Effective STL', <sigh>
	  
	* Added a 'LogLevel' argument to Eris::Log, and changed all the callers to
	  set it a sensible value; should reduce the amout of crap we have to
	  wade through.
	* Changed atlas_cast to use AsObject().AsMap() since AsMap doesn't
	  work correctly for RootEntity/Operation : this was causing lots of
	  strange pseudo-corruption bugs. Eternal gratitude and your first
	  born to be sacrificed to the greater glory of alriddoch!

Thursday, November 15 2001, James Turner

	* Connection::reconnect() now generates a 'Failure' signals instead of
	  throwing InvalidOperation; I was being a tad aggressive here for no
	  good reason.

Saturday, November 10 2001, James Turner

	* Made TypeInfo::init safe (doesn't assert) during reconnections
	* Updated eris.dox.in with better settings
	* Added more documentation to classes and generally improved the
	  quality and accuracy, still a long way to go but getting better
	* Made objectSummary much more robust handling suspicious objects,
	  including a try { .. } catch block for the Atlas exceptions,
	  and more aggresive IsXXX checking on the Message::Objects.
	* Similarly made the getMember/Arg helpers check the structure of
	  the input objects before extracting the data. This is slower but
	  all done inside asserts()
	* Changed the access control for various methods (eg Room's ctor) as
	  a result of looking at the generated documentation, to avoid
	  exposing lots of internal stuff to the client.

Thursday, November 08 2001, James Turner

	* Added LoginFailure signal to Player, which is generated instead
	  of an exception being thrown in response to server-side failures
	  in account creation / login.
	* Updated Player::login/createAccount to work correctly with
	  multiple attempts / tries. This involved moving the 'Connection'
	  argument to both up to the Player constructor, where it should
	  probably have been all along.

Tuesday, November 06 2001, James Turner

	* TypeInfo stuff basically works, parses the atlas.xml file
	  if it's found in the same directory as the program.
	* Changed the way INFOs are handled since we have proper
	  inheritance now
	* Various other fixes which needed type data to be working, 
	  e.g. the dispatchers for OOG now bind (correctly) to 'account',
	  not 'player', so admin accounts and so on will work.
	* Probably lots of bugs lying in the grass, but it works okay
	  and I want to get this commited.

Sunday, October 28 2001, James Turner

	* Made dispatchers ref-counted, just like Python and COM. This is
	  becuase the dispatcher tree turned into a dispatcher graph, so
	  ownership got more complex.
	* Preliminary work on ClassDispatcher to support TypeInfo;
	  added ClassDispatcher.cpp (not compiled at present) which uses
	  the TypeInfo functions. The current behaviour is retained, since
	  it's faster and common (at least for operations which make up the
	  bulk of the decode traffic), and because it's necssary to
	  boot-strap the type data transfer.
	* Lots of changes to the TypeInfo code so it might actually work:
	* Made all those dumb functions into static methods
	* Added preliminary support for integer typeids which are coming
	  with Atlas 0.5.x and will make the world a happier place
	* Moved the 'Bound' signal into TypeInfo which is cleaner and gets
	  rid of a global table
	* Still much to do before it compiles or works
	  
Thursday, October 25 2001, James Turner

	* Tweaked objectSummary to handle SET ops better, still needs more
	  work
	* Changed the SET op synthesised by Entity::setContainerById to
	  include the encapsulatig SIGHT : this means the SET actually gets
	  processed insetad of just being ignored
	* In Connection debug mode, store pairs of FROM/SERIALNO for
	  recieved ops, and ensure their uniqueness. Ops with SERIALNO==0 are
	  flagged with a warning, this needs to be clarified. This is
	  correctly flagging the duplicate recieve bug, w00t!
	* Re-wrote Connection::clearSignalledWaits to actually work
	* Made ~WaitForBase virtual so delete doesn't segfault, d'oh
	* Added WaitForBase as a friend of Connection so it can call the new method
	  addWait which actually puts the WaitFors into the WaitList; this wasn't
	  happending, hence the bug with WaitFors being fired multiple times.
	  
	* Added LeafDispatcher, a base class for (guess what?) leaf dispatchers,
	  that sets a special attribute (__DISPATCHED__) when it's dispatch()
	  method is invoked
	* Connection::ObjectArrived tests (in debug mode) that all messages 
	  have their __DISPATCHED__ attr set after being dispatched (unless an
	  exception is thrown). This provides a warning in the log files if
	  a message is completely ignored and 'drops out the bottom' of the
	  disaptcher tree
	* Updated SignalDisaptcher0/1/2 to inherit from LeafDispatcher and
	  call it's dispatch implementation.
	  
	* Changed World::recvSightCreate to just call recvSightObject with
	  a synthetic SIGHT op; the possiblity to do special CREATE only
	  processing still exists, but this avoids problems where
	  SIGHT(CREATE(entity)), LOOK(entity) and SIGHT(entity) get overlapped
	  and so on.
	  
Tuesday, October 23 2001, James Turner

	* Added objectSummary function in Utils, which gives a compact
	  string summary of Atlas operations and entities; the heuristics
	  need some work but the output is usable (in Eris::Log calls for
	  examples)
	* Added a '_debug' option to Connection (always set to true at
	  present) that controls some Logging output and Atlas send/recv
	  logging
	* Renamed the Atlas log files to make their function more obvious
	* Bullet-proofing in World::RecvSight to deal with multiple sights
	  and unrequested sights of entities.

Wednesday, October 17 2001, James Turner

	* Fixed Lobby::join to handle re-joins and actually return
	  the Room instance.
	* Added PrivateTalk signal to Lobby and the necesary code
	  to emit it.
	* Adjusted the inital entry logic for rooms to ensure the
	  Entered signal is always emitted correctly.

Tuesday, October 16 2001, James Turner <jmtn@blueyonder.co.uk>

	* Made Room::say/emote set the loc arg correctly; Eris now works with
	  both cyphesis and stage, so no one can complain.

Monday, October 15 2001

	* Fixed up dispatcher tree some more (sights encap imags), seems
	  to work with Stage, and Stage works with Process. This is
	  tenuous validation at best, but it will do. Testing with
	  cyphesis appreciated.

Sunday, October 14 2001, James Turner

	* Added ArgumentDispatcher (map args only,  list args are easy too add too).
	  This is required to route based upon args[loc=ID] in the new OOG
	  format we are switching too.
	* Rebuilt the Room and Lobby OOG routing code for sight / sound / imaginary
	  apperance / disappearance. The code has been flipped; Lobby sets up 
	  global class selectors for each op, and rooms insert ArgDispatch
	  children below these to examine the 'loc' attribute.
	* This needs some testing and verification, but I can't right now so
	  comitting and hoping.

Monday, October 01 2001, James Turner

	* Support deffered binding of containers in Entity::recvSight,
	  using the same policy as 'set' uses; i.e creating a secondary
	  Set operation and deffering it until after the container is
	  loaded.
	* Check for empty location attributes in Entity::recvSight, which
	  can happen with root / world objects.
	* Changed various instances of GetAttr("foo").AsXXX to GetFoo() where
	  I'd forgotten / didn't know a Foo accessor existed; thanks to
	  alriddoch for catching these.
	* Fix emission of World.Entered signal until both the root entity and
	  character entity are valid.
	* throw an InvalidOperation exception if getRootEntity is called
	  prior to World.Entered being emitted.

Thu, 27  Sep  2001 13:50:42 +0100, James Turner

	* Changed inheritance of BaseException; now inherits from std::runtime_error,
	  and correctly forwards the error string. As a result, exception.what() will
	  return a sensible value. Thanks to Karsten Laux for the suggestion.
	  
	* Applied Karsten's re-ordering in World::World() (store the instance pointer
	  before creating the default entity). I have no idea why this  went
	  un-noticed in testing, very strange.
	* Added an id member to BaseConnection, to help discriminate connections and
	  their timeouts. This is important if you're connecting to a server while
	  the Meta code is querying it : things get confused!. Thanks to Karsten for
	  the catch on this one.

Sunday, September 16 2001, James Turner <jmtn@blueyonder.co.uk>
	* Correclty process the location / contains
	  attributes to construct the IG entity tree

Monday, September 10 2001, James Turner <jmtn@blueyonder.co.uk>
	* Handle both 'account' and 'player' entites in Lobby;
	  necessary until proper client-side Atlas type handling
	  is available.
	* Configuration changes to lay ground work for Python
	  bingings - talk to me if you want to help / test

Wednesday, August 29 2001, James Turner <jmtn@blueyonder.co.uk>

	* Fixed disconnection (actually call _stream->close())
	  and hence reconnection - rejoice!
	* Added a simple logging system using va_args and a
	  signal on Connection (Log). Seems to work, and doesn't mess up
	  ncurses like simply using 'cout' does. Wish I'd done this ages
	  ago, took about 5 minutes <sigh>.

Tuesday, August 28 2001, James Turner <jmtn@blueyonder.co.uk>

	* Added #include "ServerInfo.h" to Metaserver.h so people don't
	  get hit with a huge raft of STL errors if they forget to include
	  it themselves.
	* Added timeouts to Metaserver and hooked up MetaQuery timeouts
	* Fixed various disconnect / reconnect bugs
	* Player now hooks Connection::Disconnecting to issue a logout
	  operation. Currently the reply is undefined so this will always
	  hit the disconnect timeout.
	* Disconnect is still not working quite right.

Monday, August 27 2001, Jmaes Turner <jmtn@blueyonder.co.uk>

	* Add timeouts to BaseConnection / Connection, and
	  exposed in a relatively sane way.
	* Modifed Time.h/.cpp to be more portable, and
	  updated the timing code in Meta that used it.
	* Made Connection::disconnect actually do something. This entailed
	  adding status locking to the connection =>
	* Added lock() / unlock() calls to Connection; these can hold the
	  Connection in a state (currently only DISCONNECTING) while
	  users of the connection perform tasks. Needs testing of
	  course, but I think the principle is sound.
	
Sunday, August 19 2001, James Turner <jmtn@blueyonder.co.uk>

	* Added support for emotes to OOG session
	* New TypeInfo system (not tested yet)
	* Re-wrote the Connection dispatch model to handle 
	  re-dispathces more flexibly.
	* Added a zero-argument SignalDispatcher
	* Fixed Room Talk and Emote signals to send the
	  account ID, instead of the user's name.

Friday, August 10 2001, James Turner <jmtn@blueyonder.co.uk>

	* Updated README and INSTALL to contains something
	  vaugely informative.
	* Initial work on TypeInfo.cpp/.h classes (not part)
	  of build at present.
	* Entity factories are sorted by a priority now. This
	  meant using a multimap internally, though I've just
	  realised a multi-set would be sufficent. D'oh.

Saturday, August 04 2001, James Turner

	* Handle sparse rooms without throwing an exceptions;
	  checks that the 'people' and 'rooms' list exist
	  before attempting to extract them.
	* Fixed file line endings

Sunday, July 29 2001, James Turner

	* Added redispatch (re-post) support; needs testing
	  and documentation but the basics are there and
	  quite clean.
	* Added RecapDsiaptcher and IdDispatcher
	* Instance() singleton accessor on Eris::Connection
	* Sythetic appearance generation as required
	* Fixed dispatcher setup for sound(talk)
	* In-game works, with some bug (5 copies of messages!)

Friday, July 27 2001, James Turner

	* Renamed methods to leadingLowerCase style, as requested
	  by Al Riddoch.
	* Added std:: prefix to lots of things to make GCC 3.0
	  happier. Doubtless some remain.
	* Fixed context dispatch stack handling when backtracking
	  occurs (wasn't correclty popping encapsulated objects)

Thursday, July 26 2001, James Turner

	* Added Meta-server status codes
	* Added 'Failure' signal to Meta
	* Much improved meta-server error handling in general

Wednesday, July 25 2001, James Turner

	* Changed Dispatcher interface to support passing
 	  multiple objects down the tree. This enables 'context'
	  to be maintained, i.e encapsualting objects are not
	  discarded.
	* Added SignalDispatcher2, which binds to both the curent
	  top of the context stack, and it's parent. In theorey,
	  SignalDispatcher3/4 etc could be provided, but this is
	  unlikely to occurr much in practice.
	* Bumped version to 0.1.3
	* Handle Stage RIM Chat bug where ID of certain objects 
	  is not set in SIGHTs (use TO attribute of SIGHT op)

Sunday, July 22 2001, James Turner

	* Fixed player to correctly register 'LoggedIn' signal
	  on Lobby, which was getting ignored.
	* Implemented Connection::RemoveDispatcherByPath

Saturday, July 21 2001, James Turner

	* Fixed Lobby::Join to match silence-py behaviour
	* Added 'Leave' (part) operation to Room, and made the
	  destructor call it when appropriate.
	* Hacking charatcer creation, still being strange

Sunday, July 15 2001, James Turner

	* Meta-server code now seems to work, but:
	* Rebuilt the query code to build and return ServerInfo objects
	* Handle Cyphesis-style anonymous GET replies (no refno set)

Wednesday, July 04 2001, James Turner

	* More reconnection work
	* Correctly handle NULL stamps (assume unstamped)
	* Bumped version to 0.1.2

Tuesday, July 03 2001, James Turner

	* Added reconnection support to Connection
	* Changes to World to support reconnection
	* Correctly validate the entity stamp when processing
		APPEARANCE ops.
	* Added GetStamp() accessor to Entity
	* Set serial number on most out-going ops	

Monday, July 02 2001, James Turner

	* Added meta-system; needs some work

Wednesday, June 27 2001, James Turner
	
	* Re-factored connection into an underlying layer (BasicConnection)
	and a public wrapper (Connection); this is to permit Meta-system
	queries using a light-weight connection system.
	* Add Appear / Disappear / Entered signals to World

Tuesday, June 26 2001, James Turner

	* Updated configure.in to test for skstream header / library
	* Updated configure.in to test for Atlas headers and libraries
	* OOG System appears to be working with preliminary code in Stage
	* Appear / Disappear handled correctly
	* Generates correct OOG Talk ops
	* Preliminary support for IG operation
	
Friday, June 15 2001, James Turner
Created initial change-log becuase automake requires it
