2003-10-31 Damien McGinnes 

	* Mercator/DepthShader.cpp: fixed type warning
	* README: Added some text

2003-10-24  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.cpp: Fix incorrect assert.

2003-09-22 Damien McGinnes 

	* Mercator/Segment.cpp: minor changes to interpolation to improve 
	  performance in the general case. (gives about a 5% speedup)

	* Mercator/Intersect.cpp: made some file scope functions static on
	  advice from rsteinke. init'ed som vars to keep gcc happy. made ray
	  intersect return true if ray begins below terrain.

2003-09-14 Damien McGinnes 

	* testPhys.cpp: added a rudimentary physics model to do a more useful
	  test of the ray-terrain intersection
	* Mercator/Intersect.cpp,h: some cleanups for bugs found during the
	  above test

2003-09-13 Damien McGinnes 

	* TODO: cleaned up a few old TODOs
        
2003-09-13 Damien McGinnes 

	* Mercator/Intersect.cpp,h: some intersection code cleanup
	  ray intersection now returns the point of intersection
	  and normal.
	* Mercator/Segment.cpp: fixed normal for intersection on diagonal
	  of a cell (between the two triangles of the quad) also normalised
	  the returned normal

2003-09-12 Damien McGinnes 

	* Mercator/Intersect.cpp,h: maybe finished ray intersection
	  needs more testing
	* tests/testIntersect.cpp: added more tests

2003-09-11 Damien McGinnes 

	* Mercator/Intersect.cpp,h: added ray intersection with terrain
	  not complete yet, ray/triangle tests not added
	* tests/testIntersect.cpp: added ray intersection test -  not finished

2003-09-10 Damien McGinnes 

	* Mercator/Intersect.cpp,h: added point intersection with terrain
	  and height over terrain functions

2003-09-10 Damien McGinnes 

	* Mercator/Intersect.cpp,h: added files for axisbox intersection
	  with terrain
	* tests/testIntersect.cpp: added files for intersection unit tests

2003-09-06 Damien McGinnes 

	* Mercator/Surface.cpp: fixed a segfault in invalidate; slight
	  cleanup to the rounding code in clipToSegment.

2003-09-03  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Surface.h: Use <climits> to get the max value of
	  a char.

	* Mercator/Surface.cpp, Mercator/Buffer.h, Mercator/Buffer_impl.h:
	  Modify buffers and thus surfaces to handle their memory
	  dynamically, providing facilities for allocating and
	  deleting the buffer.

	* Mercator/Segment.h, Mercator/Segment.cpp: Implement easier
	  memory management, getting rid of the flags for points and
	  normals, using the value of the pointer instead.
	  Add a few to be called to cause the segment to free its
	  data, with the option to keep hold of the height field.

2003-09-01  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Terrain.h, Mercator/Terrain.cpp: Add new
	  getHeightAndNormal() method which makes available the method
	  of the same name from Segment on the whole terrain.

2003-08-31  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Shader.h: Add default arguments for constructor,
	  which default to alpha channel only.

	* Mercator/ThresholdShader.cpp, Mercator/GrassShader.cpp,
	  Mercator/FillShader.cpp, Mercator/DepthShader.cpp:
	  Stop specifying arguements to the shader constructor, and thus
	  accept the defaults. Net effect is that surface buffers now
	  just contain alpha values by default.

2003-08-22 Damien McGinnes

	* Mercator/Segment.cpp: fixed edge and corner normals.

2003-08-17  Al Riddoch  <alriddoch@zepler.org>

	* Buffer_impl.h: Add to distribution.

	* Mercator/Segment.cpp: Make sure math functions are specified
	  as being from the global namespace, and add support for rintf
	  as its better than rint, and available under FreeBSD.

2003-08-17  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Buffer.h: Make segment this buffer is bound to public.

	* Mercator/Segment.cpp: Set m_min and m_max to values other
	  that 0, so that they end up with the right value.

	* Mercator/DepthShader.h, Mercator/DepthShader.cpp,
	  Mercator/FillShader.h, Mercator/FillShader.cpp,
	  Mercator/GrassShader.h, Mercator/GrassShader.cpp,
	  Mercator/ThresholdShader.h, Mercator/ThresholdShader.cpp,
	  Mercator/Shader.h: Add virtual method to shaders to
	  allow a check whether the min and max values of a segment
	  intersect with the range affected by this shader.

	* Mercator/Surface.h, Mercator/Surface.cpp: Make shader
	  reference public, and add a check so that we only
	  shade surfaces where the shader usefully applies to the segment.

2003-08-15  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.cpp: Add test for lrintf() which is more
	  suitable and faster than rint() on platforms which have it.

2003-08-14  Damien McGinnes

	* Mercator/Segment.cpp: use MersenneTwister from wfmath

2003-08-12  Al Riddoch  <alriddoch@zepler.org>

	* Update to use wfmath 0.3 for compatability with eris 1.2.
	  We are now clear to use Mersenne Twister from wfmath.

2003-08-11  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Buffer.cpp, Mercator/Buffer.h, Mercator/Buffer_impl.h:
	  Convert to template so that buffer data can be an array of any
	  type.

	* Mercator/Surface.cpp, Mercator/Surface.h: Specialise Buffer as
	  unsigned bytes. Much more compact than floats.

	* Mercator/ThresholdShader.cpp, Mercator/GrassShader.h,
	  Mercator/GrassShader.cpp, Mercator/FillShader.cpp,
	  Mercator/DepthShader.cpp: Re-write shaders to be largely
	  buffer type independant.

2003-08-09  Damien McGinnes

	* Mercator/Segment.cpp, Mercator/MersenneTwister.h, configure,in: 
	  put MersenneTwister in Mercator until clients are ready to move
	  across to wfmath-0.3

2003-08-09  Damien McGinnes

	* Mercator/Segment.cpp: use a local random number generator to
	  ensure the rng state cant be affected by other use of rand() in
	  an app. Change the RNG code to utilise the MersenneTwister.
	* configure.in: require wfmath 0.3 for the MersenneTwister RNG.
	* Mercator/BasePoint.h: seed() now returns an unsigned int.
	* this RNG gives a 20% spped increase on optimized (-O2) code 
	  compared with rand(). (unoptimized it's roughly the same)

          generate 400 tiles (height only, res 64)
          std rand = 1.75 seconds = 4.4 ms per tile
          mt rand = 1.41 seconds = 3.5 ms per tile

2003-08-08  Damien McGinnes

	* Mercator/Segment.cpp: changed round() to rint()
	* updated TODO

2003-08-06  Al Riddoch  <alriddoch@zepler.org>

	* Removed depency on Atlas-C++ for now.

2003-08-06  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.h, Mercator/Segment.cpp: Add vertex cache
	  pointer to segment. Vertex buffer is handled by client.

2003-07-31  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/TerrainMod.h, Mercator/TerrainMod_impl.h,
	  Mercator/TerrainMod.cpp: Move definition of virtual
	  methods out of the headers, as they can't be inlined.

	* tests/testTerrainMod.cpp: Add unit test for terrain mods.

2003-07-28  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Buffer.cpp, Mercator/Buffer.h: Add accessor operators so
	  data can be accessed by coordinate and channel. Store size locally.

	* Mercator/Matrix.h: Use unsigned int for indexs. Safer.

	* Mercator/GrassShader.cpp Mercator/GrassShader.h: Add new shader
	  for bands which also have a slope dependence.

	* tests/testShader.cpp: Include GrassShader in tests.

2003-07-28  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/DepthShader.cpp, Mercator/DepthShader.h: Fix some
	  bugs.

	* Mercator/ThresholdShader.cpp, Mercator/ThresholdShader.h:
	  Fix order of constructor argments.

2003-07-27  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/DepthShader.cpp, Mercator/DepthShader.h:
	  Add a shader for tinting terrain below water level to simulate
	  light attenuation due to water.

2003-07-27  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Shader.cpp, Mercator/Shader.h: Add flags to shader
	  to specify whether this shader requires colour and alpha
	  elements in the surface buffer. Add a method which
	  creates a surface with the required kind of buffer.

	* Mercator/Surface.cpp, Mercator/Surface.h: Make a couple of
	  references const. Add flags which provide hints about
	  the number of channels required in the surface.

	* Mercator/Terrain.cpp: Use new method in shader to create
	  surface objects.

	* Mercator/FillShader.cpp, Mercator/FillShader.h,
	  Mercator/ThresholdShader.cpp, Mercator/ThresholdShader.h:
	  Update shaders to new base class.

	* tests/testShader.cpp: Update tests, check for a bit more
	  info, and ensure that exit status reflects if an error
	  occured.

2003-07-26 Damien McGinnes

	* Mercator/Segment.cpp: check segment validity before applying mod to
	  prevent a segfault.

2003-07-26  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/FillShader.cpp: Fix unsigned int warning.

	* Mercator/ThresholdShader.cpp Mercator/ThresholdShader.h:
	  Implement threshold shaders for simple landscape concepts.

	* tests/testShader.cpp: Update shader unit test to test all current
	  shaders.

2003-07-25  Al Riddoch  <alriddoch@zepler.org>

	* We're not using CppUnit, so get rid of the check.

2003-07-25  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Terrain.cpp, Mercator/Terrain.h: Add new argment to to
	  constructor for options, which amongst others will define whether the
	  terrain has surfaces. Implement code for adding surfaces
	  to a segment, and shading those surfaces.

	* Mercator/Segment.h, Mercator/Segment.cpp: Add a typedef and
	  accessors for the surface list. Add a method to call populate
	  on all the segments surfaces.

	* tests/testTerrain.cpp: Add tests to overall unit test to
	  check the shader functionality of Terrain.

2003-07-24  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/FillShader.h: Make FillShader inherit from Shader,
	  as it should have done all along.

	* Mercator/Segment.h: Add list of surfaces of this segment.
	  Fill out some comments.

	* Mercator/Surface.cpp, Mercator/Surface.h: Store a reference to
	  its shader in a surface. Add populate member which causes the
	  shader to shade this surface. This allows the code to populate
	  a set of surfaces without knowing what the shaders are supposed
	  to be.

	* Mercator/Terrain.cpp, Mercator/Terrain.h: Add methods to add
	  and shade the surfaces of a segment.

	* tests/testShader.cpp: Modify unit test to account for modified
	  API.

2003-07-24  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Buffer.h, Mercator/Buffer.cpp: Add member to store
	  number of channels, and add accessors for channels, and Segment
	  reference.

	* Mercator/Shader.cpp, Mercator/Shader.h: Remove constructor
	  arguments, and segment reference member. A shader is not
	  bound to a segment, not restricted to a fixed number of channels.
	  Add shade() vertual method which applies the given shader to
	  a surface.

	* Mercator/FillShader.cpp, Mercator/FillShader.h: Add demo shader that
	  just fills the surface with 1s.

	* tests/testShader.cpp: Add a shader unit test which uses FillShader
	  for now.

2003-07-24  Al Riddoch  <alriddoch@zepler.org>

	* tests/testTerrain.cpp: Add unit test for terrain class.

2003-07-24  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Terrain.h: Add storage and accessors for shaders.

2003-07-21  Al Riddoch  <alriddoch@zepler.org>

	* Tweak configure.in to be a little more compatable with older
	  autoconf.

2003-07-21  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.h: Add accessor for the size member.

	* Mercator/Buffer.h, Mercator/Buffer.cpp, Mercator/Surface.h,
	  Mercator/Surface.cpp: Make a base class for handling
	  float buffers for vertex, texture coord and colour data.
	  Use it as the basis for Surface.

	* Mercator/Shader.h, Mercator/Shader.cpp: Place holder for shaders
	  which implement rules creating a surface from the segment height
	  data according to a rule.

2003-07-21  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.cpp: Free the float buffers using the correct
	  array delete operator.

2003-07-21  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.h, Mercator/Segment.cpp: Allocate point data on the
	  fly.  Use m_res and m_size in the terrain population functions rather
	  than recalculating, or passing values.

2003-07-20  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Surface.h, Mercator/Surface.cpp: Make surface class a little
	  more flexible by paramaterising the number of channels.

	* Mercator/Segment.h, Mercator/Segment.cpp: Add convenience membe
	  m_size which is m_res + 1, so we don't have to keep doing that
	  calculation.

2003-07-06  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.h: Re-name getSize() to getResolution()

	* Mercator/Surface.h, Mercator/Surface.cpp: Store a reference to the
	  the segment this is a layer of, and add an enumeration for indicating
	  the orientation of the texturing on this layer.

2003-07-06  Al Riddoch  <alriddoch@zepler.org>

	* Clean up configure.in a bit.

2003-07-05 Damien McGinnes
        
	* Mercator/TerrainMod.h: added a CraterTerrainMod that subtracts a 
	  sphere from the terrain.

2003-07-03  Al Riddoch  <alriddoch@zepler.org>

	* Update rpm spec to be cleaner, and make the technical sections
	  more generic.

2003-07-03  Al Riddoch  <alriddoch@zepler.org>

	* Remove legacy mercator-config script and m4 macro, as we
	  don't want people using them.

2003-06-27 Damien McGinnes
        
	* Mercator/Terrain.cpp, Terrain.h: made addMod take a const ref 
	  to a terrain mod (bit cleaner)
	* Mercator/TerrainMod.h: made clone methods const

2003-06-26 Damien McGinnes
        
	* Mercator/Segment.cpp, Segment.h: Added the location of the
	  segment. Changed applyMod to work with mods in absolute coords
	* Mercator/Terrain.cpp, Terrain.h: added addMod to apply mods to 
	  the terrain - this allows a mod to span several segments
	* Mercator/TerrainMod.h: added a clone method, fixed the virtual
	  keyword on a few methods, disabled copy constructors

2003-06-23  Al Riddoch  <alriddoch@zepler.org>

	* Fix Makefile.ams so that distcheck works.

	* tests/main.cpp: Fix tests to work with recent API changes.

2003-06-22  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Mercator.h, Mercator/Segment.cpp, Mercator/Segment.h,
	  Mercator/Terrain.cpp, Mercator/Terrain.h: Clean up the
	  way the default segment resolution and size is handled.

	* Mercator/Surface.cpp, Mercator/Surface.h: Framework for
	  class representation texture layers on the terrain.

2003-06-22  Al Riddoch  <alriddoch@zepler.org>

	* Updated copyright statements to include Damien a bit more.

2003-06-22  Damien McGinnes

	* Mercator/Segment.cpp: fixed an error in the clip code (x and y 
	  were switched)
        
2003-06-22  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.h: Make invalidate() private.

	* Mercator/Terrain.cpp, Mercator/Terrain.h: Fix bugs in revised
	  setBasePoint. Remove obsolete methods, and simply to one
	  getSegment call, as two are no longer required. Add destructor.

2003-06-21  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.cpp, Mercator/Segment.h: Store control
	  points in the segment object, so it can be re-populated.

	* Mercator/Terrain.cpp, Mercator/Terrain.h: Manage the creation of
	  new Segment objects when inserting new base points, and handle
	  invalidation at this point too. getSegmentSafe is now deprecated.
	  Untested.

	* tests/main.cpp: Update tests for API change, and clean up output.

2003-06-21  Damien McGinnes

	* Mercator/Terrain.cpp: 
	  - fixed a bug in invalidatePoint (i, j), not (x,y)
	  - removed the erase line in invalidateSegment (mem leak, and loses
	    mods to the segment)
	  - fixed one of the loop limits in refresh

2003-06-20  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Matrix.cpp: Add template instantiations, which I assume
	  was the effect intended by the previous code.

	* Mercator/Terrain.h, Mercator/Terrain.cpp:
	  Re-work segment invalidation code. operator[] should never
	  be used to test for a key in an STL map.

	* Mercator/Segment.cpp, Mercator/Segment.h, Mercator/TerrainMod.h:
	  Fix comment and code formatting.

2003-06-20  Damien McGinnes

	* Mercator/Terrain.cpp: changed invalidate and getSegmentSafe to use
	  the validity flags
	* tests/main.cpp: did a 30 second test of the above code
        
2003-06-20  Damien McGinnes

	* Mercator/Segment.cpp: added validity flags for points and normals,
	  and fixed up a few code alignment probs
	* Mercator/Terrain.h: started to change invalidate. (commented out
	  right now)
	  Need to modify getSegmentSafe to use the validity flags and only
	  create a new segment when one is not already there.

2003-06-19  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Terrain.h: Add support for legacy interface.

2003-06-19  Al Riddoch  <alriddoch@zepler.org>

	* tests/main.cpp: Move the test prog out of the main code.

	* Mercator/BasePoint.h: Re-work BasePoint class to be more inline
	  with the main style.

	* Mercator/Segment.cpp: Fix up the code to use the new BasePoint
	  style.

2003-06-15 Damien McGinnes

	* new BasePoint.h replaces floats for basepoints
	* Mercator/Segment.cpp : variable roughness implemented
	* added a basic test file - doesnt do much

2003-06-09 Damien McGinnes

	* Mercator/Segment.cpp : modified the normals, this time hopefully so
	  they will work

2003-06-09 Damien McGinnes

	* Mercator/Segment.cpp : modified the normal array to be same size as
	  the heights array. bottom and right boundaries are a bit of a hack

2003-06-09 Damien McGinnes

	* Mercator/Segment.cpp : added in an attempt at values for the normal
	  array. Array is one row and column smaller than the height array.
 
2003-06-08  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.h, Mercator/Segment.cpp: Tidy up some code,
	  and add the beginnings of the normal calculation code.

2003-06-08  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Terrain.h, Mercator/Terrain.cpp: Get rid of the passing
	  over extra surrounding basepoints into Segment::populate.

	* Mercator/Segment.h, Mercator/Segment.cpp: No longer require
	  surrounding basepoints when doing qRMD. Add API and stubs for
	  storing an entire array of normals. Segment::populateNormals()
	  currently just allocates the array of normals. It does nothing
	  else.

2003-06-06 Damien McGinnes

	* TerrainMod.h: fixed where I called Center() instead of getCenter()

2003-06-06 Damien McGinnes

	* TerrainMod.h : added. Defines modifiers for the terrain.
	* Segment.h/Segment.cpp : modified to use TerrainMod objects, stored
	  in a list, applied in order during populate
	* removed Segment_impl.h refactored out.

2003-06-03  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment_impl.h Mercator/Segment.cpp: Fix problem
	  with wfmath template instances, and clean up code.

2003-06-03 Damien McGinnes

	* Segment.cpp Segment.h Segment_impl.h: started work on modification
	  of terrain. Still got a problem that the Contains call in
	  Segment_impl.h doesnt work (link error)

2003-05-24 Damien McGinnes

	* Mercator/Segment.h Mercator/Segment.cpp: Cleaned up Segment, removed
	  tile.cpp and tile.h and moved them into Segment
	* TODO: added some ideas
	* AUTHORS: added some authors
	* added getHeightAndNormal to segment
	* addded some test code for modifying terrain to segment

2003-05-14  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.h, Mercator/Segment.cpp: Add a destructor so
	  we can free the vertex storage.

2003-04-25  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Segment.cpp, Mercator/Segment.h:
	  Initialise min and max properly, and make their accessors const.

2003-04-25  Damien McGinnes

	* Mercator/tile.cpp,h: Added min and max calcs
	* Mercator/Segment.cpp,h: added accessors for min and max

2003-04-19  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Terrain.h: Add accessor for resolution variable.

2003-04-17  Al Riddoch  <alriddoch@zepler.org>

	* Mercator/Matrix.cpp, Mercator/Segment.cpp, Mercator/Segment.h,
	  Mercator/Terrain.cpp: Move source into Mercator subdir
	  for portability.

2003-03-31 Damien McGinnes

	* src/tile.cpp: modified algorithm, cleaned up code slightly
	  algorithm now generates 1 tile very quickly, but has problems
	  on steep tiles where one side is quite flat. (seams are more
	  visible).

2003-03-29  Al Riddoch  <alriddoch@zepler.org>

	* src/tile.cpp: Tweak tile() to create a size+1 * size+1 segment.

	* src/Segment.cpp: Switch to using damien's algorithm for
	  testing.

2003-03-28  Al Riddoch  <alriddoch@zepler.org>

	* src/Matrix.h, src/Matrix.cpp: Add matrix class for handling
	  basepoints.

	* src/tile.h, src/tile.cpp: damiens experimental qRMD implementation.

	* src/Terrain.h, src/Terrain.cpp, src/Segment.cpp: Use Matrix to
	  handle basepoints.

	* src/Segment.cpp: Use memcpy to make copying rows more efficient.

2003-03-19  Al Riddoch  <alriddoch@zepler.org>

	* src/Terrain.h, src/Terrain.cpp: Make value for missing points the
	  the average of surrounding points that are present. Makes edges
	  of know terrain more sane.

2003-03-19  Al Riddoch  <alriddoch@zepler.org>

	* src/Terrain.cpp: Back off change to default height points to make
	  terrain seamless again.

2003-02-23  Al Riddoch  <alriddoch@zepler.org>

	* src/Terrain.cpp: Make default height points work more sanely.

2003-02-23  Al Riddoch  <alriddoch@zepler.org>

	* src/Terrain.cpp: Make refreshing work more sanely.

2003-02-21  Al Riddoch  <alriddoch@zepler.org>

	* src/Terrain.h: Add accessor for point store.

2003-02-17  Al Riddoch  <alriddoch@zepler.org>

	* src/Segment.h, src/Segment.cpp: Add a row and column of extra
	  heightpoints to the segment to make it easier to render.

2003-01-31  Al Riddoch  <alriddoch@zepler.org>

	* Convert to using pkg-config

2003-01-28  Al Riddoch  <alriddoch@zepler.org>

	* src/Segment.cpp, src/Segment.h: Fully implement qRMD with roughness
	  and falloff.

2003-01-28  Al Riddoch  <alriddoch@zepler.org>

	* src/Segment.cpp, src/Segment.h: First stab at qRMD algorithm.

2003-01-28  Al Riddoch  <alriddoch@zepler.org>

	* src/Terrain.cpp: Fix segment dependencies.

2003-01-28  Al Riddoch  <alriddoch@zepler.org>

	* src/Segment.cpp, src/Segment.h, src/Terrain.cpp: Implement
	  midpoint based terrain algorithm, currently without any
	  displacement.

2003-01-20  Al Riddoch  <alriddoch@zepler.org>

	* src/Segment.cpp, src/Segment.h, src/Terrain.cpp, src/Terrain.h:
	  Switch to using floats instead of doubles internally for performance.

2003-01-19  Al Riddoch  <alriddoch@zepler.org>

	* src/Segment.h, src/Segment.cpp: Add class for terrain segment, which
	  currently contains an interpolated sloped area.

	* src/Terrain.h, src/Terrain.cpp: Add functionality required to manage
	  segments in the terrain.
