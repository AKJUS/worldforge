// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubTerrainProperty_custom.h file.

#ifndef STUB_RULES_SIMULATION_TERRAINPROPERTY_H
#define STUB_RULES_SIMULATION_TERRAINPROPERTY_H

#include "rules/simulation/TerrainProperty.h"
#include "stubTerrainProperty_custom.h"

#ifndef STUB_TerrainProperty_createShaders
//#define STUB_TerrainProperty_createShaders
  std::pair<std::unique_ptr<Mercator::TileShader>, std::vector<std::string>> TerrainProperty::createShaders(const Atlas::Message::ListType& surfaceList) const
  {
    return *static_cast<std::pair<std::unique_ptr<Mercator::TileShader>, std::vector<std::string>>*>(nullptr);
  }
#endif //STUB_TerrainProperty_createShaders

#ifndef STUB_TerrainProperty_applyToState
//#define STUB_TerrainProperty_applyToState
  void TerrainProperty::applyToState(LocatedEntity& entity, State& state) const
  {
    
  }
#endif //STUB_TerrainProperty_applyToState

#ifndef STUB_TerrainProperty_install
//#define STUB_TerrainProperty_install
  void TerrainProperty::install(LocatedEntity& owner, const std::string& name)
  {
    
  }
#endif //STUB_TerrainProperty_install

#ifndef STUB_TerrainProperty_remove
//#define STUB_TerrainProperty_remove
  void TerrainProperty::remove(LocatedEntity& owner, const std::string& name)
  {
    
  }
#endif //STUB_TerrainProperty_remove

#ifndef STUB_TerrainProperty_copy
//#define STUB_TerrainProperty_copy
  TerrainProperty* TerrainProperty::copy() const
  {
    return nullptr;
  }
#endif //STUB_TerrainProperty_copy

#ifndef STUB_TerrainProperty_apply
//#define STUB_TerrainProperty_apply
  void TerrainProperty::apply(LocatedEntity& entity)
  {
    
  }
#endif //STUB_TerrainProperty_apply

#ifndef STUB_TerrainProperty_getHeightAndNormal
//#define STUB_TerrainProperty_getHeightAndNormal
  bool TerrainProperty::getHeightAndNormal(LocatedEntity& entity, float x, float z, float&, Vector3D&) const
  {
    return false;
  }
#endif //STUB_TerrainProperty_getHeightAndNormal

#ifndef STUB_TerrainProperty_getHeight
//#define STUB_TerrainProperty_getHeight
  bool TerrainProperty::getHeight(LocatedEntity& entity, float x, float z, float&) const
  {
    return false;
  }
#endif //STUB_TerrainProperty_getHeight

#ifndef STUB_TerrainProperty_getSurface
//#define STUB_TerrainProperty_getSurface
  boost::optional<int> TerrainProperty::getSurface(LocatedEntity& entity, float x, float z) const
  {
    return *static_cast<boost::optional<int>*>(nullptr);
  }
#endif //STUB_TerrainProperty_getSurface

#ifndef STUB_TerrainProperty_findMods
//#define STUB_TerrainProperty_findMods
  boost::optional<std::vector<LocatedEntity*>> TerrainProperty::findMods(LocatedEntity& entity, float x, float z) const
  {
    return *static_cast<boost::optional<std::vector<LocatedEntity*>>*>(nullptr);
  }
#endif //STUB_TerrainProperty_findMods

#ifndef STUB_TerrainProperty_getData
//#define STUB_TerrainProperty_getData
  Mercator::Terrain& TerrainProperty::getData(const LocatedEntity& entity)
  {
    return *static_cast<Mercator::Terrain*>(nullptr);
  }
#endif //STUB_TerrainProperty_getData

#ifndef STUB_TerrainProperty_getData
//#define STUB_TerrainProperty_getData
  Mercator::Terrain& TerrainProperty::getData(const LocatedEntity& entity) const
  {
    return *static_cast<Mercator::Terrain*>(nullptr);
  }
#endif //STUB_TerrainProperty_getData

#ifndef STUB_TerrainProperty_getSurfaceNames
//#define STUB_TerrainProperty_getSurfaceNames
  const std::vector<std::string>& TerrainProperty::getSurfaceNames(const LocatedEntity& entity) const
  {
    static std::vector<std::string> instance; return instance;
  }
#endif //STUB_TerrainProperty_getSurfaceNames


#endif