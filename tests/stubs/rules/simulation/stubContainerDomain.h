// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubContainerDomain_custom.h file.

#ifndef STUB_RULES_SIMULATION_CONTAINERDOMAIN_H
#define STUB_RULES_SIMULATION_CONTAINERDOMAIN_H

#include "rules/simulation/ContainerDomain.h"
#include "stubContainerDomain_custom.h"

#ifndef STUB_ContainerDomain_ContainerDomain
//#define STUB_ContainerDomain_ContainerDomain
   ContainerDomain::ContainerDomain(LocatedEntity& entity)
    : Domain(entity)
    , mContainerAccessProperty(nullptr)
  {
    
  }
#endif //STUB_ContainerDomain_ContainerDomain

#ifndef STUB_ContainerDomain_isEntityVisibleFor
//#define STUB_ContainerDomain_isEntityVisibleFor
  bool ContainerDomain::isEntityVisibleFor(const LocatedEntity& observingEntity, const LocatedEntity& observedEntity) const
  {
    return false;
  }
#endif //STUB_ContainerDomain_isEntityVisibleFor

#ifndef STUB_ContainerDomain_getVisibleEntitiesFor
//#define STUB_ContainerDomain_getVisibleEntitiesFor
  void ContainerDomain::getVisibleEntitiesFor(const LocatedEntity& observingEntity, std::list<LocatedEntity*>& entityList) const
  {
    
  }
#endif //STUB_ContainerDomain_getVisibleEntitiesFor

#ifndef STUB_ContainerDomain_getObservingEntitiesFor
//#define STUB_ContainerDomain_getObservingEntitiesFor
  std::list<LocatedEntity*> ContainerDomain::getObservingEntitiesFor(const LocatedEntity& observedEntity) const
  {
    return std::list<LocatedEntity*>();
  }
#endif //STUB_ContainerDomain_getObservingEntitiesFor

#ifndef STUB_ContainerDomain_addEntity
//#define STUB_ContainerDomain_addEntity
  void ContainerDomain::addEntity(LocatedEntity& entity)
  {
    
  }
#endif //STUB_ContainerDomain_addEntity

#ifndef STUB_ContainerDomain_removeEntity
//#define STUB_ContainerDomain_removeEntity
  void ContainerDomain::removeEntity(LocatedEntity& entity)
  {
    
  }
#endif //STUB_ContainerDomain_removeEntity

#ifndef STUB_ContainerDomain_isEntityReachable
//#define STUB_ContainerDomain_isEntityReachable
  bool ContainerDomain::isEntityReachable(const LocatedEntity& reachingEntity, float reach, const LocatedEntity& queriedEntity, const WFMath::Point<3>& positionOnQueriedEntity) const
  {
    return false;
  }
#endif //STUB_ContainerDomain_isEntityReachable

#ifndef STUB_ContainerDomain_queryCollision
//#define STUB_ContainerDomain_queryCollision
  std::vector<CollisionEntry> ContainerDomain::queryCollision(const WFMath::Ball<3>& sphere) const
  {
    return std::vector<CollisionEntry>();
  }
#endif //STUB_ContainerDomain_queryCollision

#ifndef STUB_ContainerDomain_observeCloseness
//#define STUB_ContainerDomain_observeCloseness
  boost::optional<std::function<()>> ContainerDomain::observeCloseness(LocatedEntity& reacher, LocatedEntity& target, double reach, std::function<void()> callback)
  {
    return *static_cast<boost::optional<std::function<()>>*>(nullptr);
  }
#endif //STUB_ContainerDomain_observeCloseness

#ifndef STUB_ContainerDomain_setObservers
//#define STUB_ContainerDomain_setObservers
  void ContainerDomain::setObservers(std::vector<std::string> observerIds)
  {
    
  }
#endif //STUB_ContainerDomain_setObservers

#ifndef STUB_ContainerDomain_hasObserverRegistered
//#define STUB_ContainerDomain_hasObserverRegistered
  bool ContainerDomain::hasObserverRegistered(const LocatedEntity& entity) const
  {
    return false;
  }
#endif //STUB_ContainerDomain_hasObserverRegistered

#ifndef STUB_ContainerDomain_removed
//#define STUB_ContainerDomain_removed
  void ContainerDomain::removed()
  {
    
  }
#endif //STUB_ContainerDomain_removed

#ifndef STUB_ContainerDomain_addObserver
//#define STUB_ContainerDomain_addObserver
  void ContainerDomain::addObserver(std::string& entityId)
  {
    
  }
#endif //STUB_ContainerDomain_addObserver

#ifndef STUB_ContainerDomain_removeObserver
//#define STUB_ContainerDomain_removeObserver
  void ContainerDomain::removeObserver(const std::basic_string<char>& entityId)
  {
    
  }
#endif //STUB_ContainerDomain_removeObserver


#endif