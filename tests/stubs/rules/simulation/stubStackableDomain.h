// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubStackableDomain_custom.h file.

#ifndef STUB_RULES_SIMULATION_STACKABLEDOMAIN_H
#define STUB_RULES_SIMULATION_STACKABLEDOMAIN_H

#include "rules/simulation/StackableDomain.h"
#include "stubStackableDomain_custom.h"

#ifndef STUB_StackableDomain_StackableDomain
//#define STUB_StackableDomain_StackableDomain
   StackableDomain::StackableDomain(LocatedEntity& entity)
    : Domain(entity)
  {
    
  }
#endif //STUB_StackableDomain_StackableDomain

#ifndef STUB_StackableDomain_isEntityVisibleFor
//#define STUB_StackableDomain_isEntityVisibleFor
  bool StackableDomain::isEntityVisibleFor(const LocatedEntity& observingEntity, const LocatedEntity& observedEntity) const
  {
    return false;
  }
#endif //STUB_StackableDomain_isEntityVisibleFor

#ifndef STUB_StackableDomain_getVisibleEntitiesFor
//#define STUB_StackableDomain_getVisibleEntitiesFor
  void StackableDomain::getVisibleEntitiesFor(const LocatedEntity& observingEntity, std::list<LocatedEntity*>& entityList) const
  {
    
  }
#endif //STUB_StackableDomain_getVisibleEntitiesFor

#ifndef STUB_StackableDomain_getObservingEntitiesFor
//#define STUB_StackableDomain_getObservingEntitiesFor
  std::list<LocatedEntity*> StackableDomain::getObservingEntitiesFor(const LocatedEntity& observedEntity) const
  {
    return std::list<LocatedEntity*>();
  }
#endif //STUB_StackableDomain_getObservingEntitiesFor

#ifndef STUB_StackableDomain_addEntity
//#define STUB_StackableDomain_addEntity
  void StackableDomain::addEntity(LocatedEntity& entity)
  {
    
  }
#endif //STUB_StackableDomain_addEntity

#ifndef STUB_StackableDomain_removeEntity
//#define STUB_StackableDomain_removeEntity
  void StackableDomain::removeEntity(LocatedEntity& entity)
  {
    
  }
#endif //STUB_StackableDomain_removeEntity

#ifndef STUB_StackableDomain_isEntityReachable
//#define STUB_StackableDomain_isEntityReachable
  bool StackableDomain::isEntityReachable(const LocatedEntity& reachingEntity, float reach, const LocatedEntity& queriedEntity, const WFMath::Point<3>& positionOnQueriedEntity) const
  {
    return false;
  }
#endif //STUB_StackableDomain_isEntityReachable

#ifndef STUB_StackableDomain_installDelegates
//#define STUB_StackableDomain_installDelegates
  void StackableDomain::installDelegates(LocatedEntity* entity, const std::string& propertyName)
  {
    
  }
#endif //STUB_StackableDomain_installDelegates

#ifndef STUB_StackableDomain_operation
//#define STUB_StackableDomain_operation
  HandlerResult StackableDomain::operation(LocatedEntity* entity, const Operation& op, OpVector& res)
  {
    return *static_cast<HandlerResult*>(nullptr);
  }
#endif //STUB_StackableDomain_operation

#ifndef STUB_StackableDomain_checkEntitiesStackable
//#define STUB_StackableDomain_checkEntitiesStackable
   bool StackableDomain::checkEntitiesStackable(const LocatedEntity& first, const LocatedEntity& second)
  {
    return false;
  }
#endif //STUB_StackableDomain_checkEntitiesStackable

#ifndef STUB_StackableDomain_stackIfPossible
//#define STUB_StackableDomain_stackIfPossible
   bool StackableDomain::stackIfPossible(const LocatedEntity& domainEntity, LocatedEntity& entity)
  {
    return false;
  }
#endif //STUB_StackableDomain_stackIfPossible

#ifndef STUB_StackableDomain_observeCloseness
//#define STUB_StackableDomain_observeCloseness
  boost::optional<std::function<()>> StackableDomain::observeCloseness(LocatedEntity& reacher, LocatedEntity& target, double reach, std::function<void()> callback)
  {
    return *static_cast<boost::optional<std::function<()>>*>(nullptr);
  }
#endif //STUB_StackableDomain_observeCloseness

#ifndef STUB_StackableDomain_DeleteOperation
//#define STUB_StackableDomain_DeleteOperation
  HandlerResult StackableDomain::DeleteOperation(LocatedEntity* owner, const Operation& op, OpVector& res)
  {
    return *static_cast<HandlerResult*>(nullptr);
  }
#endif //STUB_StackableDomain_DeleteOperation

#ifndef STUB_StackableDomain_MoveOperation
//#define STUB_StackableDomain_MoveOperation
  HandlerResult StackableDomain::MoveOperation(LocatedEntity* owner, const Operation& op, OpVector& res)
  {
    return *static_cast<HandlerResult*>(nullptr);
  }
#endif //STUB_StackableDomain_MoveOperation


#endif