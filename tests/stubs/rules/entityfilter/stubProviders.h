// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubProviders_custom.h file.

#ifndef STUB_RULES_ENTITYFILTER_PROVIDERS_H
#define STUB_RULES_ENTITYFILTER_PROVIDERS_H

#include "rules/entityfilter/Providers.h"
#include "stubProviders_custom.h"

namespace EntityFilter {


}  // namespace EntityFilter

namespace EntityFilter {


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_TypedProvider_getType
//#define STUB_TypedProvider_getType
  const std::type_info* TypedProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_TypedProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_Consumer_value
//#define STUB_Consumer_value
  template <typename T>
  void Consumer<T>::value(Atlas::Message::Element& value, const T& parent_value) const
  {
    
  }
#endif //STUB_Consumer_value

#ifndef STUB_Consumer_getType
//#define STUB_Consumer_getType
  template <typename T>
  const std::type_info* Consumer<T>::getType() const
  {
    return nullptr;
  }
#endif //STUB_Consumer_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ProviderBase_ProviderBase
//#define STUB_ProviderBase_ProviderBase
  template <typename T>
   ProviderBase<T>::ProviderBase(std::shared_ptr<Consumer<T>> consumer)
  {
    
  }
#endif //STUB_ProviderBase_ProviderBase

#ifndef STUB_ProviderBase_ProviderBase_DTOR
//#define STUB_ProviderBase_ProviderBase_DTOR
  template <typename T>
   ProviderBase<T>::~ProviderBase()
  {
    
  }
#endif //STUB_ProviderBase_ProviderBase_DTOR


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ConsumingProviderBase_ConsumingProviderBase
//#define STUB_ConsumingProviderBase_ConsumingProviderBase
  template <typename TProviding,typename TConsuming>
   ConsumingProviderBase<TProviding,TConsuming>::ConsumingProviderBase(std::shared_ptr<Consumer<TProviding>> consumer)
    : ProviderBase(consumer)
  {
    
  }
#endif //STUB_ConsumingProviderBase_ConsumingProviderBase

#ifndef STUB_ConsumingProviderBase_getType
//#define STUB_ConsumingProviderBase_getType
  template <typename TProviding,typename TConsuming>
  const std::type_info* ConsumingProviderBase<TProviding,TConsuming>::getType() const
  {
    return nullptr;
  }
#endif //STUB_ConsumingProviderBase_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_NamedAttributeProviderBase_NamedAttributeProviderBase
//#define STUB_NamedAttributeProviderBase_NamedAttributeProviderBase
  template <typename T>
   NamedAttributeProviderBase<T>::NamedAttributeProviderBase(std::shared_ptr<Consumer<T>> consumer, std::string attribute_name)
    : ProviderBase(consumer, attribute_name)
  {
    
  }
#endif //STUB_NamedAttributeProviderBase_NamedAttributeProviderBase


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ConsumingNamedAttributeProviderBase_ConsumingNamedAttributeProviderBase
//#define STUB_ConsumingNamedAttributeProviderBase_ConsumingNamedAttributeProviderBase
  template <typename TProviding,typename TConsuming>
   ConsumingNamedAttributeProviderBase<TProviding,TConsuming>::ConsumingNamedAttributeProviderBase(std::shared_ptr<Consumer<TProviding>> consumer, const std::string& attribute_name)
    : NamedAttributeProviderBase(consumer, attribute_name)
  {
    
  }
#endif //STUB_ConsumingNamedAttributeProviderBase_ConsumingNamedAttributeProviderBase

#ifndef STUB_ConsumingNamedAttributeProviderBase_getType
//#define STUB_ConsumingNamedAttributeProviderBase_getType
  template <typename TProviding,typename TConsuming>
  const std::type_info* ConsumingNamedAttributeProviderBase<TProviding,TConsuming>::getType() const
  {
    return nullptr;
  }
#endif //STUB_ConsumingNamedAttributeProviderBase_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_FixedElementProvider_FixedElementProvider
//#define STUB_FixedElementProvider_FixedElementProvider
   FixedElementProvider::FixedElementProvider(Atlas::Message::Element element)
    : Consumer(element)
  {
    
  }
#endif //STUB_FixedElementProvider_FixedElementProvider

#ifndef STUB_FixedElementProvider_value
//#define STUB_FixedElementProvider_value
  void FixedElementProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_FixedElementProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_DynamicTypeNodeProvider_DynamicTypeNodeProvider
//#define STUB_DynamicTypeNodeProvider_DynamicTypeNodeProvider
   DynamicTypeNodeProvider::DynamicTypeNodeProvider(std::shared_ptr<Consumer<TypeNode>> consumer, std::string type)
    : ConsumingProviderBase(consumer, type)
  {
    
  }
#endif //STUB_DynamicTypeNodeProvider_DynamicTypeNodeProvider

#ifndef STUB_DynamicTypeNodeProvider_value
//#define STUB_DynamicTypeNodeProvider_value
  void DynamicTypeNodeProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_DynamicTypeNodeProvider_value

#ifndef STUB_DynamicTypeNodeProvider_getType
//#define STUB_DynamicTypeNodeProvider_getType
  const std::type_info* DynamicTypeNodeProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_DynamicTypeNodeProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_FixedTypeNodeProvider_FixedTypeNodeProvider
//#define STUB_FixedTypeNodeProvider_FixedTypeNodeProvider
   FixedTypeNodeProvider::FixedTypeNodeProvider(std::shared_ptr<Consumer<TypeNode>> consumer, const TypeNode& type)
    : ConsumingProviderBase(consumer, type)
  {
    
  }
#endif //STUB_FixedTypeNodeProvider_FixedTypeNodeProvider

#ifndef STUB_FixedTypeNodeProvider_value
//#define STUB_FixedTypeNodeProvider_value
  void FixedTypeNodeProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_FixedTypeNodeProvider_value

#ifndef STUB_FixedTypeNodeProvider_getType
//#define STUB_FixedTypeNodeProvider_getType
  const std::type_info* FixedTypeNodeProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_FixedTypeNodeProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_MemoryProvider_MemoryProvider
//#define STUB_MemoryProvider_MemoryProvider
   MemoryProvider::MemoryProvider(std::shared_ptr<Consumer<Atlas::Message::Element>> consumer)
    : ConsumingProviderBase(consumer)
  {
    
  }
#endif //STUB_MemoryProvider_MemoryProvider

#ifndef STUB_MemoryProvider_value
//#define STUB_MemoryProvider_value
  void MemoryProvider::value(Atlas::Message::Element& value, const QueryContext&) const
  {
    
  }
#endif //STUB_MemoryProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_EntityProvider_EntityProvider
//#define STUB_EntityProvider_EntityProvider
   EntityProvider::EntityProvider(std::shared_ptr<Consumer<LocatedEntity>> consumer)
    : ConsumingProviderBase(consumer)
  {
    
  }
#endif //STUB_EntityProvider_EntityProvider

#ifndef STUB_EntityProvider_value
//#define STUB_EntityProvider_value
  void EntityProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_EntityProvider_value

#ifndef STUB_EntityProvider_getType
//#define STUB_EntityProvider_getType
  const std::type_info* EntityProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_EntityProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_EntityLocationProvider_EntityLocationProvider
//#define STUB_EntityLocationProvider_EntityLocationProvider
   EntityLocationProvider::EntityLocationProvider(std::shared_ptr<Consumer<LocatedEntity>> consumer)
    : ConsumingProviderBase(consumer)
  {
    
  }
#endif //STUB_EntityLocationProvider_EntityLocationProvider

#ifndef STUB_EntityLocationProvider_value
//#define STUB_EntityLocationProvider_value
  void EntityLocationProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_EntityLocationProvider_value

#ifndef STUB_EntityLocationProvider_getType
//#define STUB_EntityLocationProvider_getType
  const std::type_info* EntityLocationProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_EntityLocationProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ActorProvider_ActorProvider
//#define STUB_ActorProvider_ActorProvider
   ActorProvider::ActorProvider(std::shared_ptr<Consumer<LocatedEntity>> consumer)
    : EntityProvider(consumer)
  {
    
  }
#endif //STUB_ActorProvider_ActorProvider

#ifndef STUB_ActorProvider_value
//#define STUB_ActorProvider_value
  void ActorProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_ActorProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ToolProvider_ToolProvider
//#define STUB_ToolProvider_ToolProvider
   ToolProvider::ToolProvider(std::shared_ptr<Consumer<LocatedEntity>> consumer)
    : EntityProvider(consumer)
  {
    
  }
#endif //STUB_ToolProvider_ToolProvider

#ifndef STUB_ToolProvider_value
//#define STUB_ToolProvider_value
  void ToolProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_ToolProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ChildProvider_ChildProvider
//#define STUB_ChildProvider_ChildProvider
   ChildProvider::ChildProvider(std::shared_ptr<Consumer<LocatedEntity>> consumer)
    : EntityProvider(consumer)
  {
    
  }
#endif //STUB_ChildProvider_ChildProvider

#ifndef STUB_ChildProvider_value
//#define STUB_ChildProvider_value
  void ChildProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_ChildProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_SelfEntityProvider_SelfEntityProvider
//#define STUB_SelfEntityProvider_SelfEntityProvider
   SelfEntityProvider::SelfEntityProvider(std::shared_ptr<Consumer<LocatedEntity>> consumer)
    : ConsumingProviderBase(consumer)
  {
    
  }
#endif //STUB_SelfEntityProvider_SelfEntityProvider

#ifndef STUB_SelfEntityProvider_value
//#define STUB_SelfEntityProvider_value
  void SelfEntityProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_SelfEntityProvider_value

#ifndef STUB_SelfEntityProvider_getType
//#define STUB_SelfEntityProvider_getType
  const std::type_info* SelfEntityProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_SelfEntityProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_EntityTypeProvider_EntityTypeProvider
//#define STUB_EntityTypeProvider_EntityTypeProvider
   EntityTypeProvider::EntityTypeProvider(std::shared_ptr<Consumer<TypeNode>> consumer)
    : ConsumingProviderBase(consumer)
  {
    
  }
#endif //STUB_EntityTypeProvider_EntityTypeProvider

#ifndef STUB_EntityTypeProvider_value
//#define STUB_EntityTypeProvider_value
  void EntityTypeProvider::value(Atlas::Message::Element& value, const LocatedEntity& entity) const
  {
    
  }
#endif //STUB_EntityTypeProvider_value

#ifndef STUB_EntityTypeProvider_getType
//#define STUB_EntityTypeProvider_getType
  const std::type_info* EntityTypeProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_EntityTypeProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_EntityIdProvider_value
//#define STUB_EntityIdProvider_value
  void EntityIdProvider::value(Atlas::Message::Element& value, const LocatedEntity& entity) const
  {
    
  }
#endif //STUB_EntityIdProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_TypeNodeProvider_TypeNodeProvider
//#define STUB_TypeNodeProvider_TypeNodeProvider
   TypeNodeProvider::TypeNodeProvider(std::string attribute_name)
    : Consumer(attribute_name)
  {
    
  }
#endif //STUB_TypeNodeProvider_TypeNodeProvider

#ifndef STUB_TypeNodeProvider_value
//#define STUB_TypeNodeProvider_value
  void TypeNodeProvider::value(Atlas::Message::Element& value, const TypeNode& type) const
  {
    
  }
#endif //STUB_TypeNodeProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_BBoxProvider_BBoxProvider
//#define STUB_BBoxProvider_BBoxProvider
   BBoxProvider::BBoxProvider(std::shared_ptr<Consumer<Atlas::Message::Element>> consumer, Measurement measurement)
    : ConsumingProviderBase(consumer, measurement)
  {
    
  }
#endif //STUB_BBoxProvider_BBoxProvider

#ifndef STUB_BBoxProvider_value
//#define STUB_BBoxProvider_value
  void BBoxProvider::value(Atlas::Message::Element& value, const LocatedEntity& prop) const
  {
    
  }
#endif //STUB_BBoxProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_PropertyProvider_PropertyProvider
//#define STUB_PropertyProvider_PropertyProvider
  template <typename TProperty>
   PropertyProvider<TProperty>::PropertyProvider(std::shared_ptr<Consumer<TProperty>> consumer, const std::string& attribute_name)
    : ConsumingNamedAttributeProviderBase(consumer, attribute_name)
  {
    
  }
#endif //STUB_PropertyProvider_PropertyProvider

#ifndef STUB_PropertyProvider_value
//#define STUB_PropertyProvider_value
  template <typename TProperty>
  void PropertyProvider<TProperty>::value(Atlas::Message::Element& value, const LocatedEntity& entity) const
  {
    
  }
#endif //STUB_PropertyProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_SoftPropertyProvider_SoftPropertyProvider
//#define STUB_SoftPropertyProvider_SoftPropertyProvider
   SoftPropertyProvider::SoftPropertyProvider(std::shared_ptr<Consumer<Atlas::Message::Element>> consumer, const std::string& attribute_name)
    : ConsumingNamedAttributeProviderBase(consumer, attribute_name)
  {
    
  }
#endif //STUB_SoftPropertyProvider_SoftPropertyProvider

#ifndef STUB_SoftPropertyProvider_value
//#define STUB_SoftPropertyProvider_value
  void SoftPropertyProvider::value(Atlas::Message::Element& value, const LocatedEntity& entity) const
  {
    
  }
#endif //STUB_SoftPropertyProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_MapProvider_MapProvider
//#define STUB_MapProvider_MapProvider
   MapProvider::MapProvider(std::shared_ptr<Consumer<Atlas::Message::Element>> consumer, const std::string& attribute_name)
    : ConsumingNamedAttributeProviderBase(consumer, attribute_name)
  {
    
  }
#endif //STUB_MapProvider_MapProvider

#ifndef STUB_MapProvider_value
//#define STUB_MapProvider_value
  void MapProvider::value(Atlas::Message::Element& value, const Atlas::Message::Element& parent_element) const
  {
    
  }
#endif //STUB_MapProvider_value


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ContainsProvider_value
//#define STUB_ContainsProvider_value
  void ContainsProvider::value(Atlas::Message::Element& value, const LocatedEntity& entity) const
  {
    
  }
#endif //STUB_ContainsProvider_value

#ifndef STUB_ContainsProvider_getType
//#define STUB_ContainsProvider_getType
  const std::type_info* ContainsProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_ContainsProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ContainsRecursiveFunctionProvider_ContainsRecursiveFunctionProvider
//#define STUB_ContainsRecursiveFunctionProvider_ContainsRecursiveFunctionProvider
   ContainsRecursiveFunctionProvider::ContainsRecursiveFunctionProvider(std::shared_ptr<Consumer<QueryContext>> container, std::shared_ptr<Predicate> condition, bool recursive)
    : Consumer(container, condition, recursive)
  {
    
  }
#endif //STUB_ContainsRecursiveFunctionProvider_ContainsRecursiveFunctionProvider

#ifndef STUB_ContainsRecursiveFunctionProvider_value
//#define STUB_ContainsRecursiveFunctionProvider_value
  void ContainsRecursiveFunctionProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_ContainsRecursiveFunctionProvider_value

#ifndef STUB_ContainsRecursiveFunctionProvider_checkContainer
//#define STUB_ContainsRecursiveFunctionProvider_checkContainer
  bool ContainsRecursiveFunctionProvider::checkContainer(LocatedEntitySet* container, const QueryContext& context) const
  {
    return false;
  }
#endif //STUB_ContainsRecursiveFunctionProvider_checkContainer


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_GetEntityFunctionProvider_GetEntityFunctionProvider
//#define STUB_GetEntityFunctionProvider_GetEntityFunctionProvider
   GetEntityFunctionProvider::GetEntityFunctionProvider(std::shared_ptr<Consumer<QueryContext>> entity_provider, std::shared_ptr<Consumer<LocatedEntity>> consumer)
    : ConsumingProviderBase(entity_provider, consumer)
  {
    
  }
#endif //STUB_GetEntityFunctionProvider_GetEntityFunctionProvider

#ifndef STUB_GetEntityFunctionProvider_value
//#define STUB_GetEntityFunctionProvider_value
  void GetEntityFunctionProvider::value(Atlas::Message::Element& value, const QueryContext& context) const
  {
    
  }
#endif //STUB_GetEntityFunctionProvider_value

#ifndef STUB_GetEntityFunctionProvider_getType
//#define STUB_GetEntityFunctionProvider_getType
  const std::type_info* GetEntityFunctionProvider::getType() const
  {
    return nullptr;
  }
#endif //STUB_GetEntityFunctionProvider_getType


}  // namespace EntityFilter

namespace EntityFilter {

#ifndef STUB_ProviderFactory_createProviders
//#define STUB_ProviderFactory_createProviders
  std::shared_ptr<Consumer<QueryContext>> ProviderFactory::createProviders(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<Consumer<QueryContext>>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createProviders

#ifndef STUB_ProviderFactory_createProvider
//#define STUB_ProviderFactory_createProvider
  std::shared_ptr<Consumer<QueryContext>> ProviderFactory::createProvider(Segment segment) const
  {
    return *static_cast<std::shared_ptr<Consumer<QueryContext>>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createProvider

#ifndef STUB_ProviderFactory_createSimpleGetEntityFunctionProvider
//#define STUB_ProviderFactory_createSimpleGetEntityFunctionProvider
  std::shared_ptr<Consumer<QueryContext>> ProviderFactory::createSimpleGetEntityFunctionProvider(std::shared_ptr<Consumer<QueryContext>> entity_provider) const
  {
    return *static_cast<std::shared_ptr<Consumer<QueryContext>>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createSimpleGetEntityFunctionProvider

#ifndef STUB_ProviderFactory_createGetEntityFunctionProvider
//#define STUB_ProviderFactory_createGetEntityFunctionProvider
  std::shared_ptr<Consumer<QueryContext>> ProviderFactory::createGetEntityFunctionProvider(std::shared_ptr<Consumer<QueryContext>> entity_provider, SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<Consumer<QueryContext>>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createGetEntityFunctionProvider

#ifndef STUB_ProviderFactory_createDynamicTypeNodeProvider
//#define STUB_ProviderFactory_createDynamicTypeNodeProvider
  std::shared_ptr<DynamicTypeNodeProvider> ProviderFactory::createDynamicTypeNodeProvider(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<DynamicTypeNodeProvider>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createDynamicTypeNodeProvider

#ifndef STUB_ProviderFactory_createEntityProvider
//#define STUB_ProviderFactory_createEntityProvider
  std::shared_ptr<T> ProviderFactory::createEntityProvider(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<T>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createEntityProvider

#ifndef STUB_ProviderFactory_createSelfEntityProvider
//#define STUB_ProviderFactory_createSelfEntityProvider
  std::shared_ptr<SelfEntityProvider> ProviderFactory::createSelfEntityProvider(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<SelfEntityProvider>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createSelfEntityProvider

#ifndef STUB_ProviderFactory_createBBoxProvider
//#define STUB_ProviderFactory_createBBoxProvider
  std::shared_ptr<BBoxProvider> ProviderFactory::createBBoxProvider(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<BBoxProvider>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createBBoxProvider

#ifndef STUB_ProviderFactory_createPropertyProvider
//#define STUB_ProviderFactory_createPropertyProvider
  std::shared_ptr<Consumer<LocatedEntity>> ProviderFactory::createPropertyProvider(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<Consumer<LocatedEntity>>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createPropertyProvider

#ifndef STUB_ProviderFactory_createMapProvider
//#define STUB_ProviderFactory_createMapProvider
  std::shared_ptr<MapProvider> ProviderFactory::createMapProvider(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<MapProvider>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createMapProvider

#ifndef STUB_ProviderFactory_createTypeNodeProvider
//#define STUB_ProviderFactory_createTypeNodeProvider
  std::shared_ptr<TypeNodeProvider> ProviderFactory::createTypeNodeProvider(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<TypeNodeProvider>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createTypeNodeProvider

#ifndef STUB_ProviderFactory_createMemoryProvider
//#define STUB_ProviderFactory_createMemoryProvider
  std::shared_ptr<MemoryProvider> ProviderFactory::createMemoryProvider(SegmentsList segments) const
  {
    return *static_cast<std::shared_ptr<MemoryProvider>*>(nullptr);
  }
#endif //STUB_ProviderFactory_createMemoryProvider


}  // namespace EntityFilter

#endif