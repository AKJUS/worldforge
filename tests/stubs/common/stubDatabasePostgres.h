// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubDatabasePostgres_custom.h file.

#include "common/DatabasePostgres.h"
#include "stubDatabasePostgres_custom.h"

#ifndef STUB_COMMON_DATABASEPOSTGRES_H
#define STUB_COMMON_DATABASEPOSTGRES_H

#ifndef STUB_DatabasePostgres_tuplesOk
//#define STUB_DatabasePostgres_tuplesOk
  bool DatabasePostgres::tuplesOk()
  {
    return false;
  }
#endif //STUB_DatabasePostgres_tuplesOk

#ifndef STUB_DatabasePostgres_commandOk
//#define STUB_DatabasePostgres_commandOk
  int DatabasePostgres::commandOk()
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_commandOk

#ifndef STUB_DatabasePostgres_DatabasePostgres
//#define STUB_DatabasePostgres_DatabasePostgres
   DatabasePostgres::DatabasePostgres()
    : Database()
    , m_connection(nullptr)
  {
    
  }
#endif //STUB_DatabasePostgres_DatabasePostgres

#ifndef STUB_DatabasePostgres_DatabasePostgres_DTOR
//#define STUB_DatabasePostgres_DatabasePostgres_DTOR
   DatabasePostgres::~DatabasePostgres()
  {
    
  }
#endif //STUB_DatabasePostgres_DatabasePostgres_DTOR

#ifndef STUB_DatabasePostgres_initConnection
//#define STUB_DatabasePostgres_initConnection
  int DatabasePostgres::initConnection()
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_initConnection

#ifndef STUB_DatabasePostgres_shutdownConnection
//#define STUB_DatabasePostgres_shutdownConnection
  void DatabasePostgres::shutdownConnection()
  {
    
  }
#endif //STUB_DatabasePostgres_shutdownConnection

#ifndef STUB_DatabasePostgres_getObject
//#define STUB_DatabasePostgres_getObject
  int DatabasePostgres::getObject(const std::string& table, const std::string& key, Atlas::Message::MapType&)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_getObject

#ifndef STUB_DatabasePostgres_encodeObject
//#define STUB_DatabasePostgres_encodeObject
  int DatabasePostgres::encodeObject(const Atlas::Message::MapType&, std::string&)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_encodeObject

#ifndef STUB_DatabasePostgres_reportError
//#define STUB_DatabasePostgres_reportError
  void DatabasePostgres::reportError()
  {
    
  }
#endif //STUB_DatabasePostgres_reportError

#ifndef STUB_DatabasePostgres_connect
//#define STUB_DatabasePostgres_connect
  int DatabasePostgres::connect(const std::string& context, std::string& error_msg)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_connect

#ifndef STUB_DatabasePostgres_runSimpleSelectQuery
//#define STUB_DatabasePostgres_runSimpleSelectQuery
  DatabaseResult DatabasePostgres::runSimpleSelectQuery(const std::string& query)
  {
    return *static_cast<DatabaseResult*>(nullptr);
  }
#endif //STUB_DatabasePostgres_runSimpleSelectQuery

#ifndef STUB_DatabasePostgres_runCommandQuery
//#define STUB_DatabasePostgres_runCommandQuery
  int DatabasePostgres::runCommandQuery(const std::string& query)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_runCommandQuery

#ifndef STUB_DatabasePostgres_registerRelation
//#define STUB_DatabasePostgres_registerRelation
  int DatabasePostgres::registerRelation(std::string& tablename, const std::string& sourcetable, const std::string& targettable, RelationType kind)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_registerRelation

#ifndef STUB_DatabasePostgres_registerThoughtsTable
//#define STUB_DatabasePostgres_registerThoughtsTable
  int DatabasePostgres::registerThoughtsTable()
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_registerThoughtsTable

#ifndef STUB_DatabasePostgres_registerEntityTable
//#define STUB_DatabasePostgres_registerEntityTable
  int DatabasePostgres::registerEntityTable(const std::map<std::string, int>& chunks)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_registerEntityTable

#ifndef STUB_DatabasePostgres_registerPropertyTable
//#define STUB_DatabasePostgres_registerPropertyTable
  int DatabasePostgres::registerPropertyTable()
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_registerPropertyTable

#ifndef STUB_DatabasePostgres_newId
//#define STUB_DatabasePostgres_newId
  long DatabasePostgres::newId(std::string& id)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_newId

#ifndef STUB_DatabasePostgres_registerEntityIdGenerator
//#define STUB_DatabasePostgres_registerEntityIdGenerator
  int DatabasePostgres::registerEntityIdGenerator()
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_registerEntityIdGenerator

#ifndef STUB_DatabasePostgres_registerSimpleTable
//#define STUB_DatabasePostgres_registerSimpleTable
  int DatabasePostgres::registerSimpleTable(const std::string& name, const Atlas::Message::MapType& row)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_registerSimpleTable

#ifndef STUB_DatabasePostgres_queryResult
//#define STUB_DatabasePostgres_queryResult
  void DatabasePostgres::queryResult(ExecStatusType status)
  {
    
  }
#endif //STUB_DatabasePostgres_queryResult

#ifndef STUB_DatabasePostgres_queryComplete
//#define STUB_DatabasePostgres_queryComplete
  void DatabasePostgres::queryComplete()
  {
    
  }
#endif //STUB_DatabasePostgres_queryComplete

#ifndef STUB_DatabasePostgres_scheduleCommand
//#define STUB_DatabasePostgres_scheduleCommand
  int DatabasePostgres::scheduleCommand(const std::string& query)
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_scheduleCommand

#ifndef STUB_DatabasePostgres_launchNewQuery
//#define STUB_DatabasePostgres_launchNewQuery
  int DatabasePostgres::launchNewQuery()
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_launchNewQuery

#ifndef STUB_DatabasePostgres_clearPendingQuery
//#define STUB_DatabasePostgres_clearPendingQuery
  int DatabasePostgres::clearPendingQuery()
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_clearPendingQuery

#ifndef STUB_DatabasePostgres_runMaintainance
//#define STUB_DatabasePostgres_runMaintainance
  int DatabasePostgres::runMaintainance(unsigned int command )
  {
    return 0;
  }
#endif //STUB_DatabasePostgres_runMaintainance



#endif