I'm trying to come up with a general class layout that all
(significant) classes will obey. Friend functions are included
under the corresponding section. Currently it's this:


Constructors and destructor

toString() and fromString() methods

operator=()

isEqualTo() method (can be skipped if class uses no floats, unlikely)

operator==(), operator!=()

Class initializers (e.g. zero() for Vector<>, origin() for Point<>, etc.)

operator<() (sort only, if comparison makes sense stick others here too)

math operators

other operators (e.g. operator[]())

other functions

dimension-specific constructors/operators/functions

Every class will also define a (non-friend) operator<<() in stream_funcs.h,
which will call the corresponding toString() method, and ToAtlas() and
FromAtlas() functions in atlas_funcs.h (in th atlas directory), which
may be implemented in any consistent way.
