What's happened is that the classes Eris::Coord, Eris::Bbox, and
Eris::Quaternion are no longer used by the rest of eris, and
need to be removed once people have converted over. To make this
easier, I've added conversion capabilities to these classes.

Eris::Coord
        constructors from WFMath::Point<3> and WFMath::Vector<3>
        member functions asPoint(), as Vector() which return the
                appropriate wfmath type

Eris::Bbox
        constructor from WFMath::AxisBox<3>
        member function asAxisBox(), returns a WFMath::AxisBox<3>

Eris::Quaternion
        constructor from WFMath::Quaternion
        member function asQuaternion(), returns a WFMath::Quaternion

These functions take care of most of the conversion. The remaining problems
are chiefly:

The "Moved" signal in Eris::Entity:
        The argument of the function passed to the signal has to be
        WFMath::Point<3> instead of Eris::Coord. Change your declaration,
        then convert to Eris::Coord once inside the function.

Accessing data members in an object directly from a function return:
        E.g. ((ErisEntity*) e)->getPosition().x. Either change to
        using wfmath style accessors, such as .x() or [0] (prefered),
        or add a conversion to the appropriate eris type.

Assignment from eris types via a constructor:
        E.g. foo = e->getPosition().x, where foo is of a type Foo
        which constructs from Eris::Coord. Either add a constructor
        for Foo from (in this case) WFMath::Point<3>, or do
        a typecast here.

This is enough to do a quick and dirty fix which will let you build.
To see what you need to do to get rid of the compatibility classes,
compile with -DWFMATH_CONVERSION. This removes the classes completely
so you can see what need to be changed over to wfmath types.
