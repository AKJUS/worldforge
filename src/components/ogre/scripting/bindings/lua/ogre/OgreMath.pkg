/*
-----------------------------------------------------------------------------
This source file is part of OGRE
    (Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org/

Copyright (c) 2000-2005 The OGRE Team
Also see acknowledgements in Readme.html

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt.
-----------------------------------------------------------------------------
*/


namespace Ogre
{
    /** Wrapper class which indicates a given angle value is in Radians.
    @remarks
        Radian values are interchangeable with Ogre::Degree values, and conversions
        will be done automatically between them.
    */
	class Radian
	{


		explicit Radian ( float r=0 );
	 	Radian ( const Ogre::Degree& d );
// 		const Ogre::Radian& operator = ( const float& f ) { mRad = f; return *this; }
// 		const Ogre::Radian& operator = ( const Ogre::Radian& r ) { mRad = r.mRad; return *this; }
// 		const Ogre::Radian& operator = ( const Ogre::Degree& d );

		float valueDegrees() const; // see bottom of this file
		float valueRadians() const;
		float valueAngleUnits() const;

		Ogre::Radian operator + ( const Ogre::Radian& r ) const;
		Ogre::Radian operator + ( const Ogre::Degree& d ) const;
/*		Ogre::Radian& operator += ( const Ogre::Radian& r );
		Ogre::Radian& operator += ( const Ogre::Degree& d );*/
		Ogre::Radian operator - () ;
		Ogre::Radian operator - ( const Ogre::Radian& r ) const ;
		Ogre::Radian operator - ( const Ogre::Degree& d ) const;
/*		Ogre::Radian& operator -= ( const Ogre::Radian& r );
		Ogre::Radian& operator -= ( const Ogre::Degree& d );*/
		Ogre::Radian operator * ( float f ) const;
        Ogre::Radian operator * ( const Ogre::Radian& f ) const;
/*		Ogre::Radian& operator *= ( float f );*/
		Ogre::Radian operator / ( float f ) const;
// 		Ogre::Radian& operator /= ( float f );

		bool operator <  ( const Ogre::Radian& r ) const ;
		bool operator <= ( const Ogre::Radian& r ) const ;
		bool operator == ( const Ogre::Radian& r ) const;
// 		bool operator != ( const Ogre::Radian& r ) const { return mRad != r.mRad; }
/*		bool operator >= ( const Ogre::Radian& r ) const ;
		bool operator >  ( const Ogre::Radian& r ) const ;*/
		
// 	 const Ogre::Radian& operator = ( const Ogre::Degree& d ) ;
// 	 Ogre::Radian& operator += ( const Ogre::Degree& d );
// 	 Ogre::Radian& operator -= ( const Ogre::Degree& d ) ;
		
	};

    /** Wrapper class which indicates a given angle value is in Ogre::Degrees.
    @remarks
        Ogre::Degree values are interchangeable with Ogre::Radian values, and conversions
        will be done automatically between them.
    */
	class Degree
	{
		Degree ( float d=0 ) ;
		Degree ( const Ogre::Radian& r ) ;
// 		const Ogre::Degree& operator = ( const float& f );
// 		const Ogre::Degree& operator = ( const Ogre::Degree& d ) ;
// 		const Ogre::Degree& operator = ( const Ogre::Radian& r );

		float valueDegrees() const;
		float valueRadians() const; // see bottom of this file
		float valueAngleUnits() const;

		Ogre::Degree operator + ( const Ogre::Degree& d ) const ;
		Ogre::Degree operator + ( const Ogre::Radian& r ) const ;
/*		Ogre::Degree& operator += ( const Ogre::Degree& d ) ;
		Ogre::Degree& operator += ( const Ogre::Radian& r ) ;*/
		Ogre::Degree operator - ();
		Ogre::Degree operator - ( const Ogre::Degree& d ) const ;
		Ogre::Degree operator - ( const Ogre::Radian& r ) const ;
/*		Ogre::Degree& operator -= ( const Ogre::Degree& d );
		Ogre::Degree& operator -= ( const Ogre::Radian& r );*/
		Ogre::Degree operator * ( float f ) const ;
        Ogre::Degree operator * ( const Ogre::Degree& f ) const ;
/*		Ogre::Degree& operator *= ( float f );*/
		Ogre::Degree operator / ( float f ) const;
// 		Ogre::Degree& operator /= ( float f );

		bool operator <  ( const Ogre::Degree& d ) const ;
		bool operator <= ( const Ogre::Degree& d ) const ;
		bool operator == ( const Ogre::Degree& d ) const ;
// 		bool operator != ( const Ogre::Degree& d ) const ;
/*		bool operator >= ( const Ogre::Degree& d ) const ;
		bool operator >  ( const Ogre::Degree& d ) const ;*/
	};


}
