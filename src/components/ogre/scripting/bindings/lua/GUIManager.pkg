$#include "GUIManager_helper.h"


namespace Ember {
namespace OgreView {

class GUIManager 
{
	//from Singleton
	static GUIManager& getSingleton( void );

	sigc::signal<void, const Ember::EntityTalk&, Ember::EmberEntity*> AppendIGChatLine;
	sigc::signal<void, const std::string&, Ember::EmberEntity*> AppendOOGChatLine;
	sigc::signal<void, const std::string&> AppendAvatarImaginary;
	
	sigc::signal<void, const std::string&, Ember::EmberEntity*> EventEntityAction;
	
	sigc::signal<void, float> EventFrameStarted;
	
	tolua_outside void _GUIManager_appendAvatarImaginary @ appendAvatarImaginary(const std::string& message);

	
	void removeWidget(Ember::OgreView::Gui::Widget* widget);
	void addWidget(Ember::OgreView::Gui::Widget* widget);

	void EmitEntityAction(const std::string& action, Ember::EmberEntity* entity);

	CEGUI::Window* getMainSheet() const;

	bool isInGUIMode() const;
	
	
	bool isInMovementKeysMode() const;
	
//	inline CEGUI::OgreCEGUIRenderer* getGuiRenderer() const {return mGuiRenderer;}

	const std::string& getLayoutDir() const;

	/**
	Creates a new window of the supplied type, giving it an autogenerated, unique name.
	*/
	CEGUI::Window* createWindow(const std::string& windowType);
	
	/**
	Creates a new window of the supplied type with the supplied name.
	*/
	CEGUI::Window* createWindow(const std::string& windowType, const std::string& windowName);
	
	/**
	 *    Creates a new Widget
	 * @return 
	 */
	Ember::OgreView::Gui::Widget* createWidget();
	

	/**
	* Destroys a widget previously created by createWidget
	* @param widget The widget to destroy.
	*/
	void destroyWidget(Ember::OgreView::Gui::Widget* widget);
	
	/**
	 *    Gets the name of the default scheme used (such as "EmberLook" or "WindowsLook")
	 * @return 
	 */
	const std::string& getDefaultScheme() const;

	//Ember::OgreView::EntityWorldPickListener* getEntityPickListener() const;

	/**
	 *    Accessor for the IconManager which handles low level icons.
	 * @return The main IconManager
	 */
	Ember::OgreView::Gui::Icons::IconManager* getIconManager() const;
	
	/**
	 *    Accessor for the EntityIconManager, which handles entity icons and slots.
	 * @return The main EntityIconManager
	 */
	Ember::OgreView::Gui::EntityIconManager* getEntityIconManager() const;

	Ember::OgreView::Gui::ActionBarIconManager* getActionBarIconManager();
	
	Ember::OgreView::Gui::EntityTooltip* getEntityTooltip() const;
	
};
}
}
