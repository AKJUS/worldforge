//
// C++ Interface: ModelRenderer
//
// Description: 
//
//
// Author: Erik Ogenvik <erik@ogenvik.org>, (C) 2005
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.//
//

namespace Ember {
namespace OgreView {
namespace Gui {

/**

Renders a single Model to a CEGUI texture. Useful for stuff like inventory or preview of models.

@author Erik Ogenvik
*/
class ModelRenderer : public Ember::OgreView::Gui::MovableObjectRenderer
{
public:

	/**
	 *    Creates a one shot image. This is rather inexpensive, since there's no need for rendering each frame, but it disallows updates to the image.
	 * @param image 
	 */
	//static void OneShotRender(CEGUI::Window* image);

    /**
     * Constructir
     * @param image A valid CEGUI::StaticImage, to which the Model will be rendered.
     * @paran name A unique name.
     * @return 
     */
    ModelRenderer(CEGUI::Window* image, const std::string& name);

    ~ModelRenderer();
    
    /**
     * Renders the submitted Model.
     * @param modelName A valid Model
     */
	void showModel(const std::string& modelName, const Ogre::Vector3& translation = Ogre::Vector3::ZERO, const Ogre::Quaternion& orientation = Ogre::Quaternion::IDENTITY);

	void showModel(const Model::ModelDefinitionPtr& definition, const Ogre::Vector3& translation = Ogre::Vector3::ZERO, const Ogre::Quaternion& orientation = Ogre::Quaternion::IDENTITY);


    /**
     * Returns the current rendered Model, or null if none is set.
     * @return 
     */
    Model::Model* getModel();

	/**
	 *    Repositions the scene node using the settings of the Model instance.
	 */
	void repositionSceneNode();
};
}
}
}