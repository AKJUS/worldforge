//
// C++ Interface: Environment
//
// Description: 
//
//
// Author: Erik Ogenvik <erik@ogenvik.org>, (C) 2006
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.//
//

namespace Ember {
namespace OgreView {

namespace Environment {

struct ISun
{
public:
	virtual void setAmbientLight(const Ogre::ColourValue& colour) = 0;

};

struct ISky
{
public:
};

struct IFog
{
public:
	virtual void setDensity(float density) = 0;
	virtual float getDensity() const = 0;
};

struct IWater
{
public:
};



/**
	@author Erik Ogenvik <erik@ogenvik.org>
*/
class Environment
{

   
	inline Ember::OgreView::Environment::ISun* getSun();
	inline Ember::OgreView::Environment::ISky* getSky();
	inline Ember::OgreView::Environment::IFog* getFog();
	inline Ember::OgreView::Environment::IWater* getWater();
    
    
    void setTime(int hour, int minute, int second = 0);
	void setTime(int seconds);
    
  	/**
	 * @brief Sets the time multiplier, i.e. how much the time of the environment will progress per real time second.
	 * @param multiplier The time multiplier.
	 */
	void setTimeMultiplier(float multiplier);

	/**
	 * @brief Gets the time multiplier, i.e. how much the time of the environment will progress per real time second.
	 * @return The time multiplier.
	 */
	float getTimeMultiplier() const;
		  
	/**
	 *    changes the ambient light
	 * @param colour 
	 */
	void setAmbientLight(const Ogre::ColourValue& colour);
    
    
   	/**
	* emitted when the world ambient light is changed
	*/
	sigc::signal<void, const Ogre::ColourValue&> EventUpdatedAmbientLight;



};


}
}
}