$#include "ConfigServiceHelper.h"


namespace Ember {

	/**
	 * @brief An enum of XDG base directory types.
	 *
	 * This lists the types of possible XDG base directories. Ember currently does not use RUNTIME.
	 */
	enum BaseDirType {BaseDirType_DATA, BaseDirType_CONFIG, BaseDirType_CACHE, BaseDirType_RUNTIME};

class ConfigService
{

    //----------------------------------------------------------------------
    // Getters & Setters
    //----------------------------------------------------------------------

    /**
     * Returns value stored in key in appropriate section.
     *
     * @param Section of config space to look in.
     * @param Key to return value of.
     */
    varconf::Variable getValue(const std::string& section, const std::string& key) const;

    /**
     * Sets value of key in appropriate section.
     *
     * @param Section of config space to look in.
     * @param Key to store value in.
     * @param Value to store.
     */
    void setValue(const std::string& section, const std::string& key, const varconf::Variable& value, int scope = varconf::INSTANCE);

    //----------------------------------------------------------------------
    // Methods
    //----------------------------------------------------------------------

	/**
	Returns true if the item is set to the supplied value.
	*/
	bool isItemSet(const std::string& section, const std::string& key, const std::string& value) const;

    /**
     * Returns true if the key exists in the section given.
     *
     * @param Section of config space to look in.
     * @param Key to look for.
     */
    bool itemExists(const std::string& section, const std::string& key) const;

    /**
     * Returns true if the key exists in the section give but is successfully
     * removed.
     * 
     * @param Section of config space to look in.
     * @param Key to remove.
     */
    bool deleteItem(const std::string& section, const std::string& key);

    /**
     * Loads config space from given file.
     *
     * @param Name of file to read from.
     */
    bool loadSavedConfig(const std::string& filename);

    /**
     * Saves config space to given file.
     *
     * @param Name of file to save to.
     */
	bool saveConfig(const std::string& filename, int scopeMask = varconf::GLOBAL | varconf::USER | varconf::INSTANCE);
	
	/**
	* returns the path to the home directory, where all configuration is stored
	*/
	tolua_outside std::string _ConfigService_getHomeDirectory @ getHomeDirectory(BaseDirType baseDirType) const;
	
	/**
	* returns the path to the shared data directory, where common media is
	*/
	tolua_outside std::string _ConfigService_getSharedDataDirectory @ getSharedDataDirectory() const;
	/**
	* returns the path to the ember data directory, where ember media is
	*/
	tolua_outside std::string _ConfigService_getEmberDataDirectory @ getEmberDataDirectory() const;
	
	/**
	 *    returns the path to the media directory specific to a user, but synced with the main server, which would normally be ~/.ember/ember-media
	 * @return 
	 */
	tolua_outside std::string _ConfigService_getEmberMediaDirectory @ getEmberMediaDirectory() const;
	
	/**
	 *    returns the path to the media directory specific to a user, containing media created by the user, which would normally be ~/.ember/user-media
	 * @return 
	 */
	tolua_outside std::string _ConfigService_getUserMediaDirectory @ getUserMediaDirectory() const;
	
	/**
	 *    returns the path to the media directory shared between users, which would normally be $prefix/games/ember/media
	 * @return 
	 */
	tolua_outside std::string _ConfigService_getSharedMediaDirectory @ getSharedMediaDirectory() const;

	/**
	 *    returns the path to the shared config directory where all the original configuration files are stored
	 * @return 
	 */
	tolua_outside std::string _ConfigService_getSharedConfigDirectory @ getSharedConfigDirectory() const;

	/**
	*	Emitted when a config item is changed.
	*	@param the section of the config item
	*	@param the key of the config item
	*/
	sigc::signal<void, const std::string&, const std::string&> EventChangedConfigItem;
	
	/**
	 * @brief Gets the prefix, i.e. the root directory where Ember is installed.
	 * @return The prefix, i.e. the root directory where Ember is installed.
	 */
	const std::string& getPrefix() const;
	
	

}; //ConfigService

}

