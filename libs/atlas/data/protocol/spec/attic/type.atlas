ATLAS type definition file (modeline for XEmacs: -*-Python-*-)
IWILL Bach_beta2

[
{
    id:"root_type",
    parents:["root"],
    objtype:"meta",
    summary:"Type hierarchy starts from here."
},
{
    id:"string",
    parents:["root_type"],
    objtype:"data_type",
    summary:"UTF-8 encoded string.",
    description:"Any character is allowed, including 8 bit control characters and '\\0', C equivalent: {int len; char *data;}, C++: string"
},
{
    id:"int",
    parents:["root_type"],
    objtype:"data_type",
    summary:"Integer.",
    description:"C equivalent: 32bit int"
},
{
    id:"float",
    parents:["root_type"],
    objtype:"data_type",
    summary:"Floating point number.",
    description:"C equivalent roughly: double",
},
{
    id:"uri",
    parents:["string"],
    objtype:"type",
    summary:"URI (URL) of object",
    description:"C equivalent roughly: for storing id name: char *, as pointer: void *<br>
URI is Uniform Resource Locator.
For more about URI see 
<a href=\"http://www.ics.uci.edu/pub/ietf/uri/\">http://www.ics.uci.edu/pub/ietf/uri/</a>"

#more about ID when discussing about MIM (Media Independant Map) -format
## <Jamie> But do they all have object IDs, and how do we keep them seperate from the world ids?
## <aloril> and client can load tgz file too of course..
## <aloril> ahh... namespace question...
## <aloril> well that is problem: current atlas has server specific flat id space for *everything*
## <Jamie> Yes, and do operations share namespace with objects, and can we overload operations?
## <aloril> (attribute names, operations, classes, object ids, type, etc...)
## <Jamie> Can we overload operations?  I think so, looking at the specs
## <aloril> hmm... would that be inheritance?
## <aloril> ie client doesn't know what it's and uses parent definition instead
## <kosh> sorry afk walking someone through installing windows 98
## <Jamie> I am not sure.. But if I pass it a list/int or 3 ints seperatly a move might be able to understand both... location=(1,2,3) or x=1,y=2,z=3...
## <aloril> about how to keep MIM id's separate from world ids... server specific thing, could for example add 'M' to start...
## <aloril> ahh... that... hmm.. probably better have only one format when transmitting..
## <Jamie> Well, I see the world made up as alot of MIM maps all connected, so ids between maps need to be kept seperate as well.  Why not anything with MIM_ in the xml spec or some other special code in other specs to identify it?
## <kosh> everyone has to feel sorry for me since I am walking someone through isntalling windows 98
## <kosh> :)
## <aloril> jamie, server can freely use whatever id scheme it wants...
## <aloril> thats why they are strings ;-)
## <Jamie> True
## <aloril> for example: "M_area1_123"
## <Jamie> But protocols can drop the strings and use anything it wants, as long as it keeps a conversion list local.
## <aloril> client of course can keeps it's own id system and translate between strings and ints ..
## * aloril nods
## <aloril> server ha total freedom in ids, client's must translate..
## <Jamie> So if I map "Mim_area1_123" to 1233455 the protocol only needs to handle int's, and it can make up anything on the client side.
## <aloril> ie this is case where we sacrifice some 0.01% of client CPU for server ;-)
## <Jamie> *nods*
## <Drew> kosh, how can someone not be able to do it alone?
## <kosh> you would be amazed
## <aloril> or was it 0.1% don't remember offhand but it was really small amount...
## <Jamie> Not a large one.
## <aloril> only restriction is that you can't use '/' character and similar characters that are used in URI for other purposes
## <aloril> much more time goes for marshalling all tags but still probably <1%
## <aloril> (assuming binary here)
## <kosh> drew after walking a newbie through windows over the phone I saw all the points they got hung up one windows is not easy to install
## <Drew> kosh, oh? Such as? (I'm not defending Win, just curious since I think it's so easy)
## <kosh> I thought it was easy also but things like installing drivers she got hung up on
## <kosh> or how to just start
## <Drew> Ah, I see.
## <kosh> we had to change her BIOS to support CD rom booting to continue
## <kosh> another example was when installing on some menus she asked me what the question meant since she did not understand
## <Drew> Hmm.
## * Drew points kosh to #lounge...
## * Drew knows that he might be too busy.
## <aloril> hmm... mail.worldforge.org seems down...
## <aloril> if we used ints:
## <aloril> Integer: 1100K/s
## <aloril> String: 350K/s
## <aloril> client needs to still do map (or hash lookup) above is STL map
## <aloril> Lets assume 10B/msg.
## <aloril> Lets assume about 8KB/s or 800msg/s in bandwidth.
## <aloril> Integer: 0.07% of CPU.
## <aloril> String:  0.2% of CPU.
## <aloril> Result:  0.13% difference
## <aloril> whole message is at scripting@ archives
## <aloril> 19 May 1999 11:50:34 +0300
## <aloril> Subject: Re: [Worldforge-Scripting]  Re: Atlas: Id
## <aloril> with test program too... it uses STL map (hmm... is map implemented using hash or ?)
},
{
    id:"string_list",
    parents:["list"],
    objtype:"type",
    element_type:"string",
    summary:"List of strings"
},
{
    id:"int_list",
    parents:["list"],
    objtype:"type",
    element_type:"int",
    summary:"List of integers",
    description:"C equivalent: int []"
},
{
    id:"float_list",
    parents:["list"],
    objtype:"type",
    element_type:"float",
    summary:"List of floats",
    description:"C equivalent: double []"
},
{
    id:"uri_list",
    parents:["string_list"],
    element_type:"uri",
    summary:"URI list",
    description:"C equivalent: char *[], void *[]"
},
{
    id:"list",
    parents:["root_type"],
    objtype:"data_type",
    summary:"List of objects",
    description:"C equivalent: void *[]",
    added_attributes:[]
},
{
    id:"map",
    name:"mapping",
    parents:["root_type"],
    objtype:"data_type",
    summary:"Mapping between string key and value object",
    description:"C equivalent: struct map {char *;void *}; map*",
    added_attributes:[]
},
{
    id:"bool",
    parents:["int"],
    objtype:"meta",
    #range:[0,1]
    #allowed_value:[0,1]
    summary:"Yes/No values (encoded as 1/0)"
},
{
    id:"int_list_length",
    parents:["int_list"],
    objtype:"meta",
    list_length:0,
    summary:"List of ints with constant length",
    description:"Inherit required object from this and set length attribute to suitable value."
},
{
    id:"float_list_length",
    parents:["float_list"],
    objtype:"meta",
    list_length:0,
    summary:"List of floats with constant length",
    description:"Inherit required object from this and set length attribute to suitable value."
},
{
    id:"float_list3",
    parents:["float_list_length"],
    list_length:3,
    summary:"Float list with length of 3",
    description:"Used in 3D world for various things"
},
{
    id:"pos",
    name:"position",
    parents:["float_list3"],
    objtype:"type",
    summary:"Position coordinates, usually world is 3D"
},
{
    id:"velocity",
    parents:["float_list3"],
    objtype:"type",
    list_length:3,
    summary:"Velocity object is moving, usually world is 3D"
},
{
    id:"rotation",
    parents:["list"],
    element_type:"float_list3",
    objtype:"type",
    list_length:3,
    summary:"Rotation matrix in 3D world",
    description:"From forge/libs/wfmath/wfmath/rotmatrix.h:
Elements of this class represent rotation matrices. The NxN dimensional
rotation matrices form a group called O(N), the orthogonal
matrices. They satisfy the following condition:
<p>
A general N dimensional matrix of this type has N(N-1)/2 degrees of freedom.
This gives one rotation angle in 2D, the three Euler angles in 3D, etc.
"
},
{
    id:"list_length",
    parents:["int"],
    objtype:"type",
    summary:"Length for lists"
},
{
    id:"element_type",
    parents:["id"],
    summary:"Element type for typed lists/mappings"
},
{
    id:"id",
    parents:["uri"],
    summary:"Id of object",
    description:"C equivalent roughly: for storing id name: char *, as pointer: void *"
},
{
    id:"id_list",
    parents:["uri_list"],
    summary:"List of ids"
},
{
    id:"parents",
    parents:["id_list"],
    summary:"List of objects this inherits attributes from."
},
{
    id:"children",
    parents:["id_list"],
    summary:"List of objects that inherit from this object."
},
{
    id:"contains",
    parents:["id_list"],
    summary:"List of objects that use this object as reference system (usually same as what this object contains)."
},
{
    id:"detailed_contents"
    parents:["bool"],
    objtype:"type",
    summary:"true if contents gives more details than this object"
},
{
    id:"added_attributes",
    parents:["contains"],
    summary:"List of attributes that has been added to this object"
},
{
    id:"characters",
    parents:["contains"],
    summary:"List of characters account can control"
},
{
    id:"arg",
    parents:["map"],
    objtype:"type",
    summary:"Argument for operation"
},
{
    id:"args_source",
    parents:["list"],
    objtype:"type",
    summary:"List of source arguments (for combine and similar operations)"
},
{
    id:"args_destination",
    parents:["list"],
    objtype:"type",
    summary:"List of destination arguments (for divide and similar operations)"
},
{
    id:"arg_names",
    parents:["list"],
    objtype:"type",
    summary:"List argument attribute names"
},
{
    id:"op",
    parents:["map"],
    objtype:"type",
    summary:"Opertion that caused error as argument to error operation"
},
{
    id:"operations",
    parents:["id_list"],
    summary:"List of alloved operations",
    description:"Content ids can be either another interface or operation ids or both."
},
{
    id:"stamp",
    parents:["float"],
    objtype:"type",
    summary:"Last time this object was modified.",
    description:"Value should be reflect when something was
    changed in this object. Any scheme is ok as long as newer numbers
    are bigger than older stamps. For example, seconds since Jan 1st,
    1970 or total game cycles would both be valid."
},
{
    id:"stamp_inherit",
    parents:["stamp"],
    objtype:"type",
    summary:"Last time any object that inherits from this has been modified",
    description:"Value should be reflect when something was changed in some object that inherits from this."
## <aloril> get:
## <aloril>   id:root
## <bryce> ok aloril
## <aloril>   stamp_inherit:100.0
## <aloril> and server then tells: what of root leaf objets have changed objects somewhere in tree
## <aloril> and then client asks again objects it's interested, etc...
## <aloril> so it needs to make as many trips as tree is deep (nope it of course sends several "get" operations for each depth as needed)
},
{
    id:"stamp_contains",
    parents:["stamp"],
    objtype:"type",
    summary:"Last time any object that uses this as reference recursively has been modified",
    description:"Value should be reflect when something was changed in some object that is contained by this object."
## <aloril> oh yes... now I remember why I made them different:
## <aloril> they don't set contains list to certain value, they only tell about special dynamic field...
## <aloril> another option instead of stamp_instance would be "contains_changed" and "instance_changed"
## <aloril> and when you request it with certain stamp it would list all things that have changed:
## <aloril> if contains -attribute itself has changed: it would present with new list
## <Jamie> Well, how does the server know to send a list of contents_changed or instances_changed instead of the object it's self?
## <aloril> if only contained objects have changed (but no additions/deletions): then list only contains_changed
## <Jamie> Oh, so it returns all all the time.
## <aloril> yes.. if it has changed..
## <aloril> example:
## <aloril> table position changed:
## <Jamie> I understand
## <aloril>   stamp update: send only position
## * aloril typing for docs
## <aloril> if cup added and pos changed
## <Jamie> *nods*
## <aloril> send position, contains and contains_changed
## <aloril> if cup position changed: send only contains_changed
## <ZW> query -- if you are in a room/container and another actor moves an object, isnt that event propogated to all actors in the container so they can update state immedaitly ??
## * aloril is going to commit discussion results as comments to def files (and later add them proper)
## <aloril> ZW: yes
## <aloril> contains_changed is when you reloginm awake, etc... or something stroll in to view
## <ZW> then why would I ever need to scan for changed objects if I already have the current state ??
## <aloril> (contains_changed then is used to see what it wears now)
## <aloril> ZW: then you don't... but normal clients will frequently encounter situation when they don't have current state
## <ZW> k... so you are saying that if I go offline for several hours I remember the last state and lony need to get the changes when I log back in rather than all the info for the current container ???
## <Jamie> ZW: When you log in and want to know what basic things have changed... for example an "account" might have an extra field
## <aloril> ZW: this same method works for updating operation, class, etc.. defitions, only then it's instance_changed
## * aloril nods to ZW
## <ZW> understand it at that level... was tryuing to understand in game context
## * ZW doesnt quite agree, thinks that is caching too much of the game state at the client
## <anubis> hmm, but the server won't know what has changed between the clients disconnect/reconnect since an ai script has been keeping up the slack. so does the server have to store all evens since forever to know what to update from when?
## <aloril> ZW: they don't need to cache... if they don't want it ;-)
## <anubis> seems like client should just request full dump and then can optimize if it has stored info
## <aloril> anubis, nope client stores it's latest stamp, server can always send more than needed
## <ZW> Anubis -- nope -- just sends current state on connect for whats "in view" of the actor
## <aloril> for example if clients latest status was: "50.0"
## <anubis> aloril: but then server has to know diff between every stamp and current
## <anubis> zw; that's what I was thinking
## <aloril> hmm...
## <aloril> for example if clients latest status was: "150.0"
## <aloril> servers current state is 200.0 and latest 'saved' state is 100.0
## <aloril> then server sends changes since 100.0
## <aloril> if no saved state: send everything...
## <ZW> Tacendia even goes so far as to send locations of trees/rocks.buildings/etc for the display redering... someone may have chopped down a tree :)))
## <aloril> of course server could do this: save stamp for each attribute and/or stamp for object
## <Jamie> Er.. Traverse the tree, looking for stamps newer than what the client has, and send them all
## <aloril> jamie, ohh.. thats short and good explanation
## <anubis> aloril: but in most instances of long disconnects, why bother traversing the tree?  wouldn't that be less effient than just a full dump?
## <ZW> jamie -- on a huge world with 100,000 + objects and actors -- that could take a while :)))
## <aloril> anubis, it's full dump in 10-40 iterations
## <anubis> if stamp is < a certain window, do incremental
## <anubis> if stamp > window, full dump
## * aloril nods to anubis
## <aloril> server implementation specific how to do it
## <Jamie> ZW: My point:  Don't send all the actors/objects, just entities with children.  These are the basic structures and a very small set
## <anubis> my guess is that window is going to be a matter of minutes, but you're right...its implementation specific
## <ZW> just asking why I care anything about stuff outside my view -- when I walk into a new area I get the updates wether or not I've cached data
## <aloril> no need to even have stamp, but .. probably useful optimization ;-)
## <kosh> you should not ever been sent anything outside your view
## <kosh> that would allow someone to cheat too easily
## * aloril nods to kosh
## <aloril> ZW: it's client specific decision...
## <aloril> ZW: if client is sophisticated: cache as much as possible
## * ZW agrees with kosh, wonders why optimizing what even in an outdoor scene is gonna be a relitivly small dataset to synchronize
## <aloril> ZW: if client is simple, get everything every time (using stamp 0.0)
## <anubis> stamp is probably needed for debugging/optimization, but might be ignorable for running world
## <aloril> ZW: it's not actually small optimization, example:
## <ZW> Aloril --- my idea of usig a cut-down server for the client would give you the sophisticated caching you need.. but dont see cause to abuse it
## <aloril> ZW: you revolve: things appear and disappear in rapif succession
## <aloril> ZW: of course server can do: you see to all directions ;-)
## <aloril> s/rapif/rapid/
## <ZW> aloril -- you are standing in place or revolving or whatever -- averything within a certain radius was sent to you the moment you entered that radius
## <ZW> now you can revolve without any updates or field of view concerns
## * aloril nods to ZW: again implementation specific
## <ZW> s/you entered/the object entered/
## <aloril> if you don't make things disappear when revolving, you don't need to make them appear either..
## <anubis> ZW: the server should only send the update when you are facing the right way and its w/in the radius
## <anubis> client can store info and keep displaying it, but things may jump when player turns a given direfinds things moved
## <ZW> but thats not taking advantage of client caching in an obvious case where fast change of view is possible
## <ZW> i.e. rotating in place
## <anubis> direfinds/direction and finds
## <anubis> ZW: it is, but the client won't get an update it shouldn't
## <anubis> the client can assume things are static
## <anubis> and that will almost always be correct
## <anubis> but if I shoot an arrow at your back, you shouldn't see it
## <ZW> then when I start rotating I have to wait on server latency before I see the theif creeping up behind me ???
## <anubis> there are the two cases :)
## <cyanide> well if something ought to stop you rotating...
## <anubis> pick your balance point
## <ZW> anubis -- the client may not display it, but needs to be aware of it
## *** BS_AWAY is now known as Bloodspor
## <aloril> ZW: note that we assume hacked clients..
## * Bloodspor goes to work on the waterfall again
## <anubis> ZW: but the client isn't a fixed thing.  we can't prevent a 'hacked' client from displaying that
## <aloril> hi bloodspor
## <Drew> What about the overhead client? The player will only what's in front of him?
## <Bloodspor> heya aloril
## <anubis> so it ought to be controlled server side
## <aloril> drew: client specific decision: it might grey things for example
## <anubis> drew: I would again say you get updates from field of characters view, the rest is cached
## <aloril> that are outside view
## <anubis> and not updated untill in characters field of view again
## <ZW> not having source code never stopped people from hacking diablo -- hacking is a price you pay for publishing a game
## <anubis> ZW: yes, hacking will happen
## <anubis> so prevent cheating by not giving away privledged info
## <aloril> ZW: yes... thats why we design things with assumption of hacked client ;-)
## <cyanide> the client knows as much as the player should, is the general rule
## <ZW> and reduce playability by introducing server latency in every movement the player makes... I'll risk the hackers
## <aloril> ZW: client can always assume things: more client knows about server, more accurately it can simulate things
## <Jamie> No... I am making my client have a local cache, and update as soon as it is asked.  The confirmation comes from teh server.  This is just like quake works.
## <anubis> ZW: you can't avoid the latency.  That thief won't see you turn until your client sends the info, the server processes it, and broadcasts it
## <aloril> ZW: have you read http://unreal.epicgames.com/Network.htm ?
## <ZW> anubis --- I understand that -- but if I turn and he doent pop up in my field of view until  have turned past him.. thats BAD
## <anubis> ZW: yes.  latency sucks one way or the other.  various implementations can deal with that different ways.  But I see your point
## <aloril> ZW: thats why operations have time field: you send both appear and disappear with slightly different time attribute at the same time
## <aloril> so yes... client might make some things seem like they appeared in greyed area ;-)
## <ZW> but the client still doesnt have the info to display the theif until I have roated another 5/10/15 degrees/whatever amount server latency translates into).. so I turn around... there is nothing behind me -- then POOF -- there is a thief !!! (where the hell did HE come from ???)
## <aloril> IRC==insta raw atlas docs ;-)
## <anubis> ZW: if the client tells the server you faced the right way at the right time, it will send a thief update
## <anubis> you may be overrotated a bit, but you'll suddenly see the thief
## <ZW> sure -- 500-1500 milliseconds after I am facing that way !!!
## <aloril> ZW: yes.. that sucks but can be little mitigated by client<->client communication
## <ZW> (0.5-1.5 secs)
## <aloril> (assuming far clients, or maybe by using proxy)
## <anubis> ZW: turn slower ;)
## <aloril> ZW: same with if you drop vase and somebody with really nice connection graps it before it breaks..
## <anubis> remember also your field of view is probably 180 degrees
## <aloril> ZW: clients with nice simulated physics will see it get fixed ;-)
## <ZW> sory -- I refuse to even allow the possibility in any game world I design --- but the server core will handle your way or my way just as easily -- have a blast :)))
## <Drew> I guess for that matter you could just spin around all the time and see all around you.
## <aloril> ZW: note that usully however things work like excepted and with proxies even more... but that is price we pay for having 'hack proof' clients
## * anubis adds a dizziness attribute
## <ZW> Aloril -- how can physics fix a lack of info for physics code to operate on without the client display running lag-time *2 behind game clock ??
## <aloril> ZW: server doesn't fix anything, client fixes failed predictions
## <aloril> ZW: if you couldn't do something because lag: though luck...
## <ZW> by poofing up the thief after I have turned and seen an empty street
## <aloril> ZW: from server viewpoint you haven't turned away from thief yet..
## *** scromp (^bnaylor@haybaler.sackheads.org) has joined #forge
## <brenda> hi scromp
## <aloril> wb scromp
## <ZW> the only fix is that I hit the key to turn and I dont turn until server sez I have -- introducing a lagtime*2 response delay to any action
## <anubis> hi scromp
## <anubis> ZW: the trick is that you have to think you could be the thief, or the victim.  Try to balance the game for both.
## <ZW> or have the data there and forget the hackers
## <aloril> ZW: ahh.. but how often character revole continuoysly? hmm.. quick look has same effect though
## <ZW> initiative plays a factor -- the thief has the advantage because he started the attack before you noticed he was there and turned
## <aloril> ZW: here is solution: privileged proxy near client
## <aloril> with small lag
## <anubis> aloril: interesting idea
## <aloril> ZW: yes.. you can send data and hope people don't use hacked client
## <ZW> aloril --- while I have an idea for using multicast pipes between distributed nodes of a game world server -- I'm not sure how well that idea will work yet
## <aloril> but... better assume other way...
## <ZW> (software multicast routers to provide linkage between widely seperated clusters of servers processing the same game world)
## <ZW> a proxy as you suggest could be a node in such a network
## <aloril> yes... actually you could even kind of run your trusted client in proxy...
## <aloril> all transparent to actual client and server
## <ZW> if the client has data storage and access systems equivalent to a server -- which is what I'm intending
## * ZW wonders what al would think of light-weight encryption to protect the data ??
## <anubis> ZW: the encryption won't make a difference
## <ZW> not make it imposibile to hack.. but harder
## <aloril> ZW: 'just' additional encoding ;-)
## <ZW> true -- OSS strikes again !!
## <anubis> the client has to be able to decrypt the info
## <aloril> ZW: ahh you mean at client?
## <anubis> there was some talk of a checksum or something to give to certified clients
## <ZW> data is stored encrypted and only decrypted when accessed -- prolly too much overhead
## <aloril> ZW: and easily work around..
## <ZW> yes since source is available
## <aloril> ZW: note that even hardware based DVD got hacked ;-)
## * ZW scraps that idea
## <ZW> welp -- different methodologies are why I want the servers the way I do :))) no reason cant have it both ways in different game worlds :))
## * aloril nods
},
{
    id:"objtype",
    name:"object type",
    parents:["string"],
    objtype:"type",
    summary:"What kind of object this is.",
    description:"Examples of values: \"op\", \"class\", \"type\"."
## <Jamie> What is the abstract_type field for?
## <aloril> it's replacement for "op", "class", "typedef", etc.. tags
## <cyanide> for extension of the protocol?
## <aloril> ie we are likely going to have 'human' XML encoding that uses those as tags some way
## <aloril> cyanide, yes and making things simple at encoding level
},
{
    id:"interface",
    parents:["id"],
    summary:"What kind of operations are legal for this object."
},
{
    id:"specification",
    parents:["string"],
    objtype:"type",
    summary:"What specification this object is part of?"
},
{
    id:"name",
    parents:["string"],
    objtype:"type",
    summary:"Name of object."
},
{
    id:"message",
    parents:["string"],
    objtype:"type",
    summary:"Some message (for example error message)"
},
{
    id:"say",
    parents:["message"],
    summary:"What something has said."
},
{
    id:"text",
    parents:["message"],
    summary:"Text of textual object",
    description:"Text of objects like signs, posters, books, chess board letters, etc..: these are meant to be displayed as text in screen"
},
{
    id:"html",
    parents:["string"],
    objtype:"type",
    summary:"String that is actually html."
},
{
    id:"password",
    parents:["string"],
    objtype:"type",
    summary:"Password for account usually"
},
{
    id:"summary",
    parents:["html"],
    summary:"This gives short description of object, usually about 1 line."
},
{
    id:"arg_description",
    parents:["description"],
    summary:"This gives description about arguments."
},
{
    id:"description",
    parents:["summary"],
    summary:"This gives long description of object: few lines to few pages"
},
{
    id:"loc",
    name:"location",
    parents:["id"],
    objtype:"type",
    summary:"Reference object for coordinates (location)."
},
{
    id:"serialno",
    parents:["int"],
    objtype:"type",
    summary:"Serial number."
},
{
    id:"refno",
    parents:["serialno"],
    summary:"Reference to serial number."
},
{
    id:"refid",
    parents:["id"],
    summary:"Reference to id"
},
{
    id:"no",
    parents:["int"],
    summary:"Number (for example error number)."
},
{
    id:"from",
    parents:["id"],
    summary:"Source of message/operation."
},
{
    id:"to",
    parents:["id"],
    summary:"Target of message/operation.",
    description:"When client sends operation to it's character
    in server, then you can omit this because server can assume
    character can only control directly it's body."
},
{
    id:"seconds",
    parents:["float"],
    objtype:"type",
    summary:"Time in seconds"
},
{
    id:"future_seconds",
    parents:["seconds"],
    summary:"Time in seconds to add current time"
},
{
    id:"future_milliseconds",
    parents:["int"],
    summary:"Time in milliseconds to add current time"
},
{
    id:"time_string",
    parents:["string"],
    objtype:"type",
    summary:"Time in string format: YYYY-MM-DD HH:MM:SS.ss",
    description:"There can be variation in length of different fields if using some weird calendar"
},
{
    id:"example",
    parents:["list"],
    objtype:"type",
    summary:"Gives some examples usage"
},
#attributes for map
{
    id:"coord_id_list",
    parents:["id_list"],
    summary:"Pointer to coordinates"
},
{
    id:"coord_id_list_length",
    parents:["coord_id_list"],
    list_length:0,
    summary:"Fixed length coordinate pointer list"
},
{
    id:"triangle",
    parents:["coord_id_list_length"],
    list_length:3,
    summary:"Pointers to triangle points"
},
{
    id:"tetrahedron",
    parents:["coord_id_list_length"],
    list_length:4,
    summary:"Pointers to tetrahedron points"
},
{
    id:"triangle_list",
    parents:["list"],
    element_type:"triangle",
    objtype:"type",
    summary:"List of triangles"
},
{
    id:"tetrahedron_list",
    parents:["list"],
    element_type:"tetrahedron",
    objtype:"type",
    summary:"List of tetrahedrons"
},
{
    id:"polyline",
    parents:["coord_id_list"],
    summary:"Ids of points that polyline consists of"
    description:"see maps/semantic_maps.pdf for more info."
},
{
    id:"area",
    parents:["triangle_list"],
    summary:"triangles area consist of"
    description:"see maps/semantic_maps.pdf for more info."
},
{
    id:"volume",
    parents:["tetrahedron_list"],
    summary:"tetrahedrons volume consist of"
    description:"see maps/semantic_maps.pdf for more info."
},
{
    id:"glue_ids",
    parents:["list"],
    summary:"List ids that glue objects together",
    description:"See glue_geometry for more info"
},
{
    id:"pos_list",
    parents:["list"],
    objtype:"type",
    element_type:"pos",
    summary:"list of coordinates"
},
{
    id:"p",
    parents:["pos_list"]
},
{
    id:"glue",
    parents:["id_list"],
    summary:"Ids of glue objects that glue this to other objects"
    description:"**not written yet**"
},
{
    id:"root_object",
    parents:["id"],
    summary:"Id of root object",
    description:"This usually has value \"root\", but can also have something like: \"world45/root\"
    or even \"atlas://other.server.org/world5/root\""
},
{
    id:"media_roots",
    parents:["id_list"],
    summary:"List of media servers basically",
    description:"List ids of root_media_info: can be on same server or at different server:
    see root_object attribute definition for more info"
},
#attributes for debugging
{
    id:"specification_file",
    parents:["map"],
    objtype:"type",
    summary:"various info about object and its specification file"
},
{
    id:"filename",
    parents:["uri"],
    summary:"name of file (example: where object was specified)"
},
{
    id:"lineno",
    parents:["serialno"],
    summary:"linenumber where something is"
},
{
    id:"attribute_order",
    parents:["id_list"],
    summary:"order attributes was specified"
},
#attributes for examples
{
    id:"e_int",
    parents:["int"],
    objtype:"type",
    summary:"Root type for all int type example attributes"
},
{
    id:"e_float",
    parents:["float"],
    objtype:"type",
    summary:"Root type for all float type example attributes"
},
{
    id:"e_string",
    parents:["string"],
    objtype:"type",
    summary:"Root type for all string type example attributes"
},
{
    id:"e_uri",
    parents:["uri"],
    summary:"Root type for all uri type example attributes"
},
{
    id:"e_list",
    parents:["list"],
    objtype:"type",
    summary:"Root type for all list type example attributes"
},

{
    id:"e_HP",
    parents:["e_int"]
},
{
    id:"e_height",
    parents:["e_float"]
},
{
    id:"e_width",
    parents:["e_float"]
},
{
    id:"e_msg",
    parents:["e_string"]
},
{
    id:"e_attack",
    parents:["e_int"]
},
{
    id:"e_amount",
    parents:["e_int"]
},
{
    id:"e_smell",
    parents:["e_string"]
},
{
    id:"e_surface_type",
    parents:["e_string"]
},
{
    id:"e_bar",
    parents:["e_string"]
},
{
    id:"e_sex",
    parents:["e_string"]
},
{
    id:"e_drunkness",
    parents:["e_float"]
},
{
    id:"e_status",
    parents:["e_float"]
}
]
