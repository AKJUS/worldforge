#This file is auto generated by the PythonDocGenerator tool. Please do not edit manually.
#Its sole purpose is to provide Python stubs for the C++ code, which can be used in your IDE to help during development.
#Do note that these types aren't complete, with constructor args and properties missing.
"""Responsible for handling AI behaviour."""

CENTER = 0
EDGE = 1
class MemEntity:
    def __init__(self, *args, **kwargs):
        pass
    def as_entity(self):
        pass
    def can_reach(self):
        pass
    def client_error(self):
        pass
    def describe_entity(self):
        pass
    def get_child(self):
        pass
    def get_prop_bool(self):
        pass
    def get_prop_float(self):
        pass
    def get_prop_int(self):
        pass
    def get_prop_list(self):
        pass
    def get_prop_map(self):
        pass
    def get_prop_num(self):
        pass
    def get_prop_string(self):
        pass
    def has_prop_bool(self):
        pass
    def has_prop_float(self):
        pass
    def has_prop_int(self):
        pass
    def has_prop_list(self):
        pass
    def has_prop_map(self):
        pass
    def has_prop_num(self):
        pass
    def has_prop_string(self):
        pass
    def is_type(self):
        """Returns true if the current entity is of supplied string type."""
        pass

class MemMap:
    def __init__(self, *args, **kwargs):
        pass
    def add(self):
        pass
    def add_entity_memory(self, entity_id, name, memory):
        """Adds memory for an entity. First parameter is entity id, second is memory name, and third is the memory contents."""
        pass
    def delete(self):
        pass
    def find_by_filter(self):
        pass
    def find_by_location(self):
        pass
    def find_by_location_query(self):
        pass
    def find_by_type(self):
        pass
    def get(self):
        pass
    def get_add(self):
        pass
    def get_all(self):
        pass
    def recall_entity_memory(self):
        pass
    def remove_entity_memory(self):
        """Removes memory for an entity. First parameter is entity id, second is memory name. If no memory name is supplied all memory for that entity will be removed"""
        pass
    def update(self):
        pass

class Mind:
    def __init__(self, *args, **kwargs):
        pass
    def add_hook_set(self, method_name):
        """Adds a hook that will be called whenever an entity is added."""
        pass
    def add_property_callback(self, property, method_name):
        """Adds a callback that will be called whenever the specified property changes."""
        pass
    def delete_hook_set(self, method_name):
        """Adds a hook that will be called whenever an entity is deleted."""
        pass
    def match_entities(self, filter, entities):
        """Processes the supplied entities and returns a list containing only those that matched the filter."""
        pass
    def match_entity(self, filter, entity):
        """Returns true if the filter applies to the entity."""
        pass
    def update_hook_set(self, method_name):
        """Adds a hook that will be called whenever an entity is updated."""
        pass

class Steering:
    def __init__(self, *args, **kwargs):
        pass
    def direction_to(self):
        pass
    def distance_to(self):
        pass
    def is_at_current_destination(self):
        pass
    def query_destination(self):
        pass
    def refresh_path(self):
        pass
    def set_destination(self):
        pass
    def set_speed(self):
        pass

